
RTOS_S3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008070  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08008200  08008200  00018200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084b4  080084b4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080084b4  080084b4  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084b4  080084b4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084b4  080084b4  000184b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084b8  080084b8  000184b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080084bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000015ec  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001658  20001658  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cdfa  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003dbc  00000000  00000000  0003ced9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001838  00000000  00000000  00040c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012f7  00000000  00000000  000424d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002112f  00000000  00000000  000437c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fe51  00000000  00000000  000648f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c550f  00000000  00000000  00084747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006c48  00000000  00000000  00149c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001508a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081e8 	.word	0x080081e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080081e8 	.word	0x080081e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4a07      	ldr	r2, [pc, #28]	; (80002ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000088 	.word	0x20000088
 80002b0:	20000128 	.word	0x20000128

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b090      	sub	sp, #64	; 0x40
 80002b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ba:	f001 f89f 	bl	80013fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002be:	f000 f88b 	bl	80003d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c2:	f000 f9bb 	bl	800063c <MX_GPIO_Init>
  MX_I2C1_Init();
 80002c6:	f000 f8e9 	bl	800049c <MX_I2C1_Init>
  MX_SPI1_Init();
 80002ca:	f000 f927 	bl	800051c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80002ce:	f000 f993 	bl	80005f8 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 80002d2:	f000 f961 	bl	8000598 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &rxdata, 1);
 80002d6:	2201      	movs	r2, #1
 80002d8:	492e      	ldr	r1, [pc, #184]	; (8000394 <main+0xe0>)
 80002da:	482f      	ldr	r0, [pc, #188]	; (8000398 <main+0xe4>)
 80002dc:	f003 fe42 	bl	8003f64 <HAL_UART_Receive_IT>

  // Create Semaphore
  CountingSem = xSemaphoreCreateCounting(3, 0);
 80002e0:	2100      	movs	r1, #0
 80002e2:	2003      	movs	r0, #3
 80002e4:	f005 f9cd 	bl	8005682 <xQueueCreateCountingSemaphore>
 80002e8:	4603      	mov	r3, r0
 80002ea:	4a2c      	ldr	r2, [pc, #176]	; (800039c <main+0xe8>)
 80002ec:	6013      	str	r3, [r2, #0]

  if(CountingSem == NULL) {
 80002ee:	4b2b      	ldr	r3, [pc, #172]	; (800039c <main+0xe8>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d111      	bne.n	800031a <main+0x66>
	  uint8_t create_data[50];
	  sprintf(create_data, "Unable to create semaphore!\r\r\n");
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4929      	ldr	r1, [pc, #164]	; (80003a0 <main+0xec>)
 80002fa:	4618      	mov	r0, r3
 80002fc:	f007 fa6a 	bl	80077d4 <siprintf>
	  HAL_UART_Transmit(&huart1, create_data, strlen(create_data), 500);
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	4618      	mov	r0, r3
 8000304:	f7ff ff64 	bl	80001d0 <strlen>
 8000308:	4603      	mov	r3, r0
 800030a:	b29a      	uxth	r2, r3
 800030c:	1d39      	adds	r1, r7, #4
 800030e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000312:	4821      	ldr	r0, [pc, #132]	; (8000398 <main+0xe4>)
 8000314:	f003 fd9c 	bl	8003e50 <HAL_UART_Transmit>
 8000318:	e010      	b.n	800033c <main+0x88>
  }
  else {
	  uint8_t create_data[50];
	  sprintf(create_data, "Counting semaphore created!\r\r\n");
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4921      	ldr	r1, [pc, #132]	; (80003a4 <main+0xf0>)
 800031e:	4618      	mov	r0, r3
 8000320:	f007 fa58 	bl	80077d4 <siprintf>
	  HAL_UART_Transmit(&huart1, create_data, strlen(create_data), 500);
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff52 	bl	80001d0 <strlen>
 800032c:	4603      	mov	r3, r0
 800032e:	b29a      	uxth	r2, r3
 8000330:	1d39      	adds	r1, r7, #4
 8000332:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000336:	4818      	ldr	r0, [pc, #96]	; (8000398 <main+0xe4>)
 8000338:	f003 fd8a 	bl	8003e50 <HAL_UART_Transmit>
  }

  // Create Task
  xTaskCreate(HPT_Task_Start, "HPT", 128, NULL, 3, &HPTHandler);
 800033c:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <main+0xf4>)
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	2303      	movs	r3, #3
 8000342:	9300      	str	r3, [sp, #0]
 8000344:	2300      	movs	r3, #0
 8000346:	2280      	movs	r2, #128	; 0x80
 8000348:	4918      	ldr	r1, [pc, #96]	; (80003ac <main+0xf8>)
 800034a:	4819      	ldr	r0, [pc, #100]	; (80003b0 <main+0xfc>)
 800034c:	f005 fde0 	bl	8005f10 <xTaskCreate>
  xTaskCreate(MPT_Task_Start, "MPT", 128, NULL, 2, &MPTHandler);
 8000350:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <main+0x100>)
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	2302      	movs	r3, #2
 8000356:	9300      	str	r3, [sp, #0]
 8000358:	2300      	movs	r3, #0
 800035a:	2280      	movs	r2, #128	; 0x80
 800035c:	4916      	ldr	r1, [pc, #88]	; (80003b8 <main+0x104>)
 800035e:	4817      	ldr	r0, [pc, #92]	; (80003bc <main+0x108>)
 8000360:	f005 fdd6 	bl	8005f10 <xTaskCreate>
  xTaskCreate(LPT_Task_Start, "LPT", 128, NULL, 1, &LPTHandler);
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <main+0x10c>)
 8000366:	9301      	str	r3, [sp, #4]
 8000368:	2301      	movs	r3, #1
 800036a:	9300      	str	r3, [sp, #0]
 800036c:	2300      	movs	r3, #0
 800036e:	2280      	movs	r2, #128	; 0x80
 8000370:	4914      	ldr	r1, [pc, #80]	; (80003c4 <main+0x110>)
 8000372:	4815      	ldr	r0, [pc, #84]	; (80003c8 <main+0x114>)
 8000374:	f005 fdcc 	bl	8005f10 <xTaskCreate>
  xTaskCreate(VLPT_Task_Start, "VLPT", 128, NULL, 0, &VLPTHandler);
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <main+0x118>)
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	2300      	movs	r3, #0
 800037e:	9300      	str	r3, [sp, #0]
 8000380:	2300      	movs	r3, #0
 8000382:	2280      	movs	r2, #128	; 0x80
 8000384:	4912      	ldr	r1, [pc, #72]	; (80003d0 <main+0x11c>)
 8000386:	4813      	ldr	r0, [pc, #76]	; (80003d4 <main+0x120>)
 8000388:	f005 fdc2 	bl	8005f10 <xTaskCreate>

  vTaskStartScheduler();
 800038c:	f005 ff3a 	bl	8006204 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000390:	e7fe      	b.n	8000390 <main+0xdc>
 8000392:	bf00      	nop
 8000394:	2000076c 	.word	0x2000076c
 8000398:	200003e0 	.word	0x200003e0
 800039c:	20000764 	.word	0x20000764
 80003a0:	08008200 	.word	0x08008200
 80003a4:	08008220 	.word	0x08008220
 80003a8:	20000754 	.word	0x20000754
 80003ac:	08008240 	.word	0x08008240
 80003b0:	08000e61 	.word	0x08000e61
 80003b4:	20000758 	.word	0x20000758
 80003b8:	08008244 	.word	0x08008244
 80003bc:	08000e7b 	.word	0x08000e7b
 80003c0:	2000075c 	.word	0x2000075c
 80003c4:	08008248 	.word	0x08008248
 80003c8:	08000e91 	.word	0x08000e91
 80003cc:	20000760 	.word	0x20000760
 80003d0:	0800824c 	.word	0x0800824c
 80003d4:	08000ea7 	.word	0x08000ea7

080003d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b09e      	sub	sp, #120	; 0x78
 80003dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003e2:	2228      	movs	r2, #40	; 0x28
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f007 fa14 	bl	8007814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003fc:	463b      	mov	r3, r7
 80003fe:	223c      	movs	r2, #60	; 0x3c
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f007 fa06 	bl	8007814 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000408:	2303      	movs	r3, #3
 800040a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800040c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000410:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000416:	2301      	movs	r3, #1
 8000418:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800041a:	2310      	movs	r3, #16
 800041c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041e:	2302      	movs	r3, #2
 8000420:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000426:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000428:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800042c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000432:	4618      	mov	r0, r3
 8000434:	f001 fcfc 	bl	8001e30 <HAL_RCC_OscConfig>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800043e:	f000 fd8d 	bl	8000f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000442:	230f      	movs	r3, #15
 8000444:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000446:	2302      	movs	r3, #2
 8000448:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800044e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000452:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000458:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800045c:	2102      	movs	r1, #2
 800045e:	4618      	mov	r0, r3
 8000460:	f002 fd24 	bl	8002eac <HAL_RCC_ClockConfig>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800046a:	f000 fd77 	bl	8000f5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <SystemClock_Config+0xc0>)
 8000470:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000472:	2300      	movs	r3, #0
 8000474:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000476:	2300      	movs	r3, #0
 8000478:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800047a:	2300      	movs	r3, #0
 800047c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800047e:	463b      	mov	r3, r7
 8000480:	4618      	mov	r0, r3
 8000482:	f002 ff7b 	bl	800337c <HAL_RCCEx_PeriphCLKConfig>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800048c:	f000 fd66 	bl	8000f5c <Error_Handler>
  }
}
 8000490:	bf00      	nop
 8000492:	3778      	adds	r7, #120	; 0x78
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	00020021 	.word	0x00020021

0800049c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <MX_I2C1_Init+0x74>)
 80004a2:	4a1c      	ldr	r2, [pc, #112]	; (8000514 <MX_I2C1_Init+0x78>)
 80004a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <MX_I2C1_Init+0x74>)
 80004a8:	4a1b      	ldr	r2, [pc, #108]	; (8000518 <MX_I2C1_Init+0x7c>)
 80004aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004ac:	4b18      	ldr	r3, [pc, #96]	; (8000510 <MX_I2C1_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <MX_I2C1_Init+0x74>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b8:	4b15      	ldr	r3, [pc, #84]	; (8000510 <MX_I2C1_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004be:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MX_I2C1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <MX_I2C1_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <MX_I2C1_Init+0x74>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <MX_I2C1_Init+0x74>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004d6:	480e      	ldr	r0, [pc, #56]	; (8000510 <MX_I2C1_Init+0x74>)
 80004d8:	f001 fab2 	bl	8001a40 <HAL_I2C_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004e2:	f000 fd3b 	bl	8000f5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004e6:	2100      	movs	r1, #0
 80004e8:	4809      	ldr	r0, [pc, #36]	; (8000510 <MX_I2C1_Init+0x74>)
 80004ea:	f001 fb38 	bl	8001b5e <HAL_I2CEx_ConfigAnalogFilter>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004f4:	f000 fd32 	bl	8000f5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004f8:	2100      	movs	r1, #0
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_I2C1_Init+0x74>)
 80004fc:	f001 fb7a 	bl	8001bf4 <HAL_I2CEx_ConfigDigitalFilter>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000506:	f000 fd29 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000328 	.word	0x20000328
 8000514:	40005400 	.word	0x40005400
 8000518:	2000090e 	.word	0x2000090e

0800051c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <MX_SPI1_Init+0x74>)
 8000522:	4a1c      	ldr	r2, [pc, #112]	; (8000594 <MX_SPI1_Init+0x78>)
 8000524:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <MX_SPI1_Init+0x74>)
 8000528:	f44f 7282 	mov.w	r2, #260	; 0x104
 800052c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800052e:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_SPI1_Init+0x74>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000534:	4b16      	ldr	r3, [pc, #88]	; (8000590 <MX_SPI1_Init+0x74>)
 8000536:	f44f 7240 	mov.w	r2, #768	; 0x300
 800053a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <MX_SPI1_Init+0x74>)
 800053e:	2200      	movs	r2, #0
 8000540:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000542:	4b13      	ldr	r3, [pc, #76]	; (8000590 <MX_SPI1_Init+0x74>)
 8000544:	2200      	movs	r2, #0
 8000546:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <MX_SPI1_Init+0x74>)
 800054a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800054e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <MX_SPI1_Init+0x74>)
 8000552:	2208      	movs	r2, #8
 8000554:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <MX_SPI1_Init+0x74>)
 8000558:	2200      	movs	r2, #0
 800055a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <MX_SPI1_Init+0x74>)
 800055e:	2200      	movs	r2, #0
 8000560:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <MX_SPI1_Init+0x74>)
 8000564:	2200      	movs	r2, #0
 8000566:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <MX_SPI1_Init+0x74>)
 800056a:	2207      	movs	r2, #7
 800056c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <MX_SPI1_Init+0x74>)
 8000570:	2200      	movs	r2, #0
 8000572:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MX_SPI1_Init+0x74>)
 8000576:	2208      	movs	r2, #8
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_SPI1_Init+0x74>)
 800057c:	f003 f8ae 	bl	80036dc <HAL_SPI_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000586:	f000 fce9 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	2000037c 	.word	0x2000037c
 8000594:	40013000 	.word	0x40013000

08000598 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 800059e:	4a15      	ldr	r2, [pc, #84]	; (80005f4 <MX_USART1_UART_Init+0x5c>)
 80005a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005a4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80005a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005aa:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005be:	220c      	movs	r2, #12
 80005c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <MX_USART1_UART_Init+0x58>)
 80005dc:	f003 fbea 	bl	8003db4 <HAL_UART_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005e6:	f000 fcb9 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200003e0 	.word	0x200003e0
 80005f4:	40013800 	.word	0x40013800

080005f8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <MX_USB_PCD_Init+0x40>)
 8000600:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 8000604:	2208      	movs	r2, #8
 8000606:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 800060a:	2202      	movs	r2, #2
 800060c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 8000610:	2202      	movs	r2, #2
 8000612:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_USB_PCD_Init+0x3c>)
 8000622:	f001 fb33 	bl	8001c8c <HAL_PCD_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800062c:	f000 fc96 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000468 	.word	0x20000468
 8000638:	40005c00 	.word	0x40005c00

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	4b37      	ldr	r3, [pc, #220]	; (8000730 <MX_GPIO_Init+0xf4>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a36      	ldr	r2, [pc, #216]	; (8000730 <MX_GPIO_Init+0xf4>)
 8000658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b34      	ldr	r3, [pc, #208]	; (8000730 <MX_GPIO_Init+0xf4>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	4b31      	ldr	r3, [pc, #196]	; (8000730 <MX_GPIO_Init+0xf4>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a30      	ldr	r2, [pc, #192]	; (8000730 <MX_GPIO_Init+0xf4>)
 8000670:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b2e      	ldr	r3, [pc, #184]	; (8000730 <MX_GPIO_Init+0xf4>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000682:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <MX_GPIO_Init+0xf4>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <MX_GPIO_Init+0xf4>)
 8000688:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b28      	ldr	r3, [pc, #160]	; (8000730 <MX_GPIO_Init+0xf4>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <MX_GPIO_Init+0xf4>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	4a24      	ldr	r2, [pc, #144]	; (8000730 <MX_GPIO_Init+0xf4>)
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a4:	6153      	str	r3, [r2, #20]
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <MX_GPIO_Init+0xf4>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_GPIO_Init+0xf4>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a1e      	ldr	r2, [pc, #120]	; (8000730 <MX_GPIO_Init+0xf4>)
 80006b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006bc:	6153      	str	r3, [r2, #20]
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_GPIO_Init+0xf4>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006ca:	2200      	movs	r2, #0
 80006cc:	f64f 7108 	movw	r1, #65288	; 0xff08
 80006d0:	4818      	ldr	r0, [pc, #96]	; (8000734 <MX_GPIO_Init+0xf8>)
 80006d2:	f001 f99d 	bl	8001a10 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80006d6:	2337      	movs	r3, #55	; 0x37
 80006d8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006da:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4619      	mov	r1, r3
 80006ea:	4812      	ldr	r0, [pc, #72]	; (8000734 <MX_GPIO_Init+0xf8>)
 80006ec:	f001 f816 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006f0:	f64f 7308 	movw	r3, #65288	; 0xff08
 80006f4:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	480a      	ldr	r0, [pc, #40]	; (8000734 <MX_GPIO_Init+0xf8>)
 800070a:	f001 f807 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800070e:	2301      	movs	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000724:	f000 fffa 	bl	800171c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	; 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40021000 	.word	0x40021000
 8000734:	48001000 	.word	0x48001000

08000738 <ReleaseSemaphores2BeAcquired>:

/* USER CODE BEGIN 4 */
void ReleaseSemaphores2BeAcquired() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	// Release 3 semaphores so 3 task can acquire them
	xSemaphoreGive(CountingSem);
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <ReleaseSemaphores2BeAcquired+0x34>)
 800073e:	6818      	ldr	r0, [r3, #0]
 8000740:	2300      	movs	r3, #0
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	f004 ffcf 	bl	80056e8 <xQueueGenericSend>
	xSemaphoreGive(CountingSem);
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <ReleaseSemaphores2BeAcquired+0x34>)
 800074c:	6818      	ldr	r0, [r3, #0]
 800074e:	2300      	movs	r3, #0
 8000750:	2200      	movs	r2, #0
 8000752:	2100      	movs	r1, #0
 8000754:	f004 ffc8 	bl	80056e8 <xQueueGenericSend>
	xSemaphoreGive(CountingSem);
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <ReleaseSemaphores2BeAcquired+0x34>)
 800075a:	6818      	ldr	r0, [r3, #0]
 800075c:	2300      	movs	r3, #0
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	f004 ffc1 	bl	80056e8 <xQueueGenericSend>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000764 	.word	0x20000764

08000770 <HPT_UART_Send>:

void HPT_UART_Send() {
 8000770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000772:	b0ab      	sub	sp, #172	; 0xac
 8000774:	af00      	add	r7, sp, #0
	char sresource[3];
	uint8_t data[150];
	int semcount = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	char ssemcount[2];
	strcpy(data, "Entered HPT Task\r\n About to ACQUIRE the Semaphore\r\n\r\n");
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	4a61      	ldr	r2, [pc, #388]	; (8000908 <HPT_UART_Send+0x198>)
 8000782:	461c      	mov	r4, r3
 8000784:	4615      	mov	r5, r2
 8000786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000792:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000796:	6020      	str	r0, [r4, #0]
 8000798:	3404      	adds	r4, #4
 800079a:	8021      	strh	r1, [r4, #0]
	semcount = uxSemaphoreGetCount(CountingSem);
 800079c:	4b5b      	ldr	r3, [pc, #364]	; (800090c <HPT_UART_Send+0x19c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f005 fa39 	bl	8005c18 <uxQueueMessagesWaiting>
 80007a6:	4603      	mov	r3, r0
 80007a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	itoa(semcount, ssemcount, 10); // convert integer to char array
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	220a      	movs	r2, #10
 80007b0:	4619      	mov	r1, r3
 80007b2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80007b6:	f006 ffc9 	bl	800774c <itoa>
//	strcat(data, "Leaving HPT Task\r\n Data ACCESSED is:: ");
	strcat(data, "Available Tokens are: ");
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fd06 	bl	80001d0 <strlen>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	4413      	add	r3, r2
 80007ce:	4a50      	ldr	r2, [pc, #320]	; (8000910 <HPT_UART_Send+0x1a0>)
 80007d0:	461c      	mov	r4, r3
 80007d2:	4615      	mov	r5, r2
 80007d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d6:	6020      	str	r0, [r4, #0]
 80007d8:	6061      	str	r1, [r4, #4]
 80007da:	60a2      	str	r2, [r4, #8]
 80007dc:	60e3      	str	r3, [r4, #12]
 80007de:	6828      	ldr	r0, [r5, #0]
 80007e0:	6120      	str	r0, [r4, #16]
 80007e2:	88ab      	ldrh	r3, [r5, #4]
 80007e4:	79aa      	ldrb	r2, [r5, #6]
 80007e6:	82a3      	strh	r3, [r4, #20]
 80007e8:	4613      	mov	r3, r2
 80007ea:	75a3      	strb	r3, [r4, #22]
	strcat(data, ssemcount);
 80007ec:	1d3a      	adds	r2, r7, #4
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f007 f815 	bl	8007824 <strcat>
//	strcat(data, "\r\n Not releasing the Semaphore\r\n\r\n\r\n");
	strcat(data, "\r\n\r\n");
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fce6 	bl	80001d0 <strlen>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	f107 0308 	add.w	r3, r7, #8
 800080c:	4413      	add	r3, r2
 800080e:	4a41      	ldr	r2, [pc, #260]	; (8000914 <HPT_UART_Send+0x1a4>)
 8000810:	6810      	ldr	r0, [r2, #0]
 8000812:	6018      	str	r0, [r3, #0]
 8000814:	7912      	ldrb	r2, [r2, #4]
 8000816:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, data, strlen(data), HAL_MAX_DELAY);
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fcd7 	bl	80001d0 <strlen>
 8000822:	4603      	mov	r3, r0
 8000824:	b29a      	uxth	r2, r3
 8000826:	f107 0108 	add.w	r1, r7, #8
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	483a      	ldr	r0, [pc, #232]	; (8000918 <HPT_UART_Send+0x1a8>)
 8000830:	f003 fb0e 	bl	8003e50 <HAL_UART_Transmit>

	xSemaphoreTake(CountingSem, portMAX_DELAY);
 8000834:	4b35      	ldr	r3, [pc, #212]	; (800090c <HPT_UART_Send+0x19c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f04f 31ff 	mov.w	r1, #4294967295
 800083c:	4618      	mov	r0, r3
 800083e:	f005 f8df 	bl	8005a00 <xQueueSemaphoreTake>

	itoa(resource[indx], sresource, 10); // convert integer to char array
 8000842:	4b36      	ldr	r3, [pc, #216]	; (800091c <HPT_UART_Send+0x1ac>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a36      	ldr	r2, [pc, #216]	; (8000920 <HPT_UART_Send+0x1b0>)
 8000848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800084c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000850:	220a      	movs	r2, #10
 8000852:	4618      	mov	r0, r3
 8000854:	f006 ff7a 	bl	800774c <itoa>
	strcpy(data, "Leaving HPT Task\r\n Data ACCESSED is:: ");
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	4a31      	ldr	r2, [pc, #196]	; (8000924 <HPT_UART_Send+0x1b4>)
 800085e:	461c      	mov	r4, r3
 8000860:	4615      	mov	r5, r2
 8000862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800086a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800086e:	6020      	str	r0, [r4, #0]
 8000870:	3404      	adds	r4, #4
 8000872:	8021      	strh	r1, [r4, #0]
 8000874:	3402      	adds	r4, #2
 8000876:	0c0b      	lsrs	r3, r1, #16
 8000878:	7023      	strb	r3, [r4, #0]
	strcat(data, sresource);
 800087a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f006 ffcd 	bl	8007824 <strcat>
	strcat(data, "\r\n Not releasing the Semaphore\r\n\r\n\r\n");
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fc9e 	bl	80001d0 <strlen>
 8000894:	4603      	mov	r3, r0
 8000896:	461a      	mov	r2, r3
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	4413      	add	r3, r2
 800089e:	4a22      	ldr	r2, [pc, #136]	; (8000928 <HPT_UART_Send+0x1b8>)
 80008a0:	4614      	mov	r4, r2
 80008a2:	469c      	mov	ip, r3
 80008a4:	f104 0e20 	add.w	lr, r4, #32
 80008a8:	4665      	mov	r5, ip
 80008aa:	4626      	mov	r6, r4
 80008ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008ae:	6028      	str	r0, [r5, #0]
 80008b0:	6069      	str	r1, [r5, #4]
 80008b2:	60aa      	str	r2, [r5, #8]
 80008b4:	60eb      	str	r3, [r5, #12]
 80008b6:	3410      	adds	r4, #16
 80008b8:	f10c 0c10 	add.w	ip, ip, #16
 80008bc:	4574      	cmp	r4, lr
 80008be:	d1f3      	bne.n	80008a8 <HPT_UART_Send+0x138>
 80008c0:	4663      	mov	r3, ip
 80008c2:	4622      	mov	r2, r4
 80008c4:	6810      	ldr	r0, [r2, #0]
 80008c6:	6018      	str	r0, [r3, #0]
 80008c8:	7912      	ldrb	r2, [r2, #4]
 80008ca:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, data, strlen(data), HAL_MAX_DELAY);
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fc7d 	bl	80001d0 <strlen>
 80008d6:	4603      	mov	r3, r0
 80008d8:	b29a      	uxth	r2, r3
 80008da:	f107 0108 	add.w	r1, r7, #8
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
 80008e2:	480d      	ldr	r0, [pc, #52]	; (8000918 <HPT_UART_Send+0x1a8>)
 80008e4:	f003 fab4 	bl	8003e50 <HAL_UART_Transmit>

	indx++;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HPT_UART_Send+0x1ac>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <HPT_UART_Send+0x1ac>)
 80008f0:	6013      	str	r3, [r2, #0]
	if(indx > 2)
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HPT_UART_Send+0x1ac>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	dd02      	ble.n	8000900 <HPT_UART_Send+0x190>
		indx = 0;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <HPT_UART_Send+0x1ac>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]

}
 8000900:	bf00      	nop
 8000902:	37ac      	adds	r7, #172	; 0xac
 8000904:	46bd      	mov	sp, r7
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000908:	08008254 	.word	0x08008254
 800090c:	20000764 	.word	0x20000764
 8000910:	0800828c 	.word	0x0800828c
 8000914:	080082a4 	.word	0x080082a4
 8000918:	200003e0 	.word	0x200003e0
 800091c:	20000768 	.word	0x20000768
 8000920:	20000000 	.word	0x20000000
 8000924:	080082ac 	.word	0x080082ac
 8000928:	080082d4 	.word	0x080082d4

0800092c <MPT_UART_Send>:

void MPT_UART_Send() {
 800092c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800092e:	b0ab      	sub	sp, #172	; 0xac
 8000930:	af00      	add	r7, sp, #0
	char sresource[3];
	uint8_t data[150];
	int semcount = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	char ssemcount[2];
	strcpy(data, "Entered MPT Task\r\n About to ACQUIRE the Semaphore\r\n\r\n");
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	4a61      	ldr	r2, [pc, #388]	; (8000ac4 <MPT_UART_Send+0x198>)
 800093e:	461c      	mov	r4, r3
 8000940:	4615      	mov	r5, r2
 8000942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800094c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000952:	6020      	str	r0, [r4, #0]
 8000954:	3404      	adds	r4, #4
 8000956:	8021      	strh	r1, [r4, #0]
	semcount = uxSemaphoreGetCount(CountingSem);
 8000958:	4b5b      	ldr	r3, [pc, #364]	; (8000ac8 <MPT_UART_Send+0x19c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f005 f95b 	bl	8005c18 <uxQueueMessagesWaiting>
 8000962:	4603      	mov	r3, r0
 8000964:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	itoa(semcount, ssemcount, 10); // convert integer to char array
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	220a      	movs	r2, #10
 800096c:	4619      	mov	r1, r3
 800096e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000972:	f006 feeb 	bl	800774c <itoa>
	//	strcat(data, "Leaving MPT Task\r\n Data ACCESSED is:: ");
	strcat(data, "Available Tokens are: ");
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fc28 	bl	80001d0 <strlen>
 8000980:	4603      	mov	r3, r0
 8000982:	461a      	mov	r2, r3
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	4413      	add	r3, r2
 800098a:	4a50      	ldr	r2, [pc, #320]	; (8000acc <MPT_UART_Send+0x1a0>)
 800098c:	461c      	mov	r4, r3
 800098e:	4615      	mov	r5, r2
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	6020      	str	r0, [r4, #0]
 8000994:	6061      	str	r1, [r4, #4]
 8000996:	60a2      	str	r2, [r4, #8]
 8000998:	60e3      	str	r3, [r4, #12]
 800099a:	6828      	ldr	r0, [r5, #0]
 800099c:	6120      	str	r0, [r4, #16]
 800099e:	88ab      	ldrh	r3, [r5, #4]
 80009a0:	79aa      	ldrb	r2, [r5, #6]
 80009a2:	82a3      	strh	r3, [r4, #20]
 80009a4:	4613      	mov	r3, r2
 80009a6:	75a3      	strb	r3, [r4, #22]
	strcat(data, ssemcount);
 80009a8:	1d3a      	adds	r2, r7, #4
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f006 ff37 	bl	8007824 <strcat>
	//	strcat(data, "\r\n Not releasing the Semaphore\r\n\r\n\r\n");
	strcat(data, "\r\n\r\n");
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fc08 	bl	80001d0 <strlen>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	4413      	add	r3, r2
 80009ca:	4a41      	ldr	r2, [pc, #260]	; (8000ad0 <MPT_UART_Send+0x1a4>)
 80009cc:	6810      	ldr	r0, [r2, #0]
 80009ce:	6018      	str	r0, [r3, #0]
 80009d0:	7912      	ldrb	r2, [r2, #4]
 80009d2:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, data, strlen(data), HAL_MAX_DELAY);
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fbf9 	bl	80001d0 <strlen>
 80009de:	4603      	mov	r3, r0
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	f107 0108 	add.w	r1, r7, #8
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	483a      	ldr	r0, [pc, #232]	; (8000ad4 <MPT_UART_Send+0x1a8>)
 80009ec:	f003 fa30 	bl	8003e50 <HAL_UART_Transmit>

	xSemaphoreTake(CountingSem, portMAX_DELAY);
 80009f0:	4b35      	ldr	r3, [pc, #212]	; (8000ac8 <MPT_UART_Send+0x19c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f04f 31ff 	mov.w	r1, #4294967295
 80009f8:	4618      	mov	r0, r3
 80009fa:	f005 f801 	bl	8005a00 <xQueueSemaphoreTake>

	itoa(resource[indx], sresource, 10); // convert integer to char array
 80009fe:	4b36      	ldr	r3, [pc, #216]	; (8000ad8 <MPT_UART_Send+0x1ac>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a36      	ldr	r2, [pc, #216]	; (8000adc <MPT_UART_Send+0x1b0>)
 8000a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a08:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000a0c:	220a      	movs	r2, #10
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f006 fe9c 	bl	800774c <itoa>
	strcpy(data, "Leaving MPT Task\r\n Data ACCESSED is:: ");
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	4a31      	ldr	r2, [pc, #196]	; (8000ae0 <MPT_UART_Send+0x1b4>)
 8000a1a:	461c      	mov	r4, r3
 8000a1c:	4615      	mov	r5, r2
 8000a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a26:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a2a:	6020      	str	r0, [r4, #0]
 8000a2c:	3404      	adds	r4, #4
 8000a2e:	8021      	strh	r1, [r4, #0]
 8000a30:	3402      	adds	r4, #2
 8000a32:	0c0b      	lsrs	r3, r1, #16
 8000a34:	7023      	strb	r3, [r4, #0]
	strcat(data, sresource);
 8000a36:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f006 feef 	bl	8007824 <strcat>
	strcat(data, "\r\n Not releasing the Semaphore\r\n\r\n\r\n");
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fbc0 	bl	80001d0 <strlen>
 8000a50:	4603      	mov	r3, r0
 8000a52:	461a      	mov	r2, r3
 8000a54:	f107 0308 	add.w	r3, r7, #8
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a22      	ldr	r2, [pc, #136]	; (8000ae4 <MPT_UART_Send+0x1b8>)
 8000a5c:	4614      	mov	r4, r2
 8000a5e:	469c      	mov	ip, r3
 8000a60:	f104 0e20 	add.w	lr, r4, #32
 8000a64:	4665      	mov	r5, ip
 8000a66:	4626      	mov	r6, r4
 8000a68:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a6a:	6028      	str	r0, [r5, #0]
 8000a6c:	6069      	str	r1, [r5, #4]
 8000a6e:	60aa      	str	r2, [r5, #8]
 8000a70:	60eb      	str	r3, [r5, #12]
 8000a72:	3410      	adds	r4, #16
 8000a74:	f10c 0c10 	add.w	ip, ip, #16
 8000a78:	4574      	cmp	r4, lr
 8000a7a:	d1f3      	bne.n	8000a64 <MPT_UART_Send+0x138>
 8000a7c:	4663      	mov	r3, ip
 8000a7e:	4622      	mov	r2, r4
 8000a80:	6810      	ldr	r0, [r2, #0]
 8000a82:	6018      	str	r0, [r3, #0]
 8000a84:	7912      	ldrb	r2, [r2, #4]
 8000a86:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, data, strlen(data), HAL_MAX_DELAY);
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fb9f 	bl	80001d0 <strlen>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	f107 0108 	add.w	r1, r7, #8
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9e:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <MPT_UART_Send+0x1a8>)
 8000aa0:	f003 f9d6 	bl	8003e50 <HAL_UART_Transmit>

	indx++;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MPT_UART_Send+0x1ac>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <MPT_UART_Send+0x1ac>)
 8000aac:	6013      	str	r3, [r2, #0]
	if(indx > 2)
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <MPT_UART_Send+0x1ac>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	dd02      	ble.n	8000abc <MPT_UART_Send+0x190>
		indx = 0;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MPT_UART_Send+0x1ac>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]

}
 8000abc:	bf00      	nop
 8000abe:	37ac      	adds	r7, #172	; 0xac
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ac4:	080082fc 	.word	0x080082fc
 8000ac8:	20000764 	.word	0x20000764
 8000acc:	0800828c 	.word	0x0800828c
 8000ad0:	080082a4 	.word	0x080082a4
 8000ad4:	200003e0 	.word	0x200003e0
 8000ad8:	20000768 	.word	0x20000768
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	08008334 	.word	0x08008334
 8000ae4:	080082d4 	.word	0x080082d4

08000ae8 <LPT_UART_Send>:

void LPT_UART_Send() {
 8000ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aea:	b0ab      	sub	sp, #172	; 0xac
 8000aec:	af00      	add	r7, sp, #0
	char sresource[3];
	uint8_t data[150];
	int semcount = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	char ssemcount[2];
	strcpy(data, "Entered LPT Task\r\n About to ACQUIRE the Semaphore\r\n\r\n");
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	4a61      	ldr	r2, [pc, #388]	; (8000c80 <LPT_UART_Send+0x198>)
 8000afa:	461c      	mov	r4, r3
 8000afc:	4615      	mov	r5, r2
 8000afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b0e:	6020      	str	r0, [r4, #0]
 8000b10:	3404      	adds	r4, #4
 8000b12:	8021      	strh	r1, [r4, #0]
	semcount = uxSemaphoreGetCount(CountingSem);
 8000b14:	4b5b      	ldr	r3, [pc, #364]	; (8000c84 <LPT_UART_Send+0x19c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f005 f87d 	bl	8005c18 <uxQueueMessagesWaiting>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	itoa(semcount, ssemcount, 10); // convert integer to char array
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	220a      	movs	r2, #10
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000b2e:	f006 fe0d 	bl	800774c <itoa>
	//	strcat(data, "Leaving LPT Task\r\n Data ACCESSED is:: ");
	strcat(data, "Available Tokens are: ");
 8000b32:	f107 0308 	add.w	r3, r7, #8
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fb4a 	bl	80001d0 <strlen>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	461a      	mov	r2, r3
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	4413      	add	r3, r2
 8000b46:	4a50      	ldr	r2, [pc, #320]	; (8000c88 <LPT_UART_Send+0x1a0>)
 8000b48:	461c      	mov	r4, r3
 8000b4a:	4615      	mov	r5, r2
 8000b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4e:	6020      	str	r0, [r4, #0]
 8000b50:	6061      	str	r1, [r4, #4]
 8000b52:	60a2      	str	r2, [r4, #8]
 8000b54:	60e3      	str	r3, [r4, #12]
 8000b56:	6828      	ldr	r0, [r5, #0]
 8000b58:	6120      	str	r0, [r4, #16]
 8000b5a:	88ab      	ldrh	r3, [r5, #4]
 8000b5c:	79aa      	ldrb	r2, [r5, #6]
 8000b5e:	82a3      	strh	r3, [r4, #20]
 8000b60:	4613      	mov	r3, r2
 8000b62:	75a3      	strb	r3, [r4, #22]
	strcat(data, ssemcount);
 8000b64:	1d3a      	adds	r2, r7, #4
 8000b66:	f107 0308 	add.w	r3, r7, #8
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f006 fe59 	bl	8007824 <strcat>
	//	strcat(data, "\r\n Not releasing the Semaphore\r\n\r\n\r\n");
	strcat(data, "\r\n\r\n");
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fb2a 	bl	80001d0 <strlen>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	4413      	add	r3, r2
 8000b86:	4a41      	ldr	r2, [pc, #260]	; (8000c8c <LPT_UART_Send+0x1a4>)
 8000b88:	6810      	ldr	r0, [r2, #0]
 8000b8a:	6018      	str	r0, [r3, #0]
 8000b8c:	7912      	ldrb	r2, [r2, #4]
 8000b8e:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, data, strlen(data), HAL_MAX_DELAY);
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fb1b 	bl	80001d0 <strlen>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	f107 0108 	add.w	r1, r7, #8
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	483a      	ldr	r0, [pc, #232]	; (8000c90 <LPT_UART_Send+0x1a8>)
 8000ba8:	f003 f952 	bl	8003e50 <HAL_UART_Transmit>

	xSemaphoreTake(CountingSem, portMAX_DELAY);
 8000bac:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <LPT_UART_Send+0x19c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f004 ff23 	bl	8005a00 <xQueueSemaphoreTake>

	itoa(resource[indx], sresource, 10); // convert integer to char array
 8000bba:	4b36      	ldr	r3, [pc, #216]	; (8000c94 <LPT_UART_Send+0x1ac>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a36      	ldr	r2, [pc, #216]	; (8000c98 <LPT_UART_Send+0x1b0>)
 8000bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc4:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000bc8:	220a      	movs	r2, #10
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f006 fdbe 	bl	800774c <itoa>
	strcpy(data, "Leaving LPT Task\r\n Data ACCESSED is:: ");
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	4a31      	ldr	r2, [pc, #196]	; (8000c9c <LPT_UART_Send+0x1b4>)
 8000bd6:	461c      	mov	r4, r3
 8000bd8:	4615      	mov	r5, r2
 8000bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000be6:	6020      	str	r0, [r4, #0]
 8000be8:	3404      	adds	r4, #4
 8000bea:	8021      	strh	r1, [r4, #0]
 8000bec:	3402      	adds	r4, #2
 8000bee:	0c0b      	lsrs	r3, r1, #16
 8000bf0:	7023      	strb	r3, [r4, #0]
	strcat(data, sresource);
 8000bf2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f006 fe11 	bl	8007824 <strcat>
	strcat(data, "\r\n Not releasing the Semaphore\r\n\r\n\r\n");
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fae2 	bl	80001d0 <strlen>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	f107 0308 	add.w	r3, r7, #8
 8000c14:	4413      	add	r3, r2
 8000c16:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <LPT_UART_Send+0x1b8>)
 8000c18:	4614      	mov	r4, r2
 8000c1a:	469c      	mov	ip, r3
 8000c1c:	f104 0e20 	add.w	lr, r4, #32
 8000c20:	4665      	mov	r5, ip
 8000c22:	4626      	mov	r6, r4
 8000c24:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c26:	6028      	str	r0, [r5, #0]
 8000c28:	6069      	str	r1, [r5, #4]
 8000c2a:	60aa      	str	r2, [r5, #8]
 8000c2c:	60eb      	str	r3, [r5, #12]
 8000c2e:	3410      	adds	r4, #16
 8000c30:	f10c 0c10 	add.w	ip, ip, #16
 8000c34:	4574      	cmp	r4, lr
 8000c36:	d1f3      	bne.n	8000c20 <LPT_UART_Send+0x138>
 8000c38:	4663      	mov	r3, ip
 8000c3a:	4622      	mov	r2, r4
 8000c3c:	6810      	ldr	r0, [r2, #0]
 8000c3e:	6018      	str	r0, [r3, #0]
 8000c40:	7912      	ldrb	r2, [r2, #4]
 8000c42:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, data, strlen(data), HAL_MAX_DELAY);
 8000c44:	f107 0308 	add.w	r3, r7, #8
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fac1 	bl	80001d0 <strlen>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	f107 0108 	add.w	r1, r7, #8
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <LPT_UART_Send+0x1a8>)
 8000c5c:	f003 f8f8 	bl	8003e50 <HAL_UART_Transmit>

	indx++;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <LPT_UART_Send+0x1ac>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <LPT_UART_Send+0x1ac>)
 8000c68:	6013      	str	r3, [r2, #0]
	if(indx > 2)
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <LPT_UART_Send+0x1ac>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	dd02      	ble.n	8000c78 <LPT_UART_Send+0x190>
		indx = 0;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <LPT_UART_Send+0x1ac>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]

}
 8000c78:	bf00      	nop
 8000c7a:	37ac      	adds	r7, #172	; 0xac
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c80:	0800835c 	.word	0x0800835c
 8000c84:	20000764 	.word	0x20000764
 8000c88:	0800828c 	.word	0x0800828c
 8000c8c:	080082a4 	.word	0x080082a4
 8000c90:	200003e0 	.word	0x200003e0
 8000c94:	20000768 	.word	0x20000768
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	08008394 	.word	0x08008394
 8000ca0:	080082d4 	.word	0x080082d4

08000ca4 <VLPT_UART_Send>:

void VLPT_UART_Send() {
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	b0ab      	sub	sp, #172	; 0xac
 8000ca8:	af00      	add	r7, sp, #0
	char sresource[3];
	uint8_t data[150];
	int semcount = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	char ssemcount[2];
	strcpy(data, "Entered VLPT Task\r\n About to ACQUIRE the Semaphore\r\n\r\n");
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	4a61      	ldr	r2, [pc, #388]	; (8000e3c <VLPT_UART_Send+0x198>)
 8000cb6:	461c      	mov	r4, r3
 8000cb8:	4615      	mov	r5, r2
 8000cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cca:	6020      	str	r0, [r4, #0]
 8000ccc:	3404      	adds	r4, #4
 8000cce:	8021      	strh	r1, [r4, #0]
 8000cd0:	3402      	adds	r4, #2
 8000cd2:	0c0b      	lsrs	r3, r1, #16
 8000cd4:	7023      	strb	r3, [r4, #0]
	semcount = uxSemaphoreGetCount(CountingSem);
 8000cd6:	4b5a      	ldr	r3, [pc, #360]	; (8000e40 <VLPT_UART_Send+0x19c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f004 ff9c 	bl	8005c18 <uxQueueMessagesWaiting>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	itoa(semcount, ssemcount, 10); // convert integer to char array
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	220a      	movs	r2, #10
 8000cea:	4619      	mov	r1, r3
 8000cec:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000cf0:	f006 fd2c 	bl	800774c <itoa>
	//	strcat(data, "Leaving VLPT Task\r\n Data ACCESSED is:: ");
	strcat(data, "Available Tokens are: ");
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fa69 	bl	80001d0 <strlen>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	461a      	mov	r2, r3
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	4413      	add	r3, r2
 8000d08:	4a4e      	ldr	r2, [pc, #312]	; (8000e44 <VLPT_UART_Send+0x1a0>)
 8000d0a:	461c      	mov	r4, r3
 8000d0c:	4615      	mov	r5, r2
 8000d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d10:	6020      	str	r0, [r4, #0]
 8000d12:	6061      	str	r1, [r4, #4]
 8000d14:	60a2      	str	r2, [r4, #8]
 8000d16:	60e3      	str	r3, [r4, #12]
 8000d18:	6828      	ldr	r0, [r5, #0]
 8000d1a:	6120      	str	r0, [r4, #16]
 8000d1c:	88ab      	ldrh	r3, [r5, #4]
 8000d1e:	79aa      	ldrb	r2, [r5, #6]
 8000d20:	82a3      	strh	r3, [r4, #20]
 8000d22:	4613      	mov	r3, r2
 8000d24:	75a3      	strb	r3, [r4, #22]
	strcat(data, ssemcount);
 8000d26:	1d3a      	adds	r2, r7, #4
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f006 fd78 	bl	8007824 <strcat>
	//	strcat(data, "\r\n Not releasing the Semaphore\r\n\r\n\r\n");
	strcat(data, "\r\n\r\n");
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fa49 	bl	80001d0 <strlen>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	461a      	mov	r2, r3
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	4413      	add	r3, r2
 8000d48:	4a3f      	ldr	r2, [pc, #252]	; (8000e48 <VLPT_UART_Send+0x1a4>)
 8000d4a:	6810      	ldr	r0, [r2, #0]
 8000d4c:	6018      	str	r0, [r3, #0]
 8000d4e:	7912      	ldrb	r2, [r2, #4]
 8000d50:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, data, strlen(data), HAL_MAX_DELAY);
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fa3a 	bl	80001d0 <strlen>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	f107 0108 	add.w	r1, r7, #8
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295
 8000d68:	4838      	ldr	r0, [pc, #224]	; (8000e4c <VLPT_UART_Send+0x1a8>)
 8000d6a:	f003 f871 	bl	8003e50 <HAL_UART_Transmit>

	xSemaphoreTake(CountingSem, portMAX_DELAY);
 8000d6e:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <VLPT_UART_Send+0x19c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f04f 31ff 	mov.w	r1, #4294967295
 8000d76:	4618      	mov	r0, r3
 8000d78:	f004 fe42 	bl	8005a00 <xQueueSemaphoreTake>

	itoa(resource[indx], sresource, 10); // convert integer to char array
 8000d7c:	4b34      	ldr	r3, [pc, #208]	; (8000e50 <VLPT_UART_Send+0x1ac>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a34      	ldr	r2, [pc, #208]	; (8000e54 <VLPT_UART_Send+0x1b0>)
 8000d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d86:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000d8a:	220a      	movs	r2, #10
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f006 fcdd 	bl	800774c <itoa>
	strcpy(data, "Leaving VLPT Task\r\n Data ACCESSED is:: ");
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	4a30      	ldr	r2, [pc, #192]	; (8000e58 <VLPT_UART_Send+0x1b4>)
 8000d98:	461c      	mov	r4, r3
 8000d9a:	4615      	mov	r5, r2
 8000d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000da8:	e884 0003 	stmia.w	r4, {r0, r1}
	strcat(data, sresource);
 8000dac:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f006 fd34 	bl	8007824 <strcat>
	strcat(data, "\r\n Not releasing the Semaphore\r\n\r\n\r\n");
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fa05 	bl	80001d0 <strlen>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a22      	ldr	r2, [pc, #136]	; (8000e5c <VLPT_UART_Send+0x1b8>)
 8000dd2:	4614      	mov	r4, r2
 8000dd4:	469c      	mov	ip, r3
 8000dd6:	f104 0e20 	add.w	lr, r4, #32
 8000dda:	4665      	mov	r5, ip
 8000ddc:	4626      	mov	r6, r4
 8000dde:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000de0:	6028      	str	r0, [r5, #0]
 8000de2:	6069      	str	r1, [r5, #4]
 8000de4:	60aa      	str	r2, [r5, #8]
 8000de6:	60eb      	str	r3, [r5, #12]
 8000de8:	3410      	adds	r4, #16
 8000dea:	f10c 0c10 	add.w	ip, ip, #16
 8000dee:	4574      	cmp	r4, lr
 8000df0:	d1f3      	bne.n	8000dda <VLPT_UART_Send+0x136>
 8000df2:	4663      	mov	r3, ip
 8000df4:	4622      	mov	r2, r4
 8000df6:	6810      	ldr	r0, [r2, #0]
 8000df8:	6018      	str	r0, [r3, #0]
 8000dfa:	7912      	ldrb	r2, [r2, #4]
 8000dfc:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, data, strlen(data), HAL_MAX_DELAY);
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff f9e4 	bl	80001d0 <strlen>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	f107 0108 	add.w	r1, r7, #8
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <VLPT_UART_Send+0x1a8>)
 8000e16:	f003 f81b 	bl	8003e50 <HAL_UART_Transmit>

	indx++;
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <VLPT_UART_Send+0x1ac>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <VLPT_UART_Send+0x1ac>)
 8000e22:	6013      	str	r3, [r2, #0]
	if(indx > 2)
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <VLPT_UART_Send+0x1ac>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	dd02      	ble.n	8000e32 <VLPT_UART_Send+0x18e>
		indx = 0;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <VLPT_UART_Send+0x1ac>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]

}
 8000e32:	bf00      	nop
 8000e34:	37ac      	adds	r7, #172	; 0xac
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	080083bc 	.word	0x080083bc
 8000e40:	20000764 	.word	0x20000764
 8000e44:	0800828c 	.word	0x0800828c
 8000e48:	080082a4 	.word	0x080082a4
 8000e4c:	200003e0 	.word	0x200003e0
 8000e50:	20000768 	.word	0x20000768
 8000e54:	20000000 	.word	0x20000000
 8000e58:	080083f4 	.word	0x080083f4
 8000e5c:	080082d4 	.word	0x080082d4

08000e60 <HPT_Task_Start>:

void HPT_Task_Start(void *pvParameters) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	ReleaseSemaphores2BeAcquired();
 8000e68:	f7ff fc66 	bl	8000738 <ReleaseSemaphores2BeAcquired>
	while(1) {
		HPT_UART_Send();
 8000e6c:	f7ff fc80 	bl	8000770 <HPT_UART_Send>
		vTaskDelay(3000);
 8000e70:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e74:	f005 f992 	bl	800619c <vTaskDelay>
		HPT_UART_Send();
 8000e78:	e7f8      	b.n	8000e6c <HPT_Task_Start+0xc>

08000e7a <MPT_Task_Start>:
//		vTaskDelete(NULL);
	}
}

void MPT_Task_Start(void *pvParameters) {
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
	while(1) {
		MPT_UART_Send();
 8000e82:	f7ff fd53 	bl	800092c <MPT_UART_Send>
		vTaskDelay(2000);
 8000e86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e8a:	f005 f987 	bl	800619c <vTaskDelay>
		MPT_UART_Send();
 8000e8e:	e7f8      	b.n	8000e82 <MPT_Task_Start+0x8>

08000e90 <LPT_Task_Start>:
//		vTaskDelete(NULL);
	}
}

void LPT_Task_Start(void *pvParameters) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	while(1) {
		LPT_UART_Send();
 8000e98:	f7ff fe26 	bl	8000ae8 <LPT_UART_Send>
		vTaskDelay(1000);
 8000e9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea0:	f005 f97c 	bl	800619c <vTaskDelay>
		LPT_UART_Send();
 8000ea4:	e7f8      	b.n	8000e98 <LPT_Task_Start+0x8>

08000ea6 <VLPT_Task_Start>:
//		vTaskDelete(NULL);
	}
}

void VLPT_Task_Start(void *pvParameters) {
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
	while(1) {
		VLPT_UART_Send();
 8000eae:	f7ff fef9 	bl	8000ca4 <VLPT_UART_Send>
		vTaskDelay(500);
 8000eb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eb6:	f005 f971 	bl	800619c <vTaskDelay>
		VLPT_UART_Send();
 8000eba:	e7f8      	b.n	8000eae <VLPT_Task_Start+0x8>

08000ebc <HAL_UART_RxCpltCallback>:
	}
}

// UART Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &rxdata, 1);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4918      	ldr	r1, [pc, #96]	; (8000f28 <HAL_UART_RxCpltCallback+0x6c>)
 8000ec8:	4818      	ldr	r0, [pc, #96]	; (8000f2c <HAL_UART_RxCpltCallback+0x70>)
 8000eca:	f003 f84b 	bl	8003f64 <HAL_UART_Receive_IT>

	if(rxdata == 'r') {
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <HAL_UART_RxCpltCallback+0x6c>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b72      	cmp	r3, #114	; 0x72
 8000ed4:	d124      	bne.n	8000f20 <HAL_UART_RxCpltCallback+0x64>
		//Release semaphore if received 'r'
		// Releasing Semaphore from ISR is not straightforward by using a single function

		/* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE
		 * as it will get set to pdTRUE inside the interrupt safe API function if a context switch is required. */
		BaseType_t xHigherPriorityTaskWoken = pdFALSE; // ISR SAFE VERSION
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]

		xSemaphoreGiveFromISR(CountingSem, &xHigherPriorityTaskWoken);
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_UART_RxCpltCallback+0x74>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f107 020c 	add.w	r2, r7, #12
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f004 fcfd 	bl	80058e4 <xQueueGiveFromISR>
		xSemaphoreGiveFromISR(CountingSem, &xHigherPriorityTaskWoken);
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_UART_RxCpltCallback+0x74>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f107 020c 	add.w	r2, r7, #12
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f004 fcf5 	bl	80058e4 <xQueueGiveFromISR>
		xSemaphoreGiveFromISR(CountingSem, &xHigherPriorityTaskWoken);
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <HAL_UART_RxCpltCallback+0x74>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f107 020c 	add.w	r2, r7, #12
 8000f02:	4611      	mov	r1, r2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f004 fced 	bl	80058e4 <xQueueGiveFromISR>

		/* Pass the xHigherPriorityTaskWoken value into portEND_SWITCHING_ISR().
		 * If xHigherPriorityTaskWoken was set to pdTRUE inside xSemaphoreGiveFromISR()
		then calling portEND_SWITCHING ISR() will request a context switch.
		If xHigherPriorityTaskWoken is still pdFALSE then calling portEND_SWITCHING_ISR() will have no effect */
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d007      	beq.n	8000f20 <HAL_UART_RxCpltCallback+0x64>
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_UART_RxCpltCallback+0x78>)
 8000f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	f3bf 8f4f 	dsb	sy
 8000f1c:	f3bf 8f6f 	isb	sy

	}
}
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2000076c 	.word	0x2000076c
 8000f2c:	200003e0 	.word	0x200003e0
 8000f30:	20000764 	.word	0x20000764
 8000f34:	e000ed04 	.word	0xe000ed04

08000f38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f4a:	f000 fa6d 	bl	8001428 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40012c00 	.word	0x40012c00

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <Error_Handler+0x8>
	...

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_MspInit+0x4c>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <HAL_MspInit+0x4c>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6193      	str	r3, [r2, #24]
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_MspInit+0x4c>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_MspInit+0x4c>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_MspInit+0x4c>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <HAL_MspInit+0x4c>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	210f      	movs	r1, #15
 8000fa2:	f06f 0001 	mvn.w	r0, #1
 8000fa6:	f000 fb17 	bl	80015d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a17      	ldr	r2, [pc, #92]	; (8001034 <HAL_I2C_MspInit+0x7c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d127      	bne.n	800102a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <HAL_I2C_MspInit+0x80>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	4a16      	ldr	r2, [pc, #88]	; (8001038 <HAL_I2C_MspInit+0x80>)
 8000fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe4:	6153      	str	r3, [r2, #20]
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_I2C_MspInit+0x80>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000ff2:	23c0      	movs	r3, #192	; 0xc0
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff6:	2312      	movs	r3, #18
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001002:	2304      	movs	r3, #4
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	480b      	ldr	r0, [pc, #44]	; (800103c <HAL_I2C_MspInit+0x84>)
 800100e:	f000 fb85 	bl	800171c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_I2C_MspInit+0x80>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_I2C_MspInit+0x80>)
 8001018:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800101c:	61d3      	str	r3, [r2, #28]
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_I2C_MspInit+0x80>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	; 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40005400 	.word	0x40005400
 8001038:	40021000 	.word	0x40021000
 800103c:	48000400 	.word	0x48000400

08001040 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_SPI_MspInit+0x7c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d128      	bne.n	80010b4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_SPI_MspInit+0x80>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <HAL_SPI_MspInit+0x80>)
 8001068:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800106c:	6193      	str	r3, [r2, #24]
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_SPI_MspInit+0x80>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <HAL_SPI_MspInit+0x80>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <HAL_SPI_MspInit+0x80>)
 8001080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001084:	6153      	str	r3, [r2, #20]
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_SPI_MspInit+0x80>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001092:	23e0      	movs	r3, #224	; 0xe0
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010a2:	2305      	movs	r3, #5
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b0:	f000 fb34 	bl	800171c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010b4:	bf00      	nop
 80010b6:	3728      	adds	r7, #40	; 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40013000 	.word	0x40013000
 80010c0:	40021000 	.word	0x40021000

080010c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <HAL_UART_MspInit+0x8c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d12f      	bne.n	8001146 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_UART_MspInit+0x90>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <HAL_UART_MspInit+0x90>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f0:	6193      	str	r3, [r2, #24]
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_UART_MspInit+0x90>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_UART_MspInit+0x90>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4a14      	ldr	r2, [pc, #80]	; (8001154 <HAL_UART_MspInit+0x90>)
 8001104:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001108:	6153      	str	r3, [r2, #20]
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_UART_MspInit+0x90>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001116:	2330      	movs	r3, #48	; 0x30
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001126:	2307      	movs	r3, #7
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	4809      	ldr	r0, [pc, #36]	; (8001158 <HAL_UART_MspInit+0x94>)
 8001132:	f000 faf3 	bl	800171c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2105      	movs	r1, #5
 800113a:	2025      	movs	r0, #37	; 0x25
 800113c:	f000 fa4c 	bl	80015d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001140:	2025      	movs	r0, #37	; 0x25
 8001142:	f000 fa65 	bl	8001610 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	; 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40013800 	.word	0x40013800
 8001154:	40021000 	.word	0x40021000
 8001158:	48000800 	.word	0x48000800

0800115c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a18      	ldr	r2, [pc, #96]	; (80011dc <HAL_PCD_MspInit+0x80>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d129      	bne.n	80011d2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <HAL_PCD_MspInit+0x84>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4a17      	ldr	r2, [pc, #92]	; (80011e0 <HAL_PCD_MspInit+0x84>)
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	6153      	str	r3, [r2, #20]
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_PCD_MspInit+0x84>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001196:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800119a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80011a8:	230e      	movs	r3, #14
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b6:	f000 fab1 	bl	800171c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_PCD_MspInit+0x84>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <HAL_PCD_MspInit+0x84>)
 80011c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_PCD_MspInit+0x84>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40005c00 	.word	0x40005c00
 80011e0:	40021000 	.word	0x40021000

080011e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08c      	sub	sp, #48	; 0x30
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011f4:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <HAL_InitTick+0xcc>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a2d      	ldr	r2, [pc, #180]	; (80012b0 <HAL_InitTick+0xcc>)
 80011fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <HAL_InitTick+0xcc>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800120c:	f107 020c 	add.w	r2, r7, #12
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f002 f87e 	bl	8003318 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800121c:	f002 f85a 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 8001220:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001224:	4a23      	ldr	r2, [pc, #140]	; (80012b4 <HAL_InitTick+0xd0>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	0c9b      	lsrs	r3, r3, #18
 800122c:	3b01      	subs	r3, #1
 800122e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <HAL_InitTick+0xd4>)
 8001232:	4a22      	ldr	r2, [pc, #136]	; (80012bc <HAL_InitTick+0xd8>)
 8001234:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_InitTick+0xd4>)
 8001238:	f240 32e7 	movw	r2, #999	; 0x3e7
 800123c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800123e:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <HAL_InitTick+0xd4>)
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001244:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <HAL_InitTick+0xd4>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <HAL_InitTick+0xd4>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_InitTick+0xd4>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001256:	4818      	ldr	r0, [pc, #96]	; (80012b8 <HAL_InitTick+0xd4>)
 8001258:	f002 faeb 	bl	8003832 <HAL_TIM_Base_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001266:	2b00      	cmp	r3, #0
 8001268:	d11b      	bne.n	80012a2 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800126a:	4813      	ldr	r0, [pc, #76]	; (80012b8 <HAL_InitTick+0xd4>)
 800126c:	f002 fb42 	bl	80038f4 <HAL_TIM_Base_Start_IT>
 8001270:	4603      	mov	r3, r0
 8001272:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001276:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800127a:	2b00      	cmp	r3, #0
 800127c:	d111      	bne.n	80012a2 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800127e:	2019      	movs	r0, #25
 8001280:	f000 f9c6 	bl	8001610 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	d808      	bhi.n	800129c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800128a:	2200      	movs	r2, #0
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	2019      	movs	r0, #25
 8001290:	f000 f9a2 	bl	80015d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_InitTick+0xdc>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e002      	b.n	80012a2 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3730      	adds	r7, #48	; 0x30
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000
 80012b4:	431bde83 	.word	0x431bde83
 80012b8:	20000770 	.word	0x20000770
 80012bc:	40012c00 	.word	0x40012c00
 80012c0:	20000010 	.word	0x20000010

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x4>

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <MemManage_Handler+0x4>

080012d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80012f6:	f002 fb67 	bl	80039c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000770 	.word	0x20000770

08001304 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <USART1_IRQHandler+0x10>)
 800130a:	f002 fe6f 	bl	8003fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200003e0 	.word	0x200003e0

08001318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001320:	4a14      	ldr	r2, [pc, #80]	; (8001374 <_sbrk+0x5c>)
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <_sbrk+0x60>)
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <_sbrk+0x64>)
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <_sbrk+0x68>)
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	429a      	cmp	r2, r3
 8001346:	d207      	bcs.n	8001358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001348:	f006 fad2 	bl	80078f0 <__errno>
 800134c:	4603      	mov	r3, r0
 800134e:	220c      	movs	r2, #12
 8001350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	e009      	b.n	800136c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	4a05      	ldr	r2, [pc, #20]	; (800137c <_sbrk+0x64>)
 8001368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000a000 	.word	0x2000a000
 8001378:	00000400 	.word	0x00000400
 800137c:	200007bc 	.word	0x200007bc
 8001380:	20001658 	.word	0x20001658

08001384 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <SystemInit+0x20>)
 800138a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800138e:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <SystemInit+0x20>)
 8001390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013ac:	f7ff ffea 	bl	8001384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013b2:	490d      	ldr	r1, [pc, #52]	; (80013e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <LoopForever+0xe>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c8:	4c0a      	ldr	r4, [pc, #40]	; (80013f4 <LoopForever+0x16>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d6:	f006 fa91 	bl	80078fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013da:	f7fe ff6b 	bl	80002b4 <main>

080013de <LoopForever>:

LoopForever:
    b LoopForever
 80013de:	e7fe      	b.n	80013de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013e0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80013ec:	080084bc 	.word	0x080084bc
  ldr r2, =_sbss
 80013f0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80013f4:	20001658 	.word	0x20001658

080013f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC1_2_IRQHandler>
	...

080013fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_Init+0x28>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a07      	ldr	r2, [pc, #28]	; (8001424 <HAL_Init+0x28>)
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140c:	2003      	movs	r0, #3
 800140e:	f000 f8d8 	bl	80015c2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001412:	200f      	movs	r0, #15
 8001414:	f7ff fee6 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001418:	f7ff fda6 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40022000 	.word	0x40022000

08001428 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000014 	.word	0x20000014
 800144c:	200007c0 	.word	0x200007c0

08001450 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;  
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	200007c0 	.word	0x200007c0

08001468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	db0b      	blt.n	80014f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f003 021f 	and.w	r2, r3, #31
 80014e4:	4907      	ldr	r1, [pc, #28]	; (8001504 <__NVIC_EnableIRQ+0x38>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	2001      	movs	r0, #1
 80014ee:	fa00 f202 	lsl.w	r2, r0, r2
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000e100 	.word	0xe000e100

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	; (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	; (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	; 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ff4c 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ea:	f7ff ff61 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 80015ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	68b9      	ldr	r1, [r7, #8]
 80015f4:	6978      	ldr	r0, [r7, #20]
 80015f6:	f7ff ffb1 	bl	800155c <NVIC_EncodePriority>
 80015fa:	4602      	mov	r2, r0
 80015fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff80 	bl	8001508 <__NVIC_SetPriority>
}
 8001608:	bf00      	nop
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff ff54 	bl	80014cc <__NVIC_EnableIRQ>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800163a:	2b02      	cmp	r3, #2
 800163c:	d008      	beq.n	8001650 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2204      	movs	r2, #4
 8001642:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e020      	b.n	8001692 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 020e 	bic.w	r2, r2, #14
 800165e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001678:	2101      	movs	r1, #1
 800167a:	fa01 f202 	lsl.w	r2, r1, r2
 800167e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d005      	beq.n	80016c0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2204      	movs	r2, #4
 80016b8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
 80016be:	e027      	b.n	8001710 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 020e 	bic.w	r2, r2, #14
 80016ce:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e8:	2101      	movs	r1, #1
 80016ea:	fa01 f202 	lsl.w	r2, r1, r2
 80016ee:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	4798      	blx	r3
    } 
  }
  return status;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172a:	e154      	b.n	80019d6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2101      	movs	r1, #1
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	fa01 f303 	lsl.w	r3, r1, r3
 8001738:	4013      	ands	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 8146 	beq.w	80019d0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b01      	cmp	r3, #1
 800174e:	d005      	beq.n	800175c <HAL_GPIO_Init+0x40>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d130      	bne.n	80017be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001792:	2201      	movs	r2, #1
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	091b      	lsrs	r3, r3, #4
 80017a8:	f003 0201 	and.w	r2, r3, #1
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d017      	beq.n	80017fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	2203      	movs	r2, #3
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d123      	bne.n	800184e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	08da      	lsrs	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3208      	adds	r2, #8
 800180e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	220f      	movs	r2, #15
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	691a      	ldr	r2, [r3, #16]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	08da      	lsrs	r2, r3, #3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3208      	adds	r2, #8
 8001848:	6939      	ldr	r1, [r7, #16]
 800184a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0203 	and.w	r2, r3, #3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 80a0 	beq.w	80019d0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001890:	4b58      	ldr	r3, [pc, #352]	; (80019f4 <HAL_GPIO_Init+0x2d8>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a57      	ldr	r2, [pc, #348]	; (80019f4 <HAL_GPIO_Init+0x2d8>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b55      	ldr	r3, [pc, #340]	; (80019f4 <HAL_GPIO_Init+0x2d8>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018a8:	4a53      	ldr	r2, [pc, #332]	; (80019f8 <HAL_GPIO_Init+0x2dc>)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	3302      	adds	r3, #2
 80018b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	220f      	movs	r2, #15
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018d2:	d019      	beq.n	8001908 <HAL_GPIO_Init+0x1ec>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a49      	ldr	r2, [pc, #292]	; (80019fc <HAL_GPIO_Init+0x2e0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d013      	beq.n	8001904 <HAL_GPIO_Init+0x1e8>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a48      	ldr	r2, [pc, #288]	; (8001a00 <HAL_GPIO_Init+0x2e4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d00d      	beq.n	8001900 <HAL_GPIO_Init+0x1e4>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a47      	ldr	r2, [pc, #284]	; (8001a04 <HAL_GPIO_Init+0x2e8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d007      	beq.n	80018fc <HAL_GPIO_Init+0x1e0>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a46      	ldr	r2, [pc, #280]	; (8001a08 <HAL_GPIO_Init+0x2ec>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d101      	bne.n	80018f8 <HAL_GPIO_Init+0x1dc>
 80018f4:	2304      	movs	r3, #4
 80018f6:	e008      	b.n	800190a <HAL_GPIO_Init+0x1ee>
 80018f8:	2305      	movs	r3, #5
 80018fa:	e006      	b.n	800190a <HAL_GPIO_Init+0x1ee>
 80018fc:	2303      	movs	r3, #3
 80018fe:	e004      	b.n	800190a <HAL_GPIO_Init+0x1ee>
 8001900:	2302      	movs	r3, #2
 8001902:	e002      	b.n	800190a <HAL_GPIO_Init+0x1ee>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_GPIO_Init+0x1ee>
 8001908:	2300      	movs	r3, #0
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	f002 0203 	and.w	r2, r2, #3
 8001910:	0092      	lsls	r2, r2, #2
 8001912:	4093      	lsls	r3, r2
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800191a:	4937      	ldr	r1, [pc, #220]	; (80019f8 <HAL_GPIO_Init+0x2dc>)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	3302      	adds	r3, #2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001928:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <HAL_GPIO_Init+0x2f0>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800194c:	4a2f      	ldr	r2, [pc, #188]	; (8001a0c <HAL_GPIO_Init+0x2f0>)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001952:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <HAL_GPIO_Init+0x2f0>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001976:	4a25      	ldr	r2, [pc, #148]	; (8001a0c <HAL_GPIO_Init+0x2f0>)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800197c:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <HAL_GPIO_Init+0x2f0>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019a0:	4a1a      	ldr	r2, [pc, #104]	; (8001a0c <HAL_GPIO_Init+0x2f0>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019a6:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_GPIO_Init+0x2f0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019ca:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <HAL_GPIO_Init+0x2f0>)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3301      	adds	r3, #1
 80019d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f47f aea3 	bne.w	800172c <HAL_GPIO_Init+0x10>
  }
}
 80019e6:	bf00      	nop
 80019e8:	bf00      	nop
 80019ea:	371c      	adds	r7, #28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40010000 	.word	0x40010000
 80019fc:	48000400 	.word	0x48000400
 8001a00:	48000800 	.word	0x48000800
 8001a04:	48000c00 	.word	0x48000c00
 8001a08:	48001000 	.word	0x48001000
 8001a0c:	40010400 	.word	0x40010400

08001a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	807b      	strh	r3, [r7, #2]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a20:	787b      	ldrb	r3, [r7, #1]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a2c:	e002      	b.n	8001a34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e081      	b.n	8001b56 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d106      	bne.n	8001a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff faa6 	bl	8000fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2224      	movs	r2, #36	; 0x24
 8001a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0201 	bic.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aa0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d107      	bne.n	8001aba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	e006      	b.n	8001ac8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ac6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d104      	bne.n	8001ada <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ad8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001afc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691a      	ldr	r2, [r3, #16]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69d9      	ldr	r1, [r3, #28]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1a      	ldr	r2, [r3, #32]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2220      	movs	r2, #32
 8001b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b20      	cmp	r3, #32
 8001b72:	d138      	bne.n	8001be6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e032      	b.n	8001be8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2224      	movs	r2, #36	; 0x24
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0201 	bic.w	r2, r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bb0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6819      	ldr	r1, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001be6:	2302      	movs	r3, #2
  }
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	d139      	bne.n	8001c7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e033      	b.n	8001c80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2224      	movs	r2, #36	; 0x24
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0201 	bic.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 0201 	orr.w	r2, r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e000      	b.n	8001c80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c7e:	2302      	movs	r3, #2
  }
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8e:	b08b      	sub	sp, #44	; 0x2c
 8001c90:	af06      	add	r7, sp, #24
 8001c92:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e0c4      	b.n	8001e28 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fa52 	bl	800115c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2203      	movs	r2, #3
 8001cbc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 fb27 	bl	8005318 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]
 8001cce:	e040      	b.n	8001d52 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	440b      	add	r3, r1
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	440b      	add	r3, r1
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	440b      	add	r3, r1
 8001d0a:	3303      	adds	r3, #3
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	3338      	adds	r3, #56	; 0x38
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	440b      	add	r3, r1
 8001d32:	333c      	adds	r3, #60	; 0x3c
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d38:	7bfa      	ldrb	r2, [r7, #15]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	440b      	add	r3, r1
 8001d46:	3340      	adds	r3, #64	; 0x40
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d3b9      	bcc.n	8001cd0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	e044      	b.n	8001dec <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	440b      	add	r3, r1
 8001d70:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	440b      	add	r3, r1
 8001db2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	440b      	add	r3, r1
 8001dde:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	3301      	adds	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d3b5      	bcc.n	8001d62 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	687e      	ldr	r6, [r7, #4]
 8001dfe:	466d      	mov	r5, sp
 8001e00:	f106 0410 	add.w	r4, r6, #16
 8001e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e08:	6823      	ldr	r3, [r4, #0]
 8001e0a:	602b      	str	r3, [r5, #0]
 8001e0c:	1d33      	adds	r3, r6, #4
 8001e0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e10:	6838      	ldr	r0, [r7, #0]
 8001e12:	f003 fa9c 	bl	800534e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e40:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	f001 b823 	b.w	8002e9c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 817d 	beq.w	8002166 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e6c:	4bbc      	ldr	r3, [pc, #752]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d00c      	beq.n	8001e92 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e78:	4bb9      	ldr	r3, [pc, #740]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d15c      	bne.n	8001f3e <HAL_RCC_OscConfig+0x10e>
 8001e84:	4bb6      	ldr	r3, [pc, #728]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e90:	d155      	bne.n	8001f3e <HAL_RCC_OscConfig+0x10e>
 8001e92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e96:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ea6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eaa:	fab3 f383 	clz	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	095b      	lsrs	r3, r3, #5
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d102      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x94>
 8001ebe:	4ba8      	ldr	r3, [pc, #672]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	e015      	b.n	8001ef0 <HAL_RCC_OscConfig+0xc0>
 8001ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ed8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001edc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ee0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001eec:	4b9c      	ldr	r3, [pc, #624]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ef4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001ef8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001efc:	fa92 f2a2 	rbit	r2, r2
 8001f00:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001f04:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f08:	fab2 f282 	clz	r2, r2
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	f042 0220 	orr.w	r2, r2, #32
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	f002 021f 	and.w	r2, r2, #31
 8001f18:	2101      	movs	r1, #1
 8001f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 811f 	beq.w	8002164 <HAL_RCC_OscConfig+0x334>
 8001f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 8116 	bne.w	8002164 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f000 bfaf 	b.w	8002e9c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4e:	d106      	bne.n	8001f5e <HAL_RCC_OscConfig+0x12e>
 8001f50:	4b83      	ldr	r3, [pc, #524]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a82      	ldr	r2, [pc, #520]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	e036      	b.n	8001fcc <HAL_RCC_OscConfig+0x19c>
 8001f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x158>
 8001f6e:	4b7c      	ldr	r3, [pc, #496]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a7b      	ldr	r2, [pc, #492]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	4b79      	ldr	r3, [pc, #484]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a78      	ldr	r2, [pc, #480]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e021      	b.n	8001fcc <HAL_RCC_OscConfig+0x19c>
 8001f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x184>
 8001f9a:	4b71      	ldr	r3, [pc, #452]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a70      	ldr	r2, [pc, #448]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	4b6e      	ldr	r3, [pc, #440]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6d      	ldr	r2, [pc, #436]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	e00b      	b.n	8001fcc <HAL_RCC_OscConfig+0x19c>
 8001fb4:	4b6a      	ldr	r3, [pc, #424]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a69      	ldr	r2, [pc, #420]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b67      	ldr	r3, [pc, #412]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a66      	ldr	r2, [pc, #408]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fcc:	4b64      	ldr	r3, [pc, #400]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	f023 020f 	bic.w	r2, r3, #15
 8001fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	495f      	ldr	r1, [pc, #380]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d059      	beq.n	80020aa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff6:	f7ff fa2b 	bl	8001450 <HAL_GetTick>
 8001ffa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002000:	f7ff fa26 	bl	8001450 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b64      	cmp	r3, #100	; 0x64
 800200e:	d902      	bls.n	8002016 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	f000 bf43 	b.w	8002e9c <HAL_RCC_OscConfig+0x106c>
 8002016:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800201a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800202a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	fab3 f383 	clz	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	095b      	lsrs	r3, r3, #5
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b01      	cmp	r3, #1
 8002040:	d102      	bne.n	8002048 <HAL_RCC_OscConfig+0x218>
 8002042:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	e015      	b.n	8002074 <HAL_RCC_OscConfig+0x244>
 8002048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800204c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800205c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002060:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002064:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002070:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002078:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800207c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002080:	fa92 f2a2 	rbit	r2, r2
 8002084:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002088:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800208c:	fab2 f282 	clz	r2, r2
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	f042 0220 	orr.w	r2, r2, #32
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f002 021f 	and.w	r2, r2, #31
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f202 	lsl.w	r2, r1, r2
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0ab      	beq.n	8002000 <HAL_RCC_OscConfig+0x1d0>
 80020a8:	e05d      	b.n	8002166 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7ff f9d1 	bl	8001450 <HAL_GetTick>
 80020ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020b4:	f7ff f9cc 	bl	8001450 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b64      	cmp	r3, #100	; 0x64
 80020c2:	d902      	bls.n	80020ca <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	f000 bee9 	b.w	8002e9c <HAL_RCC_OscConfig+0x106c>
 80020ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ce:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80020de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	095b      	lsrs	r3, r3, #5
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d102      	bne.n	80020fc <HAL_RCC_OscConfig+0x2cc>
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	e015      	b.n	8002128 <HAL_RCC_OscConfig+0x2f8>
 80020fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002100:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002110:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002114:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002118:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002124:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_RCC_OscConfig+0x330>)
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800212c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002130:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002134:	fa92 f2a2 	rbit	r2, r2
 8002138:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800213c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002140:	fab2 f282 	clz	r2, r2
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	f042 0220 	orr.w	r2, r2, #32
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	f002 021f 	and.w	r2, r2, #31
 8002150:	2101      	movs	r1, #1
 8002152:	fa01 f202 	lsl.w	r2, r1, r2
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1ab      	bne.n	80020b4 <HAL_RCC_OscConfig+0x284>
 800215c:	e003      	b.n	8002166 <HAL_RCC_OscConfig+0x336>
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 817d 	beq.w	8002476 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800217c:	4ba6      	ldr	r3, [pc, #664]	; (8002418 <HAL_RCC_OscConfig+0x5e8>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00b      	beq.n	80021a0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002188:	4ba3      	ldr	r3, [pc, #652]	; (8002418 <HAL_RCC_OscConfig+0x5e8>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	2b08      	cmp	r3, #8
 8002192:	d172      	bne.n	800227a <HAL_RCC_OscConfig+0x44a>
 8002194:	4ba0      	ldr	r3, [pc, #640]	; (8002418 <HAL_RCC_OscConfig+0x5e8>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d16c      	bne.n	800227a <HAL_RCC_OscConfig+0x44a>
 80021a0:	2302      	movs	r3, #2
 80021a2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80021b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d102      	bne.n	80021d0 <HAL_RCC_OscConfig+0x3a0>
 80021ca:	4b93      	ldr	r3, [pc, #588]	; (8002418 <HAL_RCC_OscConfig+0x5e8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	e013      	b.n	80021f8 <HAL_RCC_OscConfig+0x3c8>
 80021d0:	2302      	movs	r3, #2
 80021d2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80021e2:	2302      	movs	r3, #2
 80021e4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80021e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80021f4:	4b88      	ldr	r3, [pc, #544]	; (8002418 <HAL_RCC_OscConfig+0x5e8>)
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	2202      	movs	r2, #2
 80021fa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80021fe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002202:	fa92 f2a2 	rbit	r2, r2
 8002206:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800220a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800220e:	fab2 f282 	clz	r2, r2
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	f042 0220 	orr.w	r2, r2, #32
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	f002 021f 	and.w	r2, r2, #31
 800221e:	2101      	movs	r1, #1
 8002220:	fa01 f202 	lsl.w	r2, r1, r2
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_RCC_OscConfig+0x410>
 800222a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d002      	beq.n	8002240 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	f000 be2e 	b.w	8002e9c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002240:	4b75      	ldr	r3, [pc, #468]	; (8002418 <HAL_RCC_OscConfig+0x5e8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	21f8      	movs	r1, #248	; 0xf8
 8002256:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800225e:	fa91 f1a1 	rbit	r1, r1
 8002262:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002266:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800226a:	fab1 f181 	clz	r1, r1
 800226e:	b2c9      	uxtb	r1, r1
 8002270:	408b      	lsls	r3, r1
 8002272:	4969      	ldr	r1, [pc, #420]	; (8002418 <HAL_RCC_OscConfig+0x5e8>)
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002278:	e0fd      	b.n	8002476 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800227a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 8088 	beq.w	800239c <HAL_RCC_OscConfig+0x56c>
 800228c:	2301      	movs	r3, #1
 800228e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800229e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	461a      	mov	r2, r3
 80022b4:	2301      	movs	r3, #1
 80022b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff f8ca 	bl	8001450 <HAL_GetTick>
 80022bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c0:	e00a      	b.n	80022d8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c2:	f7ff f8c5 	bl	8001450 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d902      	bls.n	80022d8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	f000 bde2 	b.w	8002e9c <HAL_RCC_OscConfig+0x106c>
 80022d8:	2302      	movs	r3, #2
 80022da:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80022ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d102      	bne.n	8002308 <HAL_RCC_OscConfig+0x4d8>
 8002302:	4b45      	ldr	r3, [pc, #276]	; (8002418 <HAL_RCC_OscConfig+0x5e8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	e013      	b.n	8002330 <HAL_RCC_OscConfig+0x500>
 8002308:	2302      	movs	r3, #2
 800230a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800231a:	2302      	movs	r3, #2
 800231c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002320:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800232c:	4b3a      	ldr	r3, [pc, #232]	; (8002418 <HAL_RCC_OscConfig+0x5e8>)
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	2202      	movs	r2, #2
 8002332:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002336:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800233a:	fa92 f2a2 	rbit	r2, r2
 800233e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002342:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002346:	fab2 f282 	clz	r2, r2
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	f042 0220 	orr.w	r2, r2, #32
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f002 021f 	and.w	r2, r2, #31
 8002356:	2101      	movs	r1, #1
 8002358:	fa01 f202 	lsl.w	r2, r1, r2
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0af      	beq.n	80022c2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002362:	4b2d      	ldr	r3, [pc, #180]	; (8002418 <HAL_RCC_OscConfig+0x5e8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800236a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	21f8      	movs	r1, #248	; 0xf8
 8002378:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002380:	fa91 f1a1 	rbit	r1, r1
 8002384:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002388:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800238c:	fab1 f181 	clz	r1, r1
 8002390:	b2c9      	uxtb	r1, r1
 8002392:	408b      	lsls	r3, r1
 8002394:	4920      	ldr	r1, [pc, #128]	; (8002418 <HAL_RCC_OscConfig+0x5e8>)
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
 800239a:	e06c      	b.n	8002476 <HAL_RCC_OscConfig+0x646>
 800239c:	2301      	movs	r3, #1
 800239e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80023ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b2:	fab3 f383 	clz	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	461a      	mov	r2, r3
 80023c4:	2300      	movs	r3, #0
 80023c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7ff f842 	bl	8001450 <HAL_GetTick>
 80023cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d2:	f7ff f83d 	bl	8001450 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d902      	bls.n	80023e8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	f000 bd5a 	b.w	8002e9c <HAL_RCC_OscConfig+0x106c>
 80023e8:	2302      	movs	r3, #2
 80023ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80023fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	b2db      	uxtb	r3, r3
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b01      	cmp	r3, #1
 8002410:	d104      	bne.n	800241c <HAL_RCC_OscConfig+0x5ec>
 8002412:	4b01      	ldr	r3, [pc, #4]	; (8002418 <HAL_RCC_OscConfig+0x5e8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	e015      	b.n	8002444 <HAL_RCC_OscConfig+0x614>
 8002418:	40021000 	.word	0x40021000
 800241c:	2302      	movs	r3, #2
 800241e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800242e:	2302      	movs	r3, #2
 8002430:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002434:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002440:	4bc8      	ldr	r3, [pc, #800]	; (8002764 <HAL_RCC_OscConfig+0x934>)
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	2202      	movs	r2, #2
 8002446:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800244a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800244e:	fa92 f2a2 	rbit	r2, r2
 8002452:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002456:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800245a:	fab2 f282 	clz	r2, r2
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	f042 0220 	orr.w	r2, r2, #32
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	f002 021f 	and.w	r2, r2, #31
 800246a:	2101      	movs	r1, #1
 800246c:	fa01 f202 	lsl.w	r2, r1, r2
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1ad      	bne.n	80023d2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 8110 	beq.w	80026ac <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800248c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002490:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d079      	beq.n	8002590 <HAL_RCC_OscConfig+0x760>
 800249c:	2301      	movs	r3, #1
 800249e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80024ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	4bab      	ldr	r3, [pc, #684]	; (8002768 <HAL_RCC_OscConfig+0x938>)
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	461a      	mov	r2, r3
 80024c2:	2301      	movs	r3, #1
 80024c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c6:	f7fe ffc3 	bl	8001450 <HAL_GetTick>
 80024ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d0:	f7fe ffbe 	bl	8001450 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d902      	bls.n	80024e6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	f000 bcdb 	b.w	8002e9c <HAL_RCC_OscConfig+0x106c>
 80024e6:	2302      	movs	r3, #2
 80024e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80024f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002500:	2202      	movs	r2, #2
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002508:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	fa93 f2a3 	rbit	r2, r3
 8002512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002524:	2202      	movs	r2, #2
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	fa93 f2a3 	rbit	r2, r3
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800253e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002540:	4b88      	ldr	r3, [pc, #544]	; (8002764 <HAL_RCC_OscConfig+0x934>)
 8002542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800254c:	2102      	movs	r1, #2
 800254e:	6019      	str	r1, [r3, #0]
 8002550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002554:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	fa93 f1a3 	rbit	r1, r3
 800255e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002562:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002566:	6019      	str	r1, [r3, #0]
  return result;
 8002568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	2101      	movs	r1, #1
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0a0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x6a0>
 800258e:	e08d      	b.n	80026ac <HAL_RCC_OscConfig+0x87c>
 8002590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002594:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002598:	2201      	movs	r2, #1
 800259a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	fa93 f2a3 	rbit	r2, r3
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025b2:	601a      	str	r2, [r3, #0]
  return result;
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025bc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b68      	ldr	r3, [pc, #416]	; (8002768 <HAL_RCC_OscConfig+0x938>)
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	461a      	mov	r2, r3
 80025ce:	2300      	movs	r3, #0
 80025d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d2:	f7fe ff3d 	bl	8001450 <HAL_GetTick>
 80025d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025dc:	f7fe ff38 	bl	8001450 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d902      	bls.n	80025f2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	f000 bc55 	b.w	8002e9c <HAL_RCC_OscConfig+0x106c>
 80025f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80025fa:	2202      	movs	r2, #2
 80025fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	fa93 f2a3 	rbit	r2, r3
 800260c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002610:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800261e:	2202      	movs	r2, #2
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	fa93 f2a3 	rbit	r2, r3
 8002630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002634:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002642:	2202      	movs	r2, #2
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	fa93 f2a3 	rbit	r2, r3
 8002654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002658:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800265c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265e:	4b41      	ldr	r3, [pc, #260]	; (8002764 <HAL_RCC_OscConfig+0x934>)
 8002660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002666:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800266a:	2102      	movs	r1, #2
 800266c:	6019      	str	r1, [r3, #0]
 800266e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002672:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	fa93 f1a3 	rbit	r1, r3
 800267c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002680:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002684:	6019      	str	r1, [r3, #0]
  return result;
 8002686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	fab3 f383 	clz	r3, r3
 8002694:	b2db      	uxtb	r3, r3
 8002696:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	2101      	movs	r1, #1
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d197      	bne.n	80025dc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 81a1 	beq.w	8002a04 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c8:	4b26      	ldr	r3, [pc, #152]	; (8002764 <HAL_RCC_OscConfig+0x934>)
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d116      	bne.n	8002702 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d4:	4b23      	ldr	r3, [pc, #140]	; (8002764 <HAL_RCC_OscConfig+0x934>)
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	4a22      	ldr	r2, [pc, #136]	; (8002764 <HAL_RCC_OscConfig+0x934>)
 80026da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026de:	61d3      	str	r3, [r2, #28]
 80026e0:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_RCC_OscConfig+0x934>)
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80026e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ec:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80026fa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026fc:	2301      	movs	r3, #1
 80026fe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002702:	4b1a      	ldr	r3, [pc, #104]	; (800276c <HAL_RCC_OscConfig+0x93c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d11a      	bne.n	8002744 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270e:	4b17      	ldr	r3, [pc, #92]	; (800276c <HAL_RCC_OscConfig+0x93c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a16      	ldr	r2, [pc, #88]	; (800276c <HAL_RCC_OscConfig+0x93c>)
 8002714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002718:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271a:	f7fe fe99 	bl	8001450 <HAL_GetTick>
 800271e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002722:	e009      	b.n	8002738 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002724:	f7fe fe94 	bl	8001450 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b64      	cmp	r3, #100	; 0x64
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e3b1      	b.n	8002e9c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <HAL_RCC_OscConfig+0x93c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0ef      	beq.n	8002724 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002748:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d10d      	bne.n	8002770 <HAL_RCC_OscConfig+0x940>
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <HAL_RCC_OscConfig+0x934>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	4a02      	ldr	r2, [pc, #8]	; (8002764 <HAL_RCC_OscConfig+0x934>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	6213      	str	r3, [r2, #32]
 8002760:	e03c      	b.n	80027dc <HAL_RCC_OscConfig+0x9ac>
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000
 8002768:	10908120 	.word	0x10908120
 800276c:	40007000 	.word	0x40007000
 8002770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002774:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10c      	bne.n	800279a <HAL_RCC_OscConfig+0x96a>
 8002780:	4bc1      	ldr	r3, [pc, #772]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	4ac0      	ldr	r2, [pc, #768]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	6213      	str	r3, [r2, #32]
 800278c:	4bbe      	ldr	r3, [pc, #760]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	4abd      	ldr	r2, [pc, #756]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 8002792:	f023 0304 	bic.w	r3, r3, #4
 8002796:	6213      	str	r3, [r2, #32]
 8002798:	e020      	b.n	80027dc <HAL_RCC_OscConfig+0x9ac>
 800279a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b05      	cmp	r3, #5
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x994>
 80027aa:	4bb7      	ldr	r3, [pc, #732]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4ab6      	ldr	r2, [pc, #728]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 80027b0:	f043 0304 	orr.w	r3, r3, #4
 80027b4:	6213      	str	r3, [r2, #32]
 80027b6:	4bb4      	ldr	r3, [pc, #720]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4ab3      	ldr	r2, [pc, #716]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6213      	str	r3, [r2, #32]
 80027c2:	e00b      	b.n	80027dc <HAL_RCC_OscConfig+0x9ac>
 80027c4:	4bb0      	ldr	r3, [pc, #704]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	4aaf      	ldr	r2, [pc, #700]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	6213      	str	r3, [r2, #32]
 80027d0:	4bad      	ldr	r3, [pc, #692]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	4aac      	ldr	r2, [pc, #688]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 80027d6:	f023 0304 	bic.w	r3, r3, #4
 80027da:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8081 	beq.w	80028f0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ee:	f7fe fe2f 	bl	8001450 <HAL_GetTick>
 80027f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f6:	e00b      	b.n	8002810 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f8:	f7fe fe2a 	bl	8001450 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f241 3288 	movw	r2, #5000	; 0x1388
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e345      	b.n	8002e9c <HAL_RCC_OscConfig+0x106c>
 8002810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002814:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002818:	2202      	movs	r2, #2
 800281a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	fa93 f2a3 	rbit	r2, r3
 800282a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002838:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800283c:	2202      	movs	r2, #2
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002844:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	fa93 f2a3 	rbit	r2, r3
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002856:	601a      	str	r2, [r3, #0]
  return result;
 8002858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002860:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f043 0302 	orr.w	r3, r3, #2
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d102      	bne.n	800287c <HAL_RCC_OscConfig+0xa4c>
 8002876:	4b84      	ldr	r3, [pc, #528]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	e013      	b.n	80028a4 <HAL_RCC_OscConfig+0xa74>
 800287c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002880:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002884:	2202      	movs	r2, #2
 8002886:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	fa93 f2a3 	rbit	r2, r3
 8002896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	4b79      	ldr	r3, [pc, #484]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028a8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80028ac:	2102      	movs	r1, #2
 80028ae:	6011      	str	r1, [r2, #0]
 80028b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028b4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	fa92 f1a2 	rbit	r1, r2
 80028be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028c2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80028c6:	6011      	str	r1, [r2, #0]
  return result;
 80028c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028cc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	fab2 f282 	clz	r2, r2
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	f002 021f 	and.w	r2, r2, #31
 80028e2:	2101      	movs	r1, #1
 80028e4:	fa01 f202 	lsl.w	r2, r1, r2
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d084      	beq.n	80027f8 <HAL_RCC_OscConfig+0x9c8>
 80028ee:	e07f      	b.n	80029f0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f0:	f7fe fdae 	bl	8001450 <HAL_GetTick>
 80028f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f8:	e00b      	b.n	8002912 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fa:	f7fe fda9 	bl	8001450 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e2c4      	b.n	8002e9c <HAL_RCC_OscConfig+0x106c>
 8002912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002916:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800291a:	2202      	movs	r2, #2
 800291c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002922:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	fa93 f2a3 	rbit	r2, r3
 800292c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002930:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800293e:	2202      	movs	r2, #2
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002946:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	fa93 f2a3 	rbit	r2, r3
 8002950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002954:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002958:	601a      	str	r2, [r3, #0]
  return result;
 800295a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002962:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f043 0302 	orr.w	r3, r3, #2
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d102      	bne.n	800297e <HAL_RCC_OscConfig+0xb4e>
 8002978:	4b43      	ldr	r3, [pc, #268]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	e013      	b.n	80029a6 <HAL_RCC_OscConfig+0xb76>
 800297e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002982:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002986:	2202      	movs	r2, #2
 8002988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	fa93 f2a3 	rbit	r2, r3
 8002998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	4b39      	ldr	r3, [pc, #228]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029aa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80029ae:	2102      	movs	r1, #2
 80029b0:	6011      	str	r1, [r2, #0]
 80029b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029b6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	fa92 f1a2 	rbit	r1, r2
 80029c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029c4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80029c8:	6011      	str	r1, [r2, #0]
  return result;
 80029ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ce:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	fab2 f282 	clz	r2, r2
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	f002 021f 	and.w	r2, r2, #31
 80029e4:	2101      	movs	r1, #1
 80029e6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d184      	bne.n	80028fa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029f0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f8:	4b23      	ldr	r3, [pc, #140]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	4a22      	ldr	r2, [pc, #136]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 80029fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a02:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 8242 	beq.w	8002e9a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a16:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <HAL_RCC_OscConfig+0xc58>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	f000 8213 	beq.w	8002e4a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	f040 8162 	bne.w	8002cfa <HAL_RCC_OscConfig+0xeca>
 8002a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a48:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	fa93 f2a3 	rbit	r2, r3
 8002a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a56:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a5a:	601a      	str	r2, [r3, #0]
  return result;
 8002a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a60:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a64:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	461a      	mov	r2, r3
 8002a78:	2300      	movs	r3, #0
 8002a7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7fe fce8 	bl	8001450 <HAL_GetTick>
 8002a80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a84:	e00c      	b.n	8002aa0 <HAL_RCC_OscConfig+0xc70>
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fce0 	bl	8001450 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e1fd      	b.n	8002e9c <HAL_RCC_OscConfig+0x106c>
 8002aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002aa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	fa93 f2a3 	rbit	r2, r3
 8002abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ac4:	601a      	str	r2, [r3, #0]
  return result;
 8002ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ace:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad0:	fab3 f383 	clz	r3, r3
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d102      	bne.n	8002aea <HAL_RCC_OscConfig+0xcba>
 8002ae4:	4bb0      	ldr	r3, [pc, #704]	; (8002da8 <HAL_RCC_OscConfig+0xf78>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	e027      	b.n	8002b3a <HAL_RCC_OscConfig+0xd0a>
 8002aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002af2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	fa93 f2a3 	rbit	r2, r3
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b14:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b22:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	fa93 f2a3 	rbit	r2, r3
 8002b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b30:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	4b9c      	ldr	r3, [pc, #624]	; (8002da8 <HAL_RCC_OscConfig+0xf78>)
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b3e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b42:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b46:	6011      	str	r1, [r2, #0]
 8002b48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b4c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b50:	6812      	ldr	r2, [r2, #0]
 8002b52:	fa92 f1a2 	rbit	r1, r2
 8002b56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b5a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b5e:	6011      	str	r1, [r2, #0]
  return result;
 8002b60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b64:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	fab2 f282 	clz	r2, r2
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	f042 0220 	orr.w	r2, r2, #32
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	f002 021f 	and.w	r2, r2, #31
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d182      	bne.n	8002a8c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b86:	4b88      	ldr	r3, [pc, #544]	; (8002da8 <HAL_RCC_OscConfig+0xf78>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	497f      	ldr	r1, [pc, #508]	; (8002da8 <HAL_RCC_OscConfig+0xf78>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
 8002bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002bb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	fa93 f2a3 	rbit	r2, r3
 8002bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002bd2:	601a      	str	r2, [r3, #0]
  return result;
 8002bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002bdc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002be8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fc2c 	bl	8001450 <HAL_GetTick>
 8002bf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bfc:	e009      	b.n	8002c12 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfe:	f7fe fc27 	bl	8001450 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e144      	b.n	8002e9c <HAL_RCC_OscConfig+0x106c>
 8002c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c16:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c24:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	fa93 f2a3 	rbit	r2, r3
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c36:	601a      	str	r2, [r3, #0]
  return result;
 8002c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c42:	fab3 f383 	clz	r3, r3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	095b      	lsrs	r3, r3, #5
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d102      	bne.n	8002c5c <HAL_RCC_OscConfig+0xe2c>
 8002c56:	4b54      	ldr	r3, [pc, #336]	; (8002da8 <HAL_RCC_OscConfig+0xf78>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	e027      	b.n	8002cac <HAL_RCC_OscConfig+0xe7c>
 8002c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c60:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	fa93 f2a3 	rbit	r2, r3
 8002c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c86:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002c8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c94:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	fa93 f2a3 	rbit	r2, r3
 8002c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	4b3f      	ldr	r3, [pc, #252]	; (8002da8 <HAL_RCC_OscConfig+0xf78>)
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cb0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002cb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cb8:	6011      	str	r1, [r2, #0]
 8002cba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cbe:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	fa92 f1a2 	rbit	r1, r2
 8002cc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ccc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002cd0:	6011      	str	r1, [r2, #0]
  return result;
 8002cd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cd6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	fab2 f282 	clz	r2, r2
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	f042 0220 	orr.w	r2, r2, #32
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	f002 021f 	and.w	r2, r2, #31
 8002cec:	2101      	movs	r1, #1
 8002cee:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d082      	beq.n	8002bfe <HAL_RCC_OscConfig+0xdce>
 8002cf8:	e0cf      	b.n	8002e9a <HAL_RCC_OscConfig+0x106a>
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	fa93 f2a3 	rbit	r2, r3
 8002d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d1e:	601a      	str	r2, [r3, #0]
  return result;
 8002d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d24:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d28:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fe fb86 	bl	8001450 <HAL_GetTick>
 8002d44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d48:	e009      	b.n	8002d5e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4a:	f7fe fb81 	bl	8001450 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e09e      	b.n	8002e9c <HAL_RCC_OscConfig+0x106c>
 8002d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d62:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d70:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	fa93 f2a3 	rbit	r2, r3
 8002d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d82:	601a      	str	r2, [r3, #0]
  return result;
 8002d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d88:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	095b      	lsrs	r3, r3, #5
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d104      	bne.n	8002dac <HAL_RCC_OscConfig+0xf7c>
 8002da2:	4b01      	ldr	r3, [pc, #4]	; (8002da8 <HAL_RCC_OscConfig+0xf78>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	e029      	b.n	8002dfc <HAL_RCC_OscConfig+0xfcc>
 8002da8:	40021000 	.word	0x40021000
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002db4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002db8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	fa93 f2a3 	rbit	r2, r3
 8002dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dcc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002dda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	fa93 f2a3 	rbit	r2, r3
 8002dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <HAL_RCC_OscConfig+0x1078>)
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e00:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e08:	6011      	str	r1, [r2, #0]
 8002e0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e0e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	fa92 f1a2 	rbit	r1, r2
 8002e18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e1c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e20:	6011      	str	r1, [r2, #0]
  return result;
 8002e22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e26:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	fab2 f282 	clz	r2, r2
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	f042 0220 	orr.w	r2, r2, #32
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	f002 021f 	and.w	r2, r2, #31
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d180      	bne.n	8002d4a <HAL_RCC_OscConfig+0xf1a>
 8002e48:	e027      	b.n	8002e9a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e01e      	b.n	8002e9c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e5e:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_RCC_OscConfig+0x1078>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e6a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d10b      	bne.n	8002e96 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000

08002eac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b09e      	sub	sp, #120	; 0x78
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e162      	b.n	800318a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec4:	4b90      	ldr	r3, [pc, #576]	; (8003108 <HAL_RCC_ClockConfig+0x25c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d910      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed2:	4b8d      	ldr	r3, [pc, #564]	; (8003108 <HAL_RCC_ClockConfig+0x25c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 0207 	bic.w	r2, r3, #7
 8002eda:	498b      	ldr	r1, [pc, #556]	; (8003108 <HAL_RCC_ClockConfig+0x25c>)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b89      	ldr	r3, [pc, #548]	; (8003108 <HAL_RCC_ClockConfig+0x25c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e14a      	b.n	800318a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f00:	4b82      	ldr	r3, [pc, #520]	; (800310c <HAL_RCC_ClockConfig+0x260>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	497f      	ldr	r1, [pc, #508]	; (800310c <HAL_RCC_ClockConfig+0x260>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 80dc 	beq.w	80030d8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d13c      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xf6>
 8002f28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f2c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d102      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xa6>
 8002f4c:	4b6f      	ldr	r3, [pc, #444]	; (800310c <HAL_RCC_ClockConfig+0x260>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	e00f      	b.n	8002f72 <HAL_RCC_ClockConfig+0xc6>
 8002f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f5a:	fa93 f3a3 	rbit	r3, r3
 8002f5e:	667b      	str	r3, [r7, #100]	; 0x64
 8002f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f64:	663b      	str	r3, [r7, #96]	; 0x60
 8002f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f68:	fa93 f3a3 	rbit	r3, r3
 8002f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f6e:	4b67      	ldr	r3, [pc, #412]	; (800310c <HAL_RCC_ClockConfig+0x260>)
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f76:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f7a:	fa92 f2a2 	rbit	r2, r2
 8002f7e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f82:	fab2 f282 	clz	r2, r2
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	f042 0220 	orr.w	r2, r2, #32
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	f002 021f 	and.w	r2, r2, #31
 8002f92:	2101      	movs	r1, #1
 8002f94:	fa01 f202 	lsl.w	r2, r1, r2
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d17b      	bne.n	8003096 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e0f3      	b.n	800318a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d13c      	bne.n	8003024 <HAL_RCC_ClockConfig+0x178>
 8002faa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d102      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x128>
 8002fce:	4b4f      	ldr	r3, [pc, #316]	; (800310c <HAL_RCC_ClockConfig+0x260>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	e00f      	b.n	8002ff4 <HAL_RCC_ClockConfig+0x148>
 8002fd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fd8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fdc:	fa93 f3a3 	rbit	r3, r3
 8002fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fe6:	643b      	str	r3, [r7, #64]	; 0x40
 8002fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff0:	4b46      	ldr	r3, [pc, #280]	; (800310c <HAL_RCC_ClockConfig+0x260>)
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ffc:	fa92 f2a2 	rbit	r2, r2
 8003000:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003004:	fab2 f282 	clz	r2, r2
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	f042 0220 	orr.w	r2, r2, #32
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	f002 021f 	and.w	r2, r2, #31
 8003014:	2101      	movs	r1, #1
 8003016:	fa01 f202 	lsl.w	r2, r1, r2
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d13a      	bne.n	8003096 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0b2      	b.n	800318a <HAL_RCC_ClockConfig+0x2de>
 8003024:	2302      	movs	r3, #2
 8003026:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b01      	cmp	r3, #1
 8003044:	d102      	bne.n	800304c <HAL_RCC_ClockConfig+0x1a0>
 8003046:	4b31      	ldr	r3, [pc, #196]	; (800310c <HAL_RCC_ClockConfig+0x260>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	e00d      	b.n	8003068 <HAL_RCC_ClockConfig+0x1bc>
 800304c:	2302      	movs	r3, #2
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
 8003058:	2302      	movs	r3, #2
 800305a:	623b      	str	r3, [r7, #32]
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	61fb      	str	r3, [r7, #28]
 8003064:	4b29      	ldr	r3, [pc, #164]	; (800310c <HAL_RCC_ClockConfig+0x260>)
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	2202      	movs	r2, #2
 800306a:	61ba      	str	r2, [r7, #24]
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	fa92 f2a2 	rbit	r2, r2
 8003072:	617a      	str	r2, [r7, #20]
  return result;
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	fab2 f282 	clz	r2, r2
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	f042 0220 	orr.w	r2, r2, #32
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	f002 021f 	and.w	r2, r2, #31
 8003086:	2101      	movs	r1, #1
 8003088:	fa01 f202 	lsl.w	r2, r1, r2
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e079      	b.n	800318a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003096:	4b1d      	ldr	r3, [pc, #116]	; (800310c <HAL_RCC_ClockConfig+0x260>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f023 0203 	bic.w	r2, r3, #3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	491a      	ldr	r1, [pc, #104]	; (800310c <HAL_RCC_ClockConfig+0x260>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a8:	f7fe f9d2 	bl	8001450 <HAL_GetTick>
 80030ac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ae:	e00a      	b.n	80030c6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b0:	f7fe f9ce 	bl	8001450 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e061      	b.n	800318a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	4b11      	ldr	r3, [pc, #68]	; (800310c <HAL_RCC_ClockConfig+0x260>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f003 020c 	and.w	r2, r3, #12
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d1eb      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_RCC_ClockConfig+0x25c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d214      	bcs.n	8003110 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_RCC_ClockConfig+0x25c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 0207 	bic.w	r2, r3, #7
 80030ee:	4906      	ldr	r1, [pc, #24]	; (8003108 <HAL_RCC_ClockConfig+0x25c>)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	4b04      	ldr	r3, [pc, #16]	; (8003108 <HAL_RCC_ClockConfig+0x25c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d005      	beq.n	8003110 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e040      	b.n	800318a <HAL_RCC_ClockConfig+0x2de>
 8003108:	40022000 	.word	0x40022000
 800310c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800311c:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <HAL_RCC_ClockConfig+0x2e8>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	491a      	ldr	r1, [pc, #104]	; (8003194 <HAL_RCC_ClockConfig+0x2e8>)
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800313a:	4b16      	ldr	r3, [pc, #88]	; (8003194 <HAL_RCC_ClockConfig+0x2e8>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4912      	ldr	r1, [pc, #72]	; (8003194 <HAL_RCC_ClockConfig+0x2e8>)
 800314a:	4313      	orrs	r3, r2
 800314c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800314e:	f000 f829 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8003152:	4601      	mov	r1, r0
 8003154:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <HAL_RCC_ClockConfig+0x2e8>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800315c:	22f0      	movs	r2, #240	; 0xf0
 800315e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	fa92 f2a2 	rbit	r2, r2
 8003166:	60fa      	str	r2, [r7, #12]
  return result;
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	fab2 f282 	clz	r2, r2
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	40d3      	lsrs	r3, r2
 8003172:	4a09      	ldr	r2, [pc, #36]	; (8003198 <HAL_RCC_ClockConfig+0x2ec>)
 8003174:	5cd3      	ldrb	r3, [r2, r3]
 8003176:	fa21 f303 	lsr.w	r3, r1, r3
 800317a:	4a08      	ldr	r2, [pc, #32]	; (800319c <HAL_RCC_ClockConfig+0x2f0>)
 800317c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800317e:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <HAL_RCC_ClockConfig+0x2f4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe f82e 	bl	80011e4 <HAL_InitTick>
  
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3778      	adds	r7, #120	; 0x78
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	08008424 	.word	0x08008424
 800319c:	2000000c 	.word	0x2000000c
 80031a0:	20000010 	.word	0x20000010

080031a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b08b      	sub	sp, #44	; 0x2c
 80031a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	2300      	movs	r3, #0
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80031be:	4b29      	ldr	r3, [pc, #164]	; (8003264 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d002      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0x30>
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d003      	beq.n	80031da <HAL_RCC_GetSysClockFreq+0x36>
 80031d2:	e03c      	b.n	800324e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031d4:	4b24      	ldr	r3, [pc, #144]	; (8003268 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031d6:	623b      	str	r3, [r7, #32]
      break;
 80031d8:	e03c      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80031e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80031e4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	fa92 f2a2 	rbit	r2, r2
 80031ec:	607a      	str	r2, [r7, #4]
  return result;
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	fab2 f282 	clz	r2, r2
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	40d3      	lsrs	r3, r2
 80031f8:	4a1c      	ldr	r2, [pc, #112]	; (800326c <HAL_RCC_GetSysClockFreq+0xc8>)
 80031fa:	5cd3      	ldrb	r3, [r2, r3]
 80031fc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80031fe:	4b19      	ldr	r3, [pc, #100]	; (8003264 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	220f      	movs	r2, #15
 8003208:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	fa92 f2a2 	rbit	r2, r2
 8003210:	60fa      	str	r2, [r7, #12]
  return result;
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	fab2 f282 	clz	r2, r2
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	40d3      	lsrs	r3, r2
 800321c:	4a14      	ldr	r2, [pc, #80]	; (8003270 <HAL_RCC_GetSysClockFreq+0xcc>)
 800321e:	5cd3      	ldrb	r3, [r2, r3]
 8003220:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800322c:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <HAL_RCC_GetSysClockFreq+0xc4>)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	fbb2 f2f3 	udiv	r2, r2, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	fb02 f303 	mul.w	r3, r2, r3
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
 800323c:	e004      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	4a0c      	ldr	r2, [pc, #48]	; (8003274 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003242:	fb02 f303 	mul.w	r3, r2, r3
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	623b      	str	r3, [r7, #32]
      break;
 800324c:	e002      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003250:	623b      	str	r3, [r7, #32]
      break;
 8003252:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003254:	6a3b      	ldr	r3, [r7, #32]
}
 8003256:	4618      	mov	r0, r3
 8003258:	372c      	adds	r7, #44	; 0x2c
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	007a1200 	.word	0x007a1200
 800326c:	0800843c 	.word	0x0800843c
 8003270:	0800844c 	.word	0x0800844c
 8003274:	003d0900 	.word	0x003d0900

08003278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800327c:	4b03      	ldr	r3, [pc, #12]	; (800328c <HAL_RCC_GetHCLKFreq+0x14>)
 800327e:	681b      	ldr	r3, [r3, #0]
}
 8003280:	4618      	mov	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	2000000c 	.word	0x2000000c

08003290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003296:	f7ff ffef 	bl	8003278 <HAL_RCC_GetHCLKFreq>
 800329a:	4601      	mov	r1, r0
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032a4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80032a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	fa92 f2a2 	rbit	r2, r2
 80032b0:	603a      	str	r2, [r7, #0]
  return result;
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	fab2 f282 	clz	r2, r2
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	40d3      	lsrs	r3, r2
 80032bc:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80032be:	5cd3      	ldrb	r3, [r2, r3]
 80032c0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40021000 	.word	0x40021000
 80032d0:	08008434 	.word	0x08008434

080032d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80032da:	f7ff ffcd 	bl	8003278 <HAL_RCC_GetHCLKFreq>
 80032de:	4601      	mov	r1, r0
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80032e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80032ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	fa92 f2a2 	rbit	r2, r2
 80032f4:	603a      	str	r2, [r7, #0]
  return result;
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	fab2 f282 	clz	r2, r2
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	40d3      	lsrs	r3, r2
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003302:	5cd3      	ldrb	r3, [r2, r3]
 8003304:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40021000 	.word	0x40021000
 8003314:	08008434 	.word	0x08008434

08003318 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	220f      	movs	r2, #15
 8003326:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003328:	4b12      	ldr	r3, [pc, #72]	; (8003374 <HAL_RCC_GetClockConfig+0x5c>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 0203 	and.w	r2, r3, #3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <HAL_RCC_GetClockConfig+0x5c>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <HAL_RCC_GetClockConfig+0x5c>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCC_GetClockConfig+0x5c>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	08db      	lsrs	r3, r3, #3
 8003352:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800335a:	4b07      	ldr	r3, [pc, #28]	; (8003378 <HAL_RCC_GetClockConfig+0x60>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0207 	and.w	r2, r3, #7
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	601a      	str	r2, [r3, #0]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	40022000 	.word	0x40022000

0800337c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b092      	sub	sp, #72	; 0x48
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800338c:	2300      	movs	r3, #0
 800338e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80d4 	beq.w	8003548 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a0:	4b4e      	ldr	r3, [pc, #312]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10e      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ac:	4b4b      	ldr	r3, [pc, #300]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	4a4a      	ldr	r2, [pc, #296]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b6:	61d3      	str	r3, [r2, #28]
 80033b8:	4b48      	ldr	r3, [pc, #288]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ca:	4b45      	ldr	r3, [pc, #276]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d118      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d6:	4b42      	ldr	r3, [pc, #264]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a41      	ldr	r2, [pc, #260]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e2:	f7fe f835 	bl	8001450 <HAL_GetTick>
 80033e6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	e008      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ea:	f7fe f831 	bl	8001450 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b64      	cmp	r3, #100	; 0x64
 80033f6:	d901      	bls.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e169      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	4b38      	ldr	r3, [pc, #224]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003408:	4b34      	ldr	r3, [pc, #208]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003410:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8084 	beq.w	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003422:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003424:	429a      	cmp	r2, r3
 8003426:	d07c      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003428:	4b2c      	ldr	r3, [pc, #176]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003430:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003436:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	461a      	mov	r2, r3
 800344a:	4b26      	ldr	r3, [pc, #152]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	461a      	mov	r2, r3
 8003452:	2301      	movs	r3, #1
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800345a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	461a      	mov	r2, r3
 8003476:	2300      	movs	r3, #0
 8003478:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800347a:	4a18      	ldr	r2, [pc, #96]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d04b      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348a:	f7fd ffe1 	bl	8001450 <HAL_GetTick>
 800348e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003490:	e00a      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003492:	f7fd ffdd 	bl	8001450 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e113      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80034a8:	2302      	movs	r3, #2
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
 80034b4:	2302      	movs	r3, #2
 80034b6:	623b      	str	r3, [r7, #32]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	61fb      	str	r3, [r7, #28]
  return result;
 80034c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	f043 0302 	orr.w	r3, r3, #2
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d108      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80034d6:	4b01      	ldr	r3, [pc, #4]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	e00d      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40007000 	.word	0x40007000
 80034e4:	10908100 	.word	0x10908100
 80034e8:	2302      	movs	r3, #2
 80034ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	fa93 f3a3 	rbit	r3, r3
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	4b78      	ldr	r3, [pc, #480]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	2202      	movs	r2, #2
 80034fa:	613a      	str	r2, [r7, #16]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	fa92 f2a2 	rbit	r2, r2
 8003502:	60fa      	str	r2, [r7, #12]
  return result;
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	fab2 f282 	clz	r2, r2
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	f002 021f 	and.w	r2, r2, #31
 8003516:	2101      	movs	r1, #1
 8003518:	fa01 f202 	lsl.w	r2, r1, r2
 800351c:	4013      	ands	r3, r2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0b7      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003522:	4b6d      	ldr	r3, [pc, #436]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	496a      	ldr	r1, [pc, #424]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003530:	4313      	orrs	r3, r2
 8003532:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003534:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003538:	2b01      	cmp	r3, #1
 800353a:	d105      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353c:	4b66      	ldr	r3, [pc, #408]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	4a65      	ldr	r2, [pc, #404]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003546:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003554:	4b60      	ldr	r3, [pc, #384]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	f023 0203 	bic.w	r2, r3, #3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	495d      	ldr	r1, [pc, #372]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003562:	4313      	orrs	r3, r2
 8003564:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d008      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003572:	4b59      	ldr	r3, [pc, #356]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	4956      	ldr	r1, [pc, #344]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003580:	4313      	orrs	r3, r2
 8003582:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003590:	4b51      	ldr	r3, [pc, #324]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	494e      	ldr	r1, [pc, #312]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ae:	4b4a      	ldr	r3, [pc, #296]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f023 0210 	bic.w	r2, r3, #16
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	4947      	ldr	r1, [pc, #284]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80035cc:	4b42      	ldr	r3, [pc, #264]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	493f      	ldr	r1, [pc, #252]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ea:	4b3b      	ldr	r3, [pc, #236]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	f023 0220 	bic.w	r2, r3, #32
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	4938      	ldr	r1, [pc, #224]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003608:	4b33      	ldr	r3, [pc, #204]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	4930      	ldr	r1, [pc, #192]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003616:	4313      	orrs	r3, r2
 8003618:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003626:	4b2c      	ldr	r3, [pc, #176]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	4929      	ldr	r1, [pc, #164]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003634:	4313      	orrs	r3, r2
 8003636:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003644:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	4921      	ldr	r1, [pc, #132]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003652:	4313      	orrs	r3, r2
 8003654:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003662:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	491a      	ldr	r1, [pc, #104]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003670:	4313      	orrs	r3, r2
 8003672:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003680:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	4912      	ldr	r1, [pc, #72]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800368e:	4313      	orrs	r3, r2
 8003690:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800369e:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	490b      	ldr	r1, [pc, #44]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c8:	4903      	ldr	r1, [pc, #12]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3748      	adds	r7, #72	; 0x48
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40021000 	.word	0x40021000

080036dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e09d      	b.n	800382a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d108      	bne.n	8003708 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036fe:	d009      	beq.n	8003714 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	61da      	str	r2, [r3, #28]
 8003706:	e005      	b.n	8003714 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fd fc86 	bl	8001040 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003754:	d902      	bls.n	800375c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	e002      	b.n	8003762 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800375c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003760:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800376a:	d007      	beq.n	800377c <HAL_SPI_Init+0xa0>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003774:	d002      	beq.n	800377c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	ea42 0103 	orr.w	r1, r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	0c1b      	lsrs	r3, r3, #16
 80037d8:	f003 0204 	and.w	r2, r3, #4
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80037f8:	ea42 0103 	orr.w	r1, r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003818:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e049      	b.n	80038d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f841 	bl	80038e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3304      	adds	r3, #4
 800386e:	4619      	mov	r1, r3
 8003870:	4610      	mov	r0, r2
 8003872:	f000 f9f1 	bl	8003c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d001      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e04a      	b.n	80039a2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a21      	ldr	r2, [pc, #132]	; (80039b0 <HAL_TIM_Base_Start_IT+0xbc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d018      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x6c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003936:	d013      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x6c>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00e      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x6c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1c      	ldr	r2, [pc, #112]	; (80039b8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d009      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x6c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1a      	ldr	r2, [pc, #104]	; (80039bc <HAL_TIM_Base_Start_IT+0xc8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d004      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x6c>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a19      	ldr	r2, [pc, #100]	; (80039c0 <HAL_TIM_Base_Start_IT+0xcc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d115      	bne.n	800398c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	4b17      	ldr	r3, [pc, #92]	; (80039c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003968:	4013      	ands	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b06      	cmp	r3, #6
 8003970:	d015      	beq.n	800399e <HAL_TIM_Base_Start_IT+0xaa>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003978:	d011      	beq.n	800399e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0201 	orr.w	r2, r2, #1
 8003988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398a:	e008      	b.n	800399e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0201 	orr.w	r2, r2, #1
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	e000      	b.n	80039a0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800399e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40012c00 	.word	0x40012c00
 80039b4:	40000400 	.word	0x40000400
 80039b8:	40000800 	.word	0x40000800
 80039bc:	40013400 	.word	0x40013400
 80039c0:	40014000 	.word	0x40014000
 80039c4:	00010007 	.word	0x00010007

080039c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d122      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d11b      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0202 	mvn.w	r2, #2
 80039f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f905 	bl	8003c1a <HAL_TIM_IC_CaptureCallback>
 8003a10:	e005      	b.n	8003a1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f8f7 	bl	8003c06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f908 	bl	8003c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d122      	bne.n	8003a78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d11b      	bne.n	8003a78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0204 	mvn.w	r2, #4
 8003a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f8db 	bl	8003c1a <HAL_TIM_IC_CaptureCallback>
 8003a64:	e005      	b.n	8003a72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f8cd 	bl	8003c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f8de 	bl	8003c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d122      	bne.n	8003acc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d11b      	bne.n	8003acc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0208 	mvn.w	r2, #8
 8003a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2204      	movs	r2, #4
 8003aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f8b1 	bl	8003c1a <HAL_TIM_IC_CaptureCallback>
 8003ab8:	e005      	b.n	8003ac6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f8a3 	bl	8003c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f8b4 	bl	8003c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d122      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d11b      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0210 	mvn.w	r2, #16
 8003af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2208      	movs	r2, #8
 8003af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f887 	bl	8003c1a <HAL_TIM_IC_CaptureCallback>
 8003b0c:	e005      	b.n	8003b1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f879 	bl	8003c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f88a 	bl	8003c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d10e      	bne.n	8003b4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d107      	bne.n	8003b4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0201 	mvn.w	r2, #1
 8003b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fd f9f6 	bl	8000f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	d10e      	bne.n	8003b78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b64:	2b80      	cmp	r3, #128	; 0x80
 8003b66:	d107      	bne.n	8003b78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f90a 	bl	8003d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b86:	d10e      	bne.n	8003ba6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b92:	2b80      	cmp	r3, #128	; 0x80
 8003b94:	d107      	bne.n	8003ba6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f8fd 	bl	8003da0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb0:	2b40      	cmp	r3, #64	; 0x40
 8003bb2:	d10e      	bne.n	8003bd2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d107      	bne.n	8003bd2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f838 	bl	8003c42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d10e      	bne.n	8003bfe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	d107      	bne.n	8003bfe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f06f 0220 	mvn.w	r2, #32
 8003bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f8bd 	bl	8003d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a3c      	ldr	r2, [pc, #240]	; (8003d5c <TIM_Base_SetConfig+0x104>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00f      	beq.n	8003c90 <TIM_Base_SetConfig+0x38>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c76:	d00b      	beq.n	8003c90 <TIM_Base_SetConfig+0x38>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a39      	ldr	r2, [pc, #228]	; (8003d60 <TIM_Base_SetConfig+0x108>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d007      	beq.n	8003c90 <TIM_Base_SetConfig+0x38>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a38      	ldr	r2, [pc, #224]	; (8003d64 <TIM_Base_SetConfig+0x10c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d003      	beq.n	8003c90 <TIM_Base_SetConfig+0x38>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a37      	ldr	r2, [pc, #220]	; (8003d68 <TIM_Base_SetConfig+0x110>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d108      	bne.n	8003ca2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a2d      	ldr	r2, [pc, #180]	; (8003d5c <TIM_Base_SetConfig+0x104>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d01b      	beq.n	8003ce2 <TIM_Base_SetConfig+0x8a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb0:	d017      	beq.n	8003ce2 <TIM_Base_SetConfig+0x8a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a2a      	ldr	r2, [pc, #168]	; (8003d60 <TIM_Base_SetConfig+0x108>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d013      	beq.n	8003ce2 <TIM_Base_SetConfig+0x8a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a29      	ldr	r2, [pc, #164]	; (8003d64 <TIM_Base_SetConfig+0x10c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00f      	beq.n	8003ce2 <TIM_Base_SetConfig+0x8a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a28      	ldr	r2, [pc, #160]	; (8003d68 <TIM_Base_SetConfig+0x110>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00b      	beq.n	8003ce2 <TIM_Base_SetConfig+0x8a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a27      	ldr	r2, [pc, #156]	; (8003d6c <TIM_Base_SetConfig+0x114>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d007      	beq.n	8003ce2 <TIM_Base_SetConfig+0x8a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a26      	ldr	r2, [pc, #152]	; (8003d70 <TIM_Base_SetConfig+0x118>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d003      	beq.n	8003ce2 <TIM_Base_SetConfig+0x8a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a25      	ldr	r2, [pc, #148]	; (8003d74 <TIM_Base_SetConfig+0x11c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d108      	bne.n	8003cf4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a10      	ldr	r2, [pc, #64]	; (8003d5c <TIM_Base_SetConfig+0x104>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00f      	beq.n	8003d40 <TIM_Base_SetConfig+0xe8>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a11      	ldr	r2, [pc, #68]	; (8003d68 <TIM_Base_SetConfig+0x110>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00b      	beq.n	8003d40 <TIM_Base_SetConfig+0xe8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a10      	ldr	r2, [pc, #64]	; (8003d6c <TIM_Base_SetConfig+0x114>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d007      	beq.n	8003d40 <TIM_Base_SetConfig+0xe8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a0f      	ldr	r2, [pc, #60]	; (8003d70 <TIM_Base_SetConfig+0x118>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d003      	beq.n	8003d40 <TIM_Base_SetConfig+0xe8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a0e      	ldr	r2, [pc, #56]	; (8003d74 <TIM_Base_SetConfig+0x11c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d103      	bne.n	8003d48 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	615a      	str	r2, [r3, #20]
}
 8003d4e:	bf00      	nop
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40012c00 	.word	0x40012c00
 8003d60:	40000400 	.word	0x40000400
 8003d64:	40000800 	.word	0x40000800
 8003d68:	40013400 	.word	0x40013400
 8003d6c:	40014000 	.word	0x40014000
 8003d70:	40014400 	.word	0x40014400
 8003d74:	40014800 	.word	0x40014800

08003d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e040      	b.n	8003e48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fd f974 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2224      	movs	r2, #36	; 0x24
 8003de0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fc00 	bl	80045f8 <UART_SetConfig>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e022      	b.n	8003e48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fdc8 	bl	80049a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fe4f 	bl	8004ae4 <UART_CheckIdleState>
 8003e46:	4603      	mov	r3, r0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08a      	sub	sp, #40	; 0x28
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d178      	bne.n	8003f5a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_UART_Transmit+0x24>
 8003e6e:	88fb      	ldrh	r3, [r7, #6]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e071      	b.n	8003f5c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2221      	movs	r2, #33	; 0x21
 8003e84:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e86:	f7fd fae3 	bl	8001450 <HAL_GetTick>
 8003e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	88fa      	ldrh	r2, [r7, #6]
 8003e98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea4:	d108      	bne.n	8003eb8 <HAL_UART_Transmit+0x68>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d104      	bne.n	8003eb8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	61bb      	str	r3, [r7, #24]
 8003eb6:	e003      	b.n	8003ec0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ec0:	e030      	b.n	8003f24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2180      	movs	r1, #128	; 0x80
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 feb1 	bl	8004c34 <UART_WaitOnFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d004      	beq.n	8003ee2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e03c      	b.n	8003f5c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10b      	bne.n	8003f00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	881a      	ldrh	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef4:	b292      	uxth	r2, r2
 8003ef6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	3302      	adds	r3, #2
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	e008      	b.n	8003f12 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	781a      	ldrb	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	b292      	uxth	r2, r2
 8003f0a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1c8      	bne.n	8003ec2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2200      	movs	r2, #0
 8003f38:	2140      	movs	r1, #64	; 0x40
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 fe7a 	bl	8004c34 <UART_WaitOnFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d004      	beq.n	8003f50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e005      	b.n	8003f5c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	e000      	b.n	8003f5c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003f5a:	2302      	movs	r3, #2
  }
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3720      	adds	r7, #32
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	; 0x28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d132      	bne.n	8003fe2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <HAL_UART_Receive_IT+0x24>
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e02b      	b.n	8003fe4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d018      	beq.n	8003fd2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	613b      	str	r3, [r7, #16]
   return(result);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	623b      	str	r3, [r7, #32]
 8003fc0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	69f9      	ldr	r1, [r7, #28]
 8003fc4:	6a3a      	ldr	r2, [r7, #32]
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e6      	bne.n	8003fa0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 fe93 	bl	8004d04 <UART_Start_Receive_IT>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	e000      	b.n	8003fe4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003fe2:	2302      	movs	r3, #2
  }
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3728      	adds	r7, #40	; 0x28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b0ba      	sub	sp, #232	; 0xe8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004012:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004016:	f640 030f 	movw	r3, #2063	; 0x80f
 800401a:	4013      	ands	r3, r2
 800401c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d115      	bne.n	8004054 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00f      	beq.n	8004054 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d009      	beq.n	8004054 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 82ab 	beq.w	80045a0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	4798      	blx	r3
      }
      return;
 8004052:	e2a5      	b.n	80045a0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004054:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 8117 	beq.w	800428c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800405e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800406a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800406e:	4b85      	ldr	r3, [pc, #532]	; (8004284 <HAL_UART_IRQHandler+0x298>)
 8004070:	4013      	ands	r3, r2
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 810a 	beq.w	800428c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d011      	beq.n	80040a8 <HAL_UART_IRQHandler+0xbc>
 8004084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00b      	beq.n	80040a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2201      	movs	r2, #1
 8004096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800409e:	f043 0201 	orr.w	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d011      	beq.n	80040d8 <HAL_UART_IRQHandler+0xec>
 80040b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00b      	beq.n	80040d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2202      	movs	r2, #2
 80040c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ce:	f043 0204 	orr.w	r2, r3, #4
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d011      	beq.n	8004108 <HAL_UART_IRQHandler+0x11c>
 80040e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00b      	beq.n	8004108 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2204      	movs	r2, #4
 80040f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040fe:	f043 0202 	orr.w	r2, r3, #2
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d017      	beq.n	8004144 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b00      	cmp	r3, #0
 800411e:	d105      	bne.n	800412c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004124:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00b      	beq.n	8004144 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2208      	movs	r2, #8
 8004132:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800413a:	f043 0208 	orr.w	r2, r3, #8
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414c:	2b00      	cmp	r3, #0
 800414e:	d012      	beq.n	8004176 <HAL_UART_IRQHandler+0x18a>
 8004150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004154:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00c      	beq.n	8004176 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004164:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800416c:	f043 0220 	orr.w	r2, r3, #32
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 8211 	beq.w	80045a4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00d      	beq.n	80041aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800418e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041be:	2b40      	cmp	r3, #64	; 0x40
 80041c0:	d005      	beq.n	80041ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d04f      	beq.n	800426e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fe4c 	bl	8004e6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b40      	cmp	r3, #64	; 0x40
 80041e0:	d141      	bne.n	8004266 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3308      	adds	r3, #8
 80041e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004200:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3308      	adds	r3, #8
 800420a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800420e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004216:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800421a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800421e:	e841 2300 	strex	r3, r2, [r1]
 8004222:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1d9      	bne.n	80041e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004232:	2b00      	cmp	r3, #0
 8004234:	d013      	beq.n	800425e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800423a:	4a13      	ldr	r2, [pc, #76]	; (8004288 <HAL_UART_IRQHandler+0x29c>)
 800423c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004242:	4618      	mov	r0, r3
 8004244:	f7fd fa2b 	bl	800169e <HAL_DMA_Abort_IT>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d017      	beq.n	800427e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004258:	4610      	mov	r0, r2
 800425a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800425c:	e00f      	b.n	800427e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f9b4 	bl	80045cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004264:	e00b      	b.n	800427e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f9b0 	bl	80045cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800426c:	e007      	b.n	800427e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f9ac 	bl	80045cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800427c:	e192      	b.n	80045a4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800427e:	bf00      	nop
    return;
 8004280:	e190      	b.n	80045a4 <HAL_UART_IRQHandler+0x5b8>
 8004282:	bf00      	nop
 8004284:	04000120 	.word	0x04000120
 8004288:	08004f35 	.word	0x08004f35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004290:	2b01      	cmp	r3, #1
 8004292:	f040 814b 	bne.w	800452c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8144 	beq.w	800452c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80042a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a8:	f003 0310 	and.w	r3, r3, #16
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 813d 	beq.w	800452c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2210      	movs	r2, #16
 80042b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c4:	2b40      	cmp	r3, #64	; 0x40
 80042c6:	f040 80b5 	bne.w	8004434 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 8164 	beq.w	80045a8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042ea:	429a      	cmp	r2, r3
 80042ec:	f080 815c 	bcs.w	80045a8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	2b20      	cmp	r3, #32
 8004302:	f000 8086 	beq.w	8004412 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800431a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800431e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004322:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004330:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004334:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800433c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004340:	e841 2300 	strex	r3, r2, [r1]
 8004344:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004348:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1da      	bne.n	8004306 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3308      	adds	r3, #8
 8004356:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004362:	f023 0301 	bic.w	r3, r3, #1
 8004366:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3308      	adds	r3, #8
 8004370:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004374:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004378:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800437c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e1      	bne.n	8004350 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3308      	adds	r3, #8
 8004392:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800439c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800439e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3308      	adds	r3, #8
 80043ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e3      	bne.n	800438c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e2:	f023 0310 	bic.w	r3, r3, #16
 80043e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80043f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e4      	bne.n	80043d2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440c:	4618      	mov	r0, r3
 800440e:	f7fd f90d 	bl	800162c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2202      	movs	r2, #2
 8004416:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004424:	b29b      	uxth	r3, r3
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	b29b      	uxth	r3, r3
 800442a:	4619      	mov	r1, r3
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f8d7 	bl	80045e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004432:	e0b9      	b.n	80045a8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004440:	b29b      	uxth	r3, r3
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80ab 	beq.w	80045ac <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004456:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 80a6 	beq.w	80045ac <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800446e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004470:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004474:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004482:	647b      	str	r3, [r7, #68]	; 0x44
 8004484:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004486:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004488:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800448a:	e841 2300 	strex	r3, r2, [r1]
 800448e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1e4      	bne.n	8004460 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3308      	adds	r3, #8
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	e853 3f00 	ldrex	r3, [r3]
 80044a4:	623b      	str	r3, [r7, #32]
   return(result);
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3308      	adds	r3, #8
 80044b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044ba:	633a      	str	r2, [r7, #48]	; 0x30
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e3      	bne.n	8004496 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0310 	bic.w	r3, r3, #16
 80044f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004508:	69b9      	ldr	r1, [r7, #24]
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	e841 2300 	strex	r3, r2, [r1]
 8004510:	617b      	str	r3, [r7, #20]
   return(result);
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1e4      	bne.n	80044e2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800451e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004522:	4619      	mov	r1, r3
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f85b 	bl	80045e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800452a:	e03f      	b.n	80045ac <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800452c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00e      	beq.n	8004556 <HAL_UART_IRQHandler+0x56a>
 8004538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800453c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d008      	beq.n	8004556 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800454c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fed8 	bl	8005304 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004554:	e02d      	b.n	80045b2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00e      	beq.n	8004580 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456a:	2b00      	cmp	r3, #0
 800456c:	d008      	beq.n	8004580 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004572:	2b00      	cmp	r3, #0
 8004574:	d01c      	beq.n	80045b0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	4798      	blx	r3
    }
    return;
 800457e:	e017      	b.n	80045b0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004588:	2b00      	cmp	r3, #0
 800458a:	d012      	beq.n	80045b2 <HAL_UART_IRQHandler+0x5c6>
 800458c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00c      	beq.n	80045b2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 fce1 	bl	8004f60 <UART_EndTransmit_IT>
    return;
 800459e:	e008      	b.n	80045b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80045a0:	bf00      	nop
 80045a2:	e006      	b.n	80045b2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80045a4:	bf00      	nop
 80045a6:	e004      	b.n	80045b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80045a8:	bf00      	nop
 80045aa:	e002      	b.n	80045b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80045ac:	bf00      	nop
 80045ae:	e000      	b.n	80045b2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80045b0:	bf00      	nop
  }

}
 80045b2:	37e8      	adds	r7, #232	; 0xe8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	4313      	orrs	r3, r2
 800461a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004626:	f023 030c 	bic.w	r3, r3, #12
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6812      	ldr	r2, [r2, #0]
 800462e:	6979      	ldr	r1, [r7, #20]
 8004630:	430b      	orrs	r3, r1
 8004632:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	430a      	orrs	r2, r1
 800466c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4aa7      	ldr	r2, [pc, #668]	; (8004910 <UART_SetConfig+0x318>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d120      	bne.n	80046ba <UART_SetConfig+0xc2>
 8004678:	4ba6      	ldr	r3, [pc, #664]	; (8004914 <UART_SetConfig+0x31c>)
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	2b03      	cmp	r3, #3
 8004682:	d817      	bhi.n	80046b4 <UART_SetConfig+0xbc>
 8004684:	a201      	add	r2, pc, #4	; (adr r2, 800468c <UART_SetConfig+0x94>)
 8004686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468a:	bf00      	nop
 800468c:	0800469d 	.word	0x0800469d
 8004690:	080046a9 	.word	0x080046a9
 8004694:	080046af 	.word	0x080046af
 8004698:	080046a3 	.word	0x080046a3
 800469c:	2301      	movs	r3, #1
 800469e:	77fb      	strb	r3, [r7, #31]
 80046a0:	e0b5      	b.n	800480e <UART_SetConfig+0x216>
 80046a2:	2302      	movs	r3, #2
 80046a4:	77fb      	strb	r3, [r7, #31]
 80046a6:	e0b2      	b.n	800480e <UART_SetConfig+0x216>
 80046a8:	2304      	movs	r3, #4
 80046aa:	77fb      	strb	r3, [r7, #31]
 80046ac:	e0af      	b.n	800480e <UART_SetConfig+0x216>
 80046ae:	2308      	movs	r3, #8
 80046b0:	77fb      	strb	r3, [r7, #31]
 80046b2:	e0ac      	b.n	800480e <UART_SetConfig+0x216>
 80046b4:	2310      	movs	r3, #16
 80046b6:	77fb      	strb	r3, [r7, #31]
 80046b8:	e0a9      	b.n	800480e <UART_SetConfig+0x216>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a96      	ldr	r2, [pc, #600]	; (8004918 <UART_SetConfig+0x320>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d124      	bne.n	800470e <UART_SetConfig+0x116>
 80046c4:	4b93      	ldr	r3, [pc, #588]	; (8004914 <UART_SetConfig+0x31c>)
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046d0:	d011      	beq.n	80046f6 <UART_SetConfig+0xfe>
 80046d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046d6:	d817      	bhi.n	8004708 <UART_SetConfig+0x110>
 80046d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046dc:	d011      	beq.n	8004702 <UART_SetConfig+0x10a>
 80046de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046e2:	d811      	bhi.n	8004708 <UART_SetConfig+0x110>
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <UART_SetConfig+0xf8>
 80046e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ec:	d006      	beq.n	80046fc <UART_SetConfig+0x104>
 80046ee:	e00b      	b.n	8004708 <UART_SetConfig+0x110>
 80046f0:	2300      	movs	r3, #0
 80046f2:	77fb      	strb	r3, [r7, #31]
 80046f4:	e08b      	b.n	800480e <UART_SetConfig+0x216>
 80046f6:	2302      	movs	r3, #2
 80046f8:	77fb      	strb	r3, [r7, #31]
 80046fa:	e088      	b.n	800480e <UART_SetConfig+0x216>
 80046fc:	2304      	movs	r3, #4
 80046fe:	77fb      	strb	r3, [r7, #31]
 8004700:	e085      	b.n	800480e <UART_SetConfig+0x216>
 8004702:	2308      	movs	r3, #8
 8004704:	77fb      	strb	r3, [r7, #31]
 8004706:	e082      	b.n	800480e <UART_SetConfig+0x216>
 8004708:	2310      	movs	r3, #16
 800470a:	77fb      	strb	r3, [r7, #31]
 800470c:	e07f      	b.n	800480e <UART_SetConfig+0x216>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a82      	ldr	r2, [pc, #520]	; (800491c <UART_SetConfig+0x324>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d124      	bne.n	8004762 <UART_SetConfig+0x16a>
 8004718:	4b7e      	ldr	r3, [pc, #504]	; (8004914 <UART_SetConfig+0x31c>)
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004720:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004724:	d011      	beq.n	800474a <UART_SetConfig+0x152>
 8004726:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800472a:	d817      	bhi.n	800475c <UART_SetConfig+0x164>
 800472c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004730:	d011      	beq.n	8004756 <UART_SetConfig+0x15e>
 8004732:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004736:	d811      	bhi.n	800475c <UART_SetConfig+0x164>
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <UART_SetConfig+0x14c>
 800473c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004740:	d006      	beq.n	8004750 <UART_SetConfig+0x158>
 8004742:	e00b      	b.n	800475c <UART_SetConfig+0x164>
 8004744:	2300      	movs	r3, #0
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e061      	b.n	800480e <UART_SetConfig+0x216>
 800474a:	2302      	movs	r3, #2
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	e05e      	b.n	800480e <UART_SetConfig+0x216>
 8004750:	2304      	movs	r3, #4
 8004752:	77fb      	strb	r3, [r7, #31]
 8004754:	e05b      	b.n	800480e <UART_SetConfig+0x216>
 8004756:	2308      	movs	r3, #8
 8004758:	77fb      	strb	r3, [r7, #31]
 800475a:	e058      	b.n	800480e <UART_SetConfig+0x216>
 800475c:	2310      	movs	r3, #16
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e055      	b.n	800480e <UART_SetConfig+0x216>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a6e      	ldr	r2, [pc, #440]	; (8004920 <UART_SetConfig+0x328>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d124      	bne.n	80047b6 <UART_SetConfig+0x1be>
 800476c:	4b69      	ldr	r3, [pc, #420]	; (8004914 <UART_SetConfig+0x31c>)
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004774:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004778:	d011      	beq.n	800479e <UART_SetConfig+0x1a6>
 800477a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800477e:	d817      	bhi.n	80047b0 <UART_SetConfig+0x1b8>
 8004780:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004784:	d011      	beq.n	80047aa <UART_SetConfig+0x1b2>
 8004786:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800478a:	d811      	bhi.n	80047b0 <UART_SetConfig+0x1b8>
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <UART_SetConfig+0x1a0>
 8004790:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004794:	d006      	beq.n	80047a4 <UART_SetConfig+0x1ac>
 8004796:	e00b      	b.n	80047b0 <UART_SetConfig+0x1b8>
 8004798:	2300      	movs	r3, #0
 800479a:	77fb      	strb	r3, [r7, #31]
 800479c:	e037      	b.n	800480e <UART_SetConfig+0x216>
 800479e:	2302      	movs	r3, #2
 80047a0:	77fb      	strb	r3, [r7, #31]
 80047a2:	e034      	b.n	800480e <UART_SetConfig+0x216>
 80047a4:	2304      	movs	r3, #4
 80047a6:	77fb      	strb	r3, [r7, #31]
 80047a8:	e031      	b.n	800480e <UART_SetConfig+0x216>
 80047aa:	2308      	movs	r3, #8
 80047ac:	77fb      	strb	r3, [r7, #31]
 80047ae:	e02e      	b.n	800480e <UART_SetConfig+0x216>
 80047b0:	2310      	movs	r3, #16
 80047b2:	77fb      	strb	r3, [r7, #31]
 80047b4:	e02b      	b.n	800480e <UART_SetConfig+0x216>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a5a      	ldr	r2, [pc, #360]	; (8004924 <UART_SetConfig+0x32c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d124      	bne.n	800480a <UART_SetConfig+0x212>
 80047c0:	4b54      	ldr	r3, [pc, #336]	; (8004914 <UART_SetConfig+0x31c>)
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80047c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047cc:	d011      	beq.n	80047f2 <UART_SetConfig+0x1fa>
 80047ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047d2:	d817      	bhi.n	8004804 <UART_SetConfig+0x20c>
 80047d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047d8:	d011      	beq.n	80047fe <UART_SetConfig+0x206>
 80047da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047de:	d811      	bhi.n	8004804 <UART_SetConfig+0x20c>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <UART_SetConfig+0x1f4>
 80047e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047e8:	d006      	beq.n	80047f8 <UART_SetConfig+0x200>
 80047ea:	e00b      	b.n	8004804 <UART_SetConfig+0x20c>
 80047ec:	2300      	movs	r3, #0
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e00d      	b.n	800480e <UART_SetConfig+0x216>
 80047f2:	2302      	movs	r3, #2
 80047f4:	77fb      	strb	r3, [r7, #31]
 80047f6:	e00a      	b.n	800480e <UART_SetConfig+0x216>
 80047f8:	2304      	movs	r3, #4
 80047fa:	77fb      	strb	r3, [r7, #31]
 80047fc:	e007      	b.n	800480e <UART_SetConfig+0x216>
 80047fe:	2308      	movs	r3, #8
 8004800:	77fb      	strb	r3, [r7, #31]
 8004802:	e004      	b.n	800480e <UART_SetConfig+0x216>
 8004804:	2310      	movs	r3, #16
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e001      	b.n	800480e <UART_SetConfig+0x216>
 800480a:	2310      	movs	r3, #16
 800480c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004816:	d15b      	bne.n	80048d0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004818:	7ffb      	ldrb	r3, [r7, #31]
 800481a:	2b08      	cmp	r3, #8
 800481c:	d827      	bhi.n	800486e <UART_SetConfig+0x276>
 800481e:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <UART_SetConfig+0x22c>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	08004849 	.word	0x08004849
 8004828:	08004851 	.word	0x08004851
 800482c:	08004859 	.word	0x08004859
 8004830:	0800486f 	.word	0x0800486f
 8004834:	0800485f 	.word	0x0800485f
 8004838:	0800486f 	.word	0x0800486f
 800483c:	0800486f 	.word	0x0800486f
 8004840:	0800486f 	.word	0x0800486f
 8004844:	08004867 	.word	0x08004867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004848:	f7fe fd22 	bl	8003290 <HAL_RCC_GetPCLK1Freq>
 800484c:	61b8      	str	r0, [r7, #24]
        break;
 800484e:	e013      	b.n	8004878 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004850:	f7fe fd40 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 8004854:	61b8      	str	r0, [r7, #24]
        break;
 8004856:	e00f      	b.n	8004878 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004858:	4b33      	ldr	r3, [pc, #204]	; (8004928 <UART_SetConfig+0x330>)
 800485a:	61bb      	str	r3, [r7, #24]
        break;
 800485c:	e00c      	b.n	8004878 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485e:	f7fe fca1 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8004862:	61b8      	str	r0, [r7, #24]
        break;
 8004864:	e008      	b.n	8004878 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800486a:	61bb      	str	r3, [r7, #24]
        break;
 800486c:	e004      	b.n	8004878 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	77bb      	strb	r3, [r7, #30]
        break;
 8004876:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 8082 	beq.w	8004984 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	005a      	lsls	r2, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	441a      	add	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	fbb2 f3f3 	udiv	r3, r2, r3
 8004894:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	2b0f      	cmp	r3, #15
 800489a:	d916      	bls.n	80048ca <UART_SetConfig+0x2d2>
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a2:	d212      	bcs.n	80048ca <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	f023 030f 	bic.w	r3, r3, #15
 80048ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	89fb      	ldrh	r3, [r7, #14]
 80048bc:	4313      	orrs	r3, r2
 80048be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	89fa      	ldrh	r2, [r7, #14]
 80048c6:	60da      	str	r2, [r3, #12]
 80048c8:	e05c      	b.n	8004984 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	77bb      	strb	r3, [r7, #30]
 80048ce:	e059      	b.n	8004984 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048d0:	7ffb      	ldrb	r3, [r7, #31]
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d835      	bhi.n	8004942 <UART_SetConfig+0x34a>
 80048d6:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <UART_SetConfig+0x2e4>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004909 	.word	0x08004909
 80048e4:	0800492d 	.word	0x0800492d
 80048e8:	08004943 	.word	0x08004943
 80048ec:	08004933 	.word	0x08004933
 80048f0:	08004943 	.word	0x08004943
 80048f4:	08004943 	.word	0x08004943
 80048f8:	08004943 	.word	0x08004943
 80048fc:	0800493b 	.word	0x0800493b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004900:	f7fe fcc6 	bl	8003290 <HAL_RCC_GetPCLK1Freq>
 8004904:	61b8      	str	r0, [r7, #24]
        break;
 8004906:	e021      	b.n	800494c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004908:	f7fe fce4 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 800490c:	61b8      	str	r0, [r7, #24]
        break;
 800490e:	e01d      	b.n	800494c <UART_SetConfig+0x354>
 8004910:	40013800 	.word	0x40013800
 8004914:	40021000 	.word	0x40021000
 8004918:	40004400 	.word	0x40004400
 800491c:	40004800 	.word	0x40004800
 8004920:	40004c00 	.word	0x40004c00
 8004924:	40005000 	.word	0x40005000
 8004928:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800492c:	4b1b      	ldr	r3, [pc, #108]	; (800499c <UART_SetConfig+0x3a4>)
 800492e:	61bb      	str	r3, [r7, #24]
        break;
 8004930:	e00c      	b.n	800494c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004932:	f7fe fc37 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8004936:	61b8      	str	r0, [r7, #24]
        break;
 8004938:	e008      	b.n	800494c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800493a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800493e:	61bb      	str	r3, [r7, #24]
        break;
 8004940:	e004      	b.n	800494c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	77bb      	strb	r3, [r7, #30]
        break;
 800494a:	bf00      	nop
    }

    if (pclk != 0U)
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d018      	beq.n	8004984 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	085a      	lsrs	r2, r3, #1
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	441a      	add	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	fbb2 f3f3 	udiv	r3, r2, r3
 8004964:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	2b0f      	cmp	r3, #15
 800496a:	d909      	bls.n	8004980 <UART_SetConfig+0x388>
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004972:	d205      	bcs.n	8004980 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	b29a      	uxth	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60da      	str	r2, [r3, #12]
 800497e:	e001      	b.n	8004984 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004990:	7fbb      	ldrb	r3, [r7, #30]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3720      	adds	r7, #32
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	007a1200 	.word	0x007a1200

080049a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01a      	beq.n	8004ab6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a9e:	d10a      	bne.n	8004ab6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	605a      	str	r2, [r3, #4]
  }
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b098      	sub	sp, #96	; 0x60
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004af4:	f7fc fcac 	bl	8001450 <HAL_GetTick>
 8004af8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d12e      	bne.n	8004b66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b10:	2200      	movs	r2, #0
 8004b12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f88c 	bl	8004c34 <UART_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d021      	beq.n	8004b66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b36:	653b      	str	r3, [r7, #80]	; 0x50
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b40:	647b      	str	r3, [r7, #68]	; 0x44
 8004b42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e6      	bne.n	8004b22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e062      	b.n	8004c2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d149      	bne.n	8004c08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f856 	bl	8004c34 <UART_WaitOnFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d03c      	beq.n	8004c08 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bac:	633b      	str	r3, [r7, #48]	; 0x30
 8004bae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e6      	bne.n	8004b8e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	e853 3f00 	ldrex	r3, [r3]
 8004bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0301 	bic.w	r3, r3, #1
 8004bd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3308      	adds	r3, #8
 8004bde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004be0:	61fa      	str	r2, [r7, #28]
 8004be2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	69b9      	ldr	r1, [r7, #24]
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	e841 2300 	strex	r3, r2, [r1]
 8004bec:	617b      	str	r3, [r7, #20]
   return(result);
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e5      	bne.n	8004bc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e011      	b.n	8004c2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3758      	adds	r7, #88	; 0x58
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	603b      	str	r3, [r7, #0]
 8004c40:	4613      	mov	r3, r2
 8004c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c44:	e049      	b.n	8004cda <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d045      	beq.n	8004cda <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4e:	f7fc fbff 	bl	8001450 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d302      	bcc.n	8004c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e048      	b.n	8004cfa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0304 	and.w	r3, r3, #4
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d031      	beq.n	8004cda <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d110      	bne.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f8ed 	bl	8004e6c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2208      	movs	r2, #8
 8004c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e029      	b.n	8004cfa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb4:	d111      	bne.n	8004cda <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f8d3 	bl	8004e6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e00f      	b.n	8004cfa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	bf0c      	ite	eq
 8004cea:	2301      	moveq	r3, #1
 8004cec:	2300      	movne	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d0a6      	beq.n	8004c46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b097      	sub	sp, #92	; 0x5c
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	88fa      	ldrh	r2, [r7, #6]
 8004d1c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d36:	d10e      	bne.n	8004d56 <UART_Start_Receive_IT+0x52>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d105      	bne.n	8004d4c <UART_Start_Receive_IT+0x48>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d4a:	e01a      	b.n	8004d82 <UART_Start_Receive_IT+0x7e>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	22ff      	movs	r2, #255	; 0xff
 8004d50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d54:	e015      	b.n	8004d82 <UART_Start_Receive_IT+0x7e>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10d      	bne.n	8004d7a <UART_Start_Receive_IT+0x76>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d104      	bne.n	8004d70 <UART_Start_Receive_IT+0x6c>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	22ff      	movs	r2, #255	; 0xff
 8004d6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d6e:	e008      	b.n	8004d82 <UART_Start_Receive_IT+0x7e>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	227f      	movs	r2, #127	; 0x7f
 8004d74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d78:	e003      	b.n	8004d82 <UART_Start_Receive_IT+0x7e>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2222      	movs	r2, #34	; 0x22
 8004d8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3308      	adds	r3, #8
 8004d98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d9c:	e853 3f00 	ldrex	r3, [r3]
 8004da0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	657b      	str	r3, [r7, #84]	; 0x54
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3308      	adds	r3, #8
 8004db0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004db2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004db4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004db8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dba:	e841 2300 	strex	r3, r2, [r1]
 8004dbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1e5      	bne.n	8004d92 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dce:	d107      	bne.n	8004de0 <UART_Start_Receive_IT+0xdc>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d103      	bne.n	8004de0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4a22      	ldr	r2, [pc, #136]	; (8004e64 <UART_Start_Receive_IT+0x160>)
 8004ddc:	669a      	str	r2, [r3, #104]	; 0x68
 8004dde:	e002      	b.n	8004de6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4a21      	ldr	r2, [pc, #132]	; (8004e68 <UART_Start_Receive_IT+0x164>)
 8004de4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d019      	beq.n	8004e22 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e6      	bne.n	8004dee <UART_Start_Receive_IT+0xea>
 8004e20:	e018      	b.n	8004e54 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f043 0320 	orr.w	r3, r3, #32
 8004e36:	653b      	str	r3, [r7, #80]	; 0x50
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e40:	623b      	str	r3, [r7, #32]
 8004e42:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	69f9      	ldr	r1, [r7, #28]
 8004e46:	6a3a      	ldr	r2, [r7, #32]
 8004e48:	e841 2300 	strex	r3, r2, [r1]
 8004e4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e6      	bne.n	8004e22 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	375c      	adds	r7, #92	; 0x5c
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	0800515d 	.word	0x0800515d
 8004e68:	08004fb5 	.word	0x08004fb5

08004e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b095      	sub	sp, #84	; 0x54
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e92:	643b      	str	r3, [r7, #64]	; 0x40
 8004e94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e6      	bne.n	8004e74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ec6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e5      	bne.n	8004ea6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d118      	bne.n	8004f14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f023 0310 	bic.w	r3, r3, #16
 8004ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	461a      	mov	r2, r3
 8004efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f04:	6979      	ldr	r1, [r7, #20]
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	e841 2300 	strex	r3, r2, [r1]
 8004f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e6      	bne.n	8004ee2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f28:	bf00      	nop
 8004f2a:	3754      	adds	r7, #84	; 0x54
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7ff fb3a 	bl	80045cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f58:	bf00      	nop
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b088      	sub	sp, #32
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	e853 3f00 	ldrex	r3, [r3]
 8004f74:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	61bb      	str	r3, [r7, #24]
 8004f88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8a:	6979      	ldr	r1, [r7, #20]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	e841 2300 	strex	r3, r2, [r1]
 8004f92:	613b      	str	r3, [r7, #16]
   return(result);
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1e6      	bne.n	8004f68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7ff fb06 	bl	80045b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fac:	bf00      	nop
 8004fae:	3720      	adds	r7, #32
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b09c      	sub	sp, #112	; 0x70
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004fc2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fcc:	2b22      	cmp	r3, #34	; 0x22
 8004fce:	f040 80b9 	bne.w	8005144 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004fd8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004fdc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004fe0:	b2d9      	uxtb	r1, r3
 8004fe2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fec:	400a      	ands	r2, r1
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005002:	b29b      	uxth	r3, r3
 8005004:	3b01      	subs	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	f040 809c 	bne.w	8005154 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800502a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800502c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005030:	66bb      	str	r3, [r7, #104]	; 0x68
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800503a:	65bb      	str	r3, [r7, #88]	; 0x58
 800503c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005040:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e6      	bne.n	800501c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3308      	adds	r3, #8
 8005054:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800505e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005060:	f023 0301 	bic.w	r3, r3, #1
 8005064:	667b      	str	r3, [r7, #100]	; 0x64
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3308      	adds	r3, #8
 800506c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800506e:	647a      	str	r2, [r7, #68]	; 0x44
 8005070:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005074:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800507c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e5      	bne.n	800504e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d018      	beq.n	80050d6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	623b      	str	r3, [r7, #32]
   return(result);
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050b8:	663b      	str	r3, [r7, #96]	; 0x60
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050c2:	633b      	str	r3, [r7, #48]	; 0x30
 80050c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e6      	bne.n	80050a4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d12e      	bne.n	800513c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f023 0310 	bic.w	r3, r3, #16
 80050f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005102:	61fb      	str	r3, [r7, #28]
 8005104:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	69b9      	ldr	r1, [r7, #24]
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	617b      	str	r3, [r7, #20]
   return(result);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e6      	bne.n	80050e4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	f003 0310 	and.w	r3, r3, #16
 8005120:	2b10      	cmp	r3, #16
 8005122:	d103      	bne.n	800512c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2210      	movs	r2, #16
 800512a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005132:	4619      	mov	r1, r3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff fa53 	bl	80045e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800513a:	e00b      	b.n	8005154 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7fb febd 	bl	8000ebc <HAL_UART_RxCpltCallback>
}
 8005142:	e007      	b.n	8005154 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699a      	ldr	r2, [r3, #24]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0208 	orr.w	r2, r2, #8
 8005152:	619a      	str	r2, [r3, #24]
}
 8005154:	bf00      	nop
 8005156:	3770      	adds	r7, #112	; 0x70
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b09c      	sub	sp, #112	; 0x70
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800516a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005174:	2b22      	cmp	r3, #34	; 0x22
 8005176:	f040 80b9 	bne.w	80052ec <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005180:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005188:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800518a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800518e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005192:	4013      	ands	r3, r2
 8005194:	b29a      	uxth	r2, r3
 8005196:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005198:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	1c9a      	adds	r2, r3, #2
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f040 809c 	bne.w	80052fc <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80051d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051d8:	667b      	str	r3, [r7, #100]	; 0x64
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051e2:	657b      	str	r3, [r7, #84]	; 0x54
 80051e4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80051e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e6      	bne.n	80051c4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3308      	adds	r3, #8
 80051fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005208:	f023 0301 	bic.w	r3, r3, #1
 800520c:	663b      	str	r3, [r7, #96]	; 0x60
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3308      	adds	r3, #8
 8005214:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005216:	643a      	str	r2, [r7, #64]	; 0x40
 8005218:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800521c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e5      	bne.n	80051f6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d018      	beq.n	800527e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	61fb      	str	r3, [r7, #28]
   return(result);
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005260:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800526a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800526c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e6      	bne.n	800524c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005282:	2b01      	cmp	r3, #1
 8005284:	d12e      	bne.n	80052e4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	60bb      	str	r3, [r7, #8]
   return(result);
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f023 0310 	bic.w	r3, r3, #16
 80052a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052aa:	61bb      	str	r3, [r7, #24]
 80052ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	6979      	ldr	r1, [r7, #20]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	e841 2300 	strex	r3, r2, [r1]
 80052b6:	613b      	str	r3, [r7, #16]
   return(result);
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e6      	bne.n	800528c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b10      	cmp	r3, #16
 80052ca:	d103      	bne.n	80052d4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2210      	movs	r2, #16
 80052d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff f97f 	bl	80045e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052e2:	e00b      	b.n	80052fc <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7fb fde9 	bl	8000ebc <HAL_UART_RxCpltCallback>
}
 80052ea:	e007      	b.n	80052fc <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0208 	orr.w	r2, r2, #8
 80052fa:	619a      	str	r2, [r3, #24]
}
 80052fc:	bf00      	nop
 80052fe:	3770      	adds	r7, #112	; 0x70
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005320:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005324:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	b29b      	uxth	r3, r3
 8005332:	43db      	mvns	r3, r3
 8005334:	b29b      	uxth	r3, r3
 8005336:	4013      	ands	r3, r2
 8005338:	b29a      	uxth	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800534e:	b084      	sub	sp, #16
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	f107 0014 	add.w	r0, r7, #20
 800535c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	b004      	add	sp, #16
 800538e:	4770      	bx	lr

08005390 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f103 0208 	add.w	r2, r3, #8
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f04f 32ff 	mov.w	r2, #4294967295
 80053a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f103 0208 	add.w	r2, r3, #8
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f103 0208 	add.w	r2, r3, #8
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053ea:	b480      	push	{r7}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	601a      	str	r2, [r3, #0]
}
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005448:	d103      	bne.n	8005452 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	e00c      	b.n	800546c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3308      	adds	r3, #8
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	e002      	b.n	8005460 <vListInsert+0x2e>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	429a      	cmp	r2, r3
 800546a:	d2f6      	bcs.n	800545a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	601a      	str	r2, [r3, #0]
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6892      	ldr	r2, [r2, #8]
 80054ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6852      	ldr	r2, [r2, #4]
 80054c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d103      	bne.n	80054d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	1e5a      	subs	r2, r3, #1
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800551e:	bf00      	nop
 8005520:	e7fe      	b.n	8005520 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005522:	f001 fdff 	bl	8007124 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552e:	68f9      	ldr	r1, [r7, #12]
 8005530:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005532:	fb01 f303 	mul.w	r3, r1, r3
 8005536:	441a      	add	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005552:	3b01      	subs	r3, #1
 8005554:	68f9      	ldr	r1, [r7, #12]
 8005556:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005558:	fb01 f303 	mul.w	r3, r1, r3
 800555c:	441a      	add	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	22ff      	movs	r2, #255	; 0xff
 8005566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	22ff      	movs	r2, #255	; 0xff
 800556e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d114      	bne.n	80055a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01a      	beq.n	80055b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	3310      	adds	r3, #16
 8005584:	4618      	mov	r0, r3
 8005586:	f001 f895 	bl	80066b4 <xTaskRemoveFromEventList>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d012      	beq.n	80055b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005590:	4b0c      	ldr	r3, [pc, #48]	; (80055c4 <xQueueGenericReset+0xcc>)
 8005592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	e009      	b.n	80055b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3310      	adds	r3, #16
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff fef2 	bl	8005390 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3324      	adds	r3, #36	; 0x24
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff feed 	bl	8005390 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055b6:	f001 fde5 	bl	8007184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055ba:	2301      	movs	r3, #1
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	e000ed04 	.word	0xe000ed04

080055c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	4613      	mov	r3, r2
 80055d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	613b      	str	r3, [r7, #16]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d102      	bne.n	80055fe <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	61fb      	str	r3, [r7, #28]
 80055fc:	e004      	b.n	8005608 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	fb02 f303 	mul.w	r3, r2, r3
 8005606:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	3348      	adds	r3, #72	; 0x48
 800560c:	4618      	mov	r0, r3
 800560e:	f001 feab 	bl	8007368 <pvPortMalloc>
 8005612:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00f      	beq.n	800563a <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	3348      	adds	r3, #72	; 0x48
 800561e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005628:	79fa      	ldrb	r2, [r7, #7]
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	4613      	mov	r3, r2
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 f805 	bl	8005644 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800563a:	69bb      	ldr	r3, [r7, #24]
	}
 800563c:	4618      	mov	r0, r3
 800563e:	3720      	adds	r7, #32
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d103      	bne.n	8005660 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	e002      	b.n	8005666 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005672:	2101      	movs	r1, #1
 8005674:	69b8      	ldr	r0, [r7, #24]
 8005676:	f7ff ff3f 	bl	80054f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800567a:	bf00      	nop
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005682:	b580      	push	{r7, lr}
 8005684:	b086      	sub	sp, #24
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10a      	bne.n	80056a8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	613b      	str	r3, [r7, #16]
}
 80056a4:	bf00      	nop
 80056a6:	e7fe      	b.n	80056a6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d90a      	bls.n	80056c6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	60fb      	str	r3, [r7, #12]
}
 80056c2:	bf00      	nop
 80056c4:	e7fe      	b.n	80056c4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80056c6:	2202      	movs	r2, #2
 80056c8:	2100      	movs	r1, #0
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff ff7c 	bl	80055c8 <xQueueGenericCreate>
 80056d0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80056de:	697b      	ldr	r3, [r7, #20]
	}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08e      	sub	sp, #56	; 0x38
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056f6:	2300      	movs	r3, #0
 80056f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10a      	bne.n	800571a <xQueueGenericSend+0x32>
	__asm volatile
 8005704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005716:	bf00      	nop
 8005718:	e7fe      	b.n	8005718 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d103      	bne.n	8005728 <xQueueGenericSend+0x40>
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <xQueueGenericSend+0x44>
 8005728:	2301      	movs	r3, #1
 800572a:	e000      	b.n	800572e <xQueueGenericSend+0x46>
 800572c:	2300      	movs	r3, #0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10a      	bne.n	8005748 <xQueueGenericSend+0x60>
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005744:	bf00      	nop
 8005746:	e7fe      	b.n	8005746 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d103      	bne.n	8005756 <xQueueGenericSend+0x6e>
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <xQueueGenericSend+0x72>
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <xQueueGenericSend+0x74>
 800575a:	2300      	movs	r3, #0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10a      	bne.n	8005776 <xQueueGenericSend+0x8e>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	623b      	str	r3, [r7, #32]
}
 8005772:	bf00      	nop
 8005774:	e7fe      	b.n	8005774 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005776:	f001 f963 	bl	8006a40 <xTaskGetSchedulerState>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d102      	bne.n	8005786 <xQueueGenericSend+0x9e>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <xQueueGenericSend+0xa2>
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <xQueueGenericSend+0xa4>
 800578a:	2300      	movs	r3, #0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	61fb      	str	r3, [r7, #28]
}
 80057a2:	bf00      	nop
 80057a4:	e7fe      	b.n	80057a4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057a6:	f001 fcbd 	bl	8007124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d302      	bcc.n	80057bc <xQueueGenericSend+0xd4>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d129      	bne.n	8005810 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057c2:	f000 fa5f 	bl	8005c84 <prvCopyDataToQueue>
 80057c6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d010      	beq.n	80057f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	3324      	adds	r3, #36	; 0x24
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 ff6d 	bl	80066b4 <xTaskRemoveFromEventList>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d013      	beq.n	8005808 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057e0:	4b3f      	ldr	r3, [pc, #252]	; (80058e0 <xQueueGenericSend+0x1f8>)
 80057e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	e00a      	b.n	8005808 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057f8:	4b39      	ldr	r3, [pc, #228]	; (80058e0 <xQueueGenericSend+0x1f8>)
 80057fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005808:	f001 fcbc 	bl	8007184 <vPortExitCritical>
				return pdPASS;
 800580c:	2301      	movs	r3, #1
 800580e:	e063      	b.n	80058d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d103      	bne.n	800581e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005816:	f001 fcb5 	bl	8007184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800581a:	2300      	movs	r3, #0
 800581c:	e05c      	b.n	80058d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800581e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005820:	2b00      	cmp	r3, #0
 8005822:	d106      	bne.n	8005832 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005824:	f107 0314 	add.w	r3, r7, #20
 8005828:	4618      	mov	r0, r3
 800582a:	f000 ffa5 	bl	8006778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800582e:	2301      	movs	r3, #1
 8005830:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005832:	f001 fca7 	bl	8007184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005836:	f000 fd4f 	bl	80062d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800583a:	f001 fc73 	bl	8007124 <vPortEnterCritical>
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005844:	b25b      	sxtb	r3, r3
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d103      	bne.n	8005854 <xQueueGenericSend+0x16c>
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800585a:	b25b      	sxtb	r3, r3
 800585c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005860:	d103      	bne.n	800586a <xQueueGenericSend+0x182>
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800586a:	f001 fc8b 	bl	8007184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800586e:	1d3a      	adds	r2, r7, #4
 8005870:	f107 0314 	add.w	r3, r7, #20
 8005874:	4611      	mov	r1, r2
 8005876:	4618      	mov	r0, r3
 8005878:	f000 ff94 	bl	80067a4 <xTaskCheckForTimeOut>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d124      	bne.n	80058cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005882:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005884:	f000 fad0 	bl	8005e28 <prvIsQueueFull>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d018      	beq.n	80058c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	3310      	adds	r3, #16
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	4611      	mov	r1, r2
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fee8 	bl	800666c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800589c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800589e:	f000 fa5b 	bl	8005d58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80058a2:	f000 fd27 	bl	80062f4 <xTaskResumeAll>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f47f af7c 	bne.w	80057a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80058ae:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <xQueueGenericSend+0x1f8>)
 80058b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	e772      	b.n	80057a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058c2:	f000 fa49 	bl	8005d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058c6:	f000 fd15 	bl	80062f4 <xTaskResumeAll>
 80058ca:	e76c      	b.n	80057a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ce:	f000 fa43 	bl	8005d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058d2:	f000 fd0f 	bl	80062f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058d6:	2300      	movs	r3, #0
		}
	}
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3738      	adds	r7, #56	; 0x38
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	e000ed04 	.word	0xe000ed04

080058e4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08e      	sub	sp, #56	; 0x38
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10a      	bne.n	800590e <xQueueGiveFromISR+0x2a>
	__asm volatile
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	623b      	str	r3, [r7, #32]
}
 800590a:	bf00      	nop
 800590c:	e7fe      	b.n	800590c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <xQueueGiveFromISR+0x48>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	61fb      	str	r3, [r7, #28]
}
 8005928:	bf00      	nop
 800592a:	e7fe      	b.n	800592a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d103      	bne.n	800593c <xQueueGiveFromISR+0x58>
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <xQueueGiveFromISR+0x5c>
 800593c:	2301      	movs	r3, #1
 800593e:	e000      	b.n	8005942 <xQueueGiveFromISR+0x5e>
 8005940:	2300      	movs	r3, #0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10a      	bne.n	800595c <xQueueGiveFromISR+0x78>
	__asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	61bb      	str	r3, [r7, #24]
}
 8005958:	bf00      	nop
 800595a:	e7fe      	b.n	800595a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800595c:	f001 fcc4 	bl	80072e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005960:	f3ef 8211 	mrs	r2, BASEPRI
 8005964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	617a      	str	r2, [r7, #20]
 8005976:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005978:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800597a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800597c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005988:	429a      	cmp	r2, r3
 800598a:	d22b      	bcs.n	80059e4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800599e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80059a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a6:	d112      	bne.n	80059ce <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d016      	beq.n	80059de <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	3324      	adds	r3, #36	; 0x24
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 fe7d 	bl	80066b4 <xTaskRemoveFromEventList>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00e      	beq.n	80059de <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00b      	beq.n	80059de <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2201      	movs	r2, #1
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	e007      	b.n	80059de <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059d2:	3301      	adds	r3, #1
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	b25a      	sxtb	r2, r3
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059de:	2301      	movs	r3, #1
 80059e0:	637b      	str	r3, [r7, #52]	; 0x34
 80059e2:	e001      	b.n	80059e8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059e4:	2300      	movs	r3, #0
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
 80059e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ea:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3738      	adds	r7, #56	; 0x38
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08e      	sub	sp, #56	; 0x38
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10a      	bne.n	8005a32 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	623b      	str	r3, [r7, #32]
}
 8005a2e:	bf00      	nop
 8005a30:	e7fe      	b.n	8005a30 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	61fb      	str	r3, [r7, #28]
}
 8005a4c:	bf00      	nop
 8005a4e:	e7fe      	b.n	8005a4e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a50:	f000 fff6 	bl	8006a40 <xTaskGetSchedulerState>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d102      	bne.n	8005a60 <xQueueSemaphoreTake+0x60>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <xQueueSemaphoreTake+0x64>
 8005a60:	2301      	movs	r3, #1
 8005a62:	e000      	b.n	8005a66 <xQueueSemaphoreTake+0x66>
 8005a64:	2300      	movs	r3, #0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10a      	bne.n	8005a80 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	61bb      	str	r3, [r7, #24]
}
 8005a7c:	bf00      	nop
 8005a7e:	e7fe      	b.n	8005a7e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a80:	f001 fb50 	bl	8007124 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d024      	beq.n	8005ada <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	1e5a      	subs	r2, r3, #1
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005aa0:	f001 f998 	bl	8006dd4 <pvTaskIncrementMutexHeldCount>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00f      	beq.n	8005ad2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab4:	3310      	adds	r3, #16
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fdfc 	bl	80066b4 <xTaskRemoveFromEventList>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ac2:	4b54      	ldr	r3, [pc, #336]	; (8005c14 <xQueueSemaphoreTake+0x214>)
 8005ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ad2:	f001 fb57 	bl	8007184 <vPortExitCritical>
				return pdPASS;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e097      	b.n	8005c0a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d111      	bne.n	8005b04 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	617b      	str	r3, [r7, #20]
}
 8005af8:	bf00      	nop
 8005afa:	e7fe      	b.n	8005afa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005afc:	f001 fb42 	bl	8007184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b00:	2300      	movs	r3, #0
 8005b02:	e082      	b.n	8005c0a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b0a:	f107 030c 	add.w	r3, r7, #12
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fe32 	bl	8006778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b14:	2301      	movs	r3, #1
 8005b16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b18:	f001 fb34 	bl	8007184 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b1c:	f000 fbdc 	bl	80062d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b20:	f001 fb00 	bl	8007124 <vPortEnterCritical>
 8005b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b2a:	b25b      	sxtb	r3, r3
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b30:	d103      	bne.n	8005b3a <xQueueSemaphoreTake+0x13a>
 8005b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b40:	b25b      	sxtb	r3, r3
 8005b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b46:	d103      	bne.n	8005b50 <xQueueSemaphoreTake+0x150>
 8005b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b50:	f001 fb18 	bl	8007184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b54:	463a      	mov	r2, r7
 8005b56:	f107 030c 	add.w	r3, r7, #12
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 fe21 	bl	80067a4 <xTaskCheckForTimeOut>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d132      	bne.n	8005bce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b6a:	f000 f947 	bl	8005dfc <prvIsQueueEmpty>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d026      	beq.n	8005bc2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d109      	bne.n	8005b90 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005b7c:	f001 fad2 	bl	8007124 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 ff79 	bl	8006a7c <xTaskPriorityInherit>
 8005b8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005b8c:	f001 fafa 	bl	8007184 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	3324      	adds	r3, #36	; 0x24
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	4611      	mov	r1, r2
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fd67 	bl	800666c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ba0:	f000 f8da 	bl	8005d58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ba4:	f000 fba6 	bl	80062f4 <xTaskResumeAll>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f47f af68 	bne.w	8005a80 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005bb0:	4b18      	ldr	r3, [pc, #96]	; (8005c14 <xQueueSemaphoreTake+0x214>)
 8005bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	e75e      	b.n	8005a80 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005bc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bc4:	f000 f8c8 	bl	8005d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bc8:	f000 fb94 	bl	80062f4 <xTaskResumeAll>
 8005bcc:	e758      	b.n	8005a80 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005bce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bd0:	f000 f8c2 	bl	8005d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bd4:	f000 fb8e 	bl	80062f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bda:	f000 f90f 	bl	8005dfc <prvIsQueueEmpty>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f43f af4d 	beq.w	8005a80 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00d      	beq.n	8005c08 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005bec:	f001 fa9a 	bl	8007124 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005bf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bf2:	f000 f82f 	bl	8005c54 <prvGetDisinheritPriorityAfterTimeout>
 8005bf6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 f848 	bl	8006c94 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c04:	f001 fabe 	bl	8007184 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3738      	adds	r7, #56	; 0x38
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	e000ed04 	.word	0xe000ed04

08005c18 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10a      	bne.n	8005c3c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	60bb      	str	r3, [r7, #8]
}
 8005c38:	bf00      	nop
 8005c3a:	e7fe      	b.n	8005c3a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005c3c:	f001 fa72 	bl	8007124 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c44:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005c46:	f001 fa9d 	bl	8007184 <vPortExitCritical>

	return uxReturn;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d006      	beq.n	8005c72 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f1c3 0307 	rsb	r3, r3, #7
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	e001      	b.n	8005c76 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005c76:	68fb      	ldr	r3, [r7, #12]
	}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c90:	2300      	movs	r3, #0
 8005c92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10d      	bne.n	8005cbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d14d      	bne.n	8005d46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 ff6a 	bl	8006b88 <xTaskPriorityDisinherit>
 8005cb4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	605a      	str	r2, [r3, #4]
 8005cbc:	e043      	b.n	8005d46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d119      	bne.n	8005cf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6898      	ldr	r0, [r3, #8]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	461a      	mov	r2, r3
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	f001 fe3a 	bl	8007948 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	441a      	add	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d32b      	bcc.n	8005d46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	609a      	str	r2, [r3, #8]
 8005cf6:	e026      	b.n	8005d46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	68d8      	ldr	r0, [r3, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	461a      	mov	r2, r3
 8005d02:	68b9      	ldr	r1, [r7, #8]
 8005d04:	f001 fe20 	bl	8007948 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	425b      	negs	r3, r3
 8005d12:	441a      	add	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d207      	bcs.n	8005d34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2c:	425b      	negs	r3, r3
 8005d2e:	441a      	add	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d105      	bne.n	8005d46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d4e:	697b      	ldr	r3, [r7, #20]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d60:	f001 f9e0 	bl	8007124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d6c:	e011      	b.n	8005d92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d012      	beq.n	8005d9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3324      	adds	r3, #36	; 0x24
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fc9a 	bl	80066b4 <xTaskRemoveFromEventList>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d86:	f000 fd6f 	bl	8006868 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	dce9      	bgt.n	8005d6e <prvUnlockQueue+0x16>
 8005d9a:	e000      	b.n	8005d9e <prvUnlockQueue+0x46>
					break;
 8005d9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	22ff      	movs	r2, #255	; 0xff
 8005da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005da6:	f001 f9ed 	bl	8007184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005daa:	f001 f9bb 	bl	8007124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005db4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005db6:	e011      	b.n	8005ddc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d012      	beq.n	8005de6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3310      	adds	r3, #16
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fc75 	bl	80066b4 <xTaskRemoveFromEventList>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005dd0:	f000 fd4a 	bl	8006868 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005dd4:	7bbb      	ldrb	r3, [r7, #14]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ddc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	dce9      	bgt.n	8005db8 <prvUnlockQueue+0x60>
 8005de4:	e000      	b.n	8005de8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005de6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	22ff      	movs	r2, #255	; 0xff
 8005dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005df0:	f001 f9c8 	bl	8007184 <vPortExitCritical>
}
 8005df4:	bf00      	nop
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e04:	f001 f98e 	bl	8007124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e10:	2301      	movs	r3, #1
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	e001      	b.n	8005e1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e1a:	f001 f9b3 	bl	8007184 <vPortExitCritical>

	return xReturn;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e30:	f001 f978 	bl	8007124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d102      	bne.n	8005e46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e40:	2301      	movs	r3, #1
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	e001      	b.n	8005e4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e4a:	f001 f99b 	bl	8007184 <vPortExitCritical>

	return xReturn;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08e      	sub	sp, #56	; 0x38
 8005e5c:	af04      	add	r7, sp, #16
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10a      	bne.n	8005e82 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	623b      	str	r3, [r7, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <xTaskCreateStatic+0x46>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	61fb      	str	r3, [r7, #28]
}
 8005e9a:	bf00      	nop
 8005e9c:	e7fe      	b.n	8005e9c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e9e:	23a0      	movs	r3, #160	; 0xa0
 8005ea0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2ba0      	cmp	r3, #160	; 0xa0
 8005ea6:	d00a      	beq.n	8005ebe <xTaskCreateStatic+0x66>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	61bb      	str	r3, [r7, #24]
}
 8005eba:	bf00      	nop
 8005ebc:	e7fe      	b.n	8005ebc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01e      	beq.n	8005f02 <xTaskCreateStatic+0xaa>
 8005ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d01b      	beq.n	8005f02 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ed2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005edc:	2300      	movs	r3, #0
 8005ede:	9303      	str	r3, [sp, #12]
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	9302      	str	r3, [sp, #8]
 8005ee4:	f107 0314 	add.w	r3, r7, #20
 8005ee8:	9301      	str	r3, [sp, #4]
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f851 	bl	8005f9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005efa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005efc:	f000 f8e4 	bl	80060c8 <prvAddNewTaskToReadyList>
 8005f00:	e001      	b.n	8005f06 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f06:	697b      	ldr	r3, [r7, #20]
	}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3728      	adds	r7, #40	; 0x28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08c      	sub	sp, #48	; 0x30
 8005f14:	af04      	add	r7, sp, #16
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f20:	88fb      	ldrh	r3, [r7, #6]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4618      	mov	r0, r3
 8005f26:	f001 fa1f 	bl	8007368 <pvPortMalloc>
 8005f2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00e      	beq.n	8005f50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f32:	20a0      	movs	r0, #160	; 0xa0
 8005f34:	f001 fa18 	bl	8007368 <pvPortMalloc>
 8005f38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	631a      	str	r2, [r3, #48]	; 0x30
 8005f46:	e005      	b.n	8005f54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f48:	6978      	ldr	r0, [r7, #20]
 8005f4a:	f001 fad1 	bl	80074f0 <vPortFree>
 8005f4e:	e001      	b.n	8005f54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f50:	2300      	movs	r3, #0
 8005f52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d017      	beq.n	8005f8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f62:	88fa      	ldrh	r2, [r7, #6]
 8005f64:	2300      	movs	r3, #0
 8005f66:	9303      	str	r3, [sp, #12]
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	9302      	str	r3, [sp, #8]
 8005f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 f80f 	bl	8005f9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f7e:	69f8      	ldr	r0, [r7, #28]
 8005f80:	f000 f8a2 	bl	80060c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f84:	2301      	movs	r3, #1
 8005f86:	61bb      	str	r3, [r7, #24]
 8005f88:	e002      	b.n	8005f90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f90:	69bb      	ldr	r3, [r7, #24]
	}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3720      	adds	r7, #32
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	f023 0307 	bic.w	r3, r3, #7
 8005fc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	617b      	str	r3, [r7, #20]
}
 8005fe0:	bf00      	nop
 8005fe2:	e7fe      	b.n	8005fe2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61fb      	str	r3, [r7, #28]
 8005fe8:	e012      	b.n	8006010 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	7819      	ldrb	r1, [r3, #0]
 8005ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	3334      	adds	r3, #52	; 0x34
 8005ffa:	460a      	mov	r2, r1
 8005ffc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	4413      	add	r3, r2
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d006      	beq.n	8006018 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	3301      	adds	r3, #1
 800600e:	61fb      	str	r3, [r7, #28]
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	2b0f      	cmp	r3, #15
 8006014:	d9e9      	bls.n	8005fea <prvInitialiseNewTask+0x4e>
 8006016:	e000      	b.n	800601a <prvInitialiseNewTask+0x7e>
		{
			break;
 8006018:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	2b06      	cmp	r3, #6
 8006026:	d901      	bls.n	800602c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006028:	2306      	movs	r3, #6
 800602a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006030:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006036:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	2200      	movs	r2, #0
 800603c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	3304      	adds	r3, #4
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff f9c4 	bl	80053d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	3318      	adds	r3, #24
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff f9bf 	bl	80053d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006056:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	f1c3 0207 	rsb	r2, r3, #7
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006066:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	2200      	movs	r2, #0
 800606c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	2200      	movs	r2, #0
 8006074:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607a:	334c      	adds	r3, #76	; 0x4c
 800607c:	224c      	movs	r2, #76	; 0x4c
 800607e:	2100      	movs	r1, #0
 8006080:	4618      	mov	r0, r3
 8006082:	f001 fbc7 	bl	8007814 <memset>
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	4a0c      	ldr	r2, [pc, #48]	; (80060bc <prvInitialiseNewTask+0x120>)
 800608a:	651a      	str	r2, [r3, #80]	; 0x50
 800608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608e:	4a0c      	ldr	r2, [pc, #48]	; (80060c0 <prvInitialiseNewTask+0x124>)
 8006090:	655a      	str	r2, [r3, #84]	; 0x54
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	4a0b      	ldr	r2, [pc, #44]	; (80060c4 <prvInitialiseNewTask+0x128>)
 8006096:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	68f9      	ldr	r1, [r7, #12]
 800609c:	69b8      	ldr	r0, [r7, #24]
 800609e:	f000 ff13 	bl	8006ec8 <pxPortInitialiseStack>
 80060a2:	4602      	mov	r2, r0
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80060a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060b4:	bf00      	nop
 80060b6:	3720      	adds	r7, #32
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	20001510 	.word	0x20001510
 80060c0:	20001578 	.word	0x20001578
 80060c4:	200015e0 	.word	0x200015e0

080060c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060d0:	f001 f828 	bl	8007124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060d4:	4b2a      	ldr	r3, [pc, #168]	; (8006180 <prvAddNewTaskToReadyList+0xb8>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3301      	adds	r3, #1
 80060da:	4a29      	ldr	r2, [pc, #164]	; (8006180 <prvAddNewTaskToReadyList+0xb8>)
 80060dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060de:	4b29      	ldr	r3, [pc, #164]	; (8006184 <prvAddNewTaskToReadyList+0xbc>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d109      	bne.n	80060fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060e6:	4a27      	ldr	r2, [pc, #156]	; (8006184 <prvAddNewTaskToReadyList+0xbc>)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060ec:	4b24      	ldr	r3, [pc, #144]	; (8006180 <prvAddNewTaskToReadyList+0xb8>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d110      	bne.n	8006116 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060f4:	f000 fbdc 	bl	80068b0 <prvInitialiseTaskLists>
 80060f8:	e00d      	b.n	8006116 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060fa:	4b23      	ldr	r3, [pc, #140]	; (8006188 <prvAddNewTaskToReadyList+0xc0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d109      	bne.n	8006116 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006102:	4b20      	ldr	r3, [pc, #128]	; (8006184 <prvAddNewTaskToReadyList+0xbc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	429a      	cmp	r2, r3
 800610e:	d802      	bhi.n	8006116 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006110:	4a1c      	ldr	r2, [pc, #112]	; (8006184 <prvAddNewTaskToReadyList+0xbc>)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006116:	4b1d      	ldr	r3, [pc, #116]	; (800618c <prvAddNewTaskToReadyList+0xc4>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3301      	adds	r3, #1
 800611c:	4a1b      	ldr	r2, [pc, #108]	; (800618c <prvAddNewTaskToReadyList+0xc4>)
 800611e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	2201      	movs	r2, #1
 8006126:	409a      	lsls	r2, r3
 8006128:	4b19      	ldr	r3, [pc, #100]	; (8006190 <prvAddNewTaskToReadyList+0xc8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4313      	orrs	r3, r2
 800612e:	4a18      	ldr	r2, [pc, #96]	; (8006190 <prvAddNewTaskToReadyList+0xc8>)
 8006130:	6013      	str	r3, [r2, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006136:	4613      	mov	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4a15      	ldr	r2, [pc, #84]	; (8006194 <prvAddNewTaskToReadyList+0xcc>)
 8006140:	441a      	add	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3304      	adds	r3, #4
 8006146:	4619      	mov	r1, r3
 8006148:	4610      	mov	r0, r2
 800614a:	f7ff f94e 	bl	80053ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800614e:	f001 f819 	bl	8007184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006152:	4b0d      	ldr	r3, [pc, #52]	; (8006188 <prvAddNewTaskToReadyList+0xc0>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00e      	beq.n	8006178 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800615a:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <prvAddNewTaskToReadyList+0xbc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006164:	429a      	cmp	r2, r3
 8006166:	d207      	bcs.n	8006178 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006168:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <prvAddNewTaskToReadyList+0xd0>)
 800616a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006178:	bf00      	nop
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	200008c4 	.word	0x200008c4
 8006184:	200007c4 	.word	0x200007c4
 8006188:	200008d0 	.word	0x200008d0
 800618c:	200008e0 	.word	0x200008e0
 8006190:	200008cc 	.word	0x200008cc
 8006194:	200007c8 	.word	0x200007c8
 8006198:	e000ed04 	.word	0xe000ed04

0800619c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d017      	beq.n	80061de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061ae:	4b13      	ldr	r3, [pc, #76]	; (80061fc <vTaskDelay+0x60>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <vTaskDelay+0x30>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	60bb      	str	r3, [r7, #8]
}
 80061c8:	bf00      	nop
 80061ca:	e7fe      	b.n	80061ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061cc:	f000 f884 	bl	80062d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061d0:	2100      	movs	r1, #0
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fe12 	bl	8006dfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061d8:	f000 f88c 	bl	80062f4 <xTaskResumeAll>
 80061dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d107      	bne.n	80061f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061e4:	4b06      	ldr	r3, [pc, #24]	; (8006200 <vTaskDelay+0x64>)
 80061e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061f4:	bf00      	nop
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	200008ec 	.word	0x200008ec
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08a      	sub	sp, #40	; 0x28
 8006208:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800620a:	2300      	movs	r3, #0
 800620c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800620e:	2300      	movs	r3, #0
 8006210:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006212:	463a      	mov	r2, r7
 8006214:	1d39      	adds	r1, r7, #4
 8006216:	f107 0308 	add.w	r3, r7, #8
 800621a:	4618      	mov	r0, r3
 800621c:	f7fa f830 	bl	8000280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	9202      	str	r2, [sp, #8]
 8006228:	9301      	str	r3, [sp, #4]
 800622a:	2300      	movs	r3, #0
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	2300      	movs	r3, #0
 8006230:	460a      	mov	r2, r1
 8006232:	4921      	ldr	r1, [pc, #132]	; (80062b8 <vTaskStartScheduler+0xb4>)
 8006234:	4821      	ldr	r0, [pc, #132]	; (80062bc <vTaskStartScheduler+0xb8>)
 8006236:	f7ff fe0f 	bl	8005e58 <xTaskCreateStatic>
 800623a:	4603      	mov	r3, r0
 800623c:	4a20      	ldr	r2, [pc, #128]	; (80062c0 <vTaskStartScheduler+0xbc>)
 800623e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006240:	4b1f      	ldr	r3, [pc, #124]	; (80062c0 <vTaskStartScheduler+0xbc>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006248:	2301      	movs	r3, #1
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	e001      	b.n	8006252 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d11b      	bne.n	8006290 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	613b      	str	r3, [r7, #16]
}
 800626a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800626c:	4b15      	ldr	r3, [pc, #84]	; (80062c4 <vTaskStartScheduler+0xc0>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	334c      	adds	r3, #76	; 0x4c
 8006272:	4a15      	ldr	r2, [pc, #84]	; (80062c8 <vTaskStartScheduler+0xc4>)
 8006274:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006276:	4b15      	ldr	r3, [pc, #84]	; (80062cc <vTaskStartScheduler+0xc8>)
 8006278:	f04f 32ff 	mov.w	r2, #4294967295
 800627c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800627e:	4b14      	ldr	r3, [pc, #80]	; (80062d0 <vTaskStartScheduler+0xcc>)
 8006280:	2201      	movs	r2, #1
 8006282:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006284:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <vTaskStartScheduler+0xd0>)
 8006286:	2200      	movs	r2, #0
 8006288:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800628a:	f000 fea9 	bl	8006fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800628e:	e00e      	b.n	80062ae <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d10a      	bne.n	80062ae <vTaskStartScheduler+0xaa>
	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	60fb      	str	r3, [r7, #12]
}
 80062aa:	bf00      	nop
 80062ac:	e7fe      	b.n	80062ac <vTaskStartScheduler+0xa8>
}
 80062ae:	bf00      	nop
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	0800841c 	.word	0x0800841c
 80062bc:	08006881 	.word	0x08006881
 80062c0:	200008e8 	.word	0x200008e8
 80062c4:	200007c4 	.word	0x200007c4
 80062c8:	20000068 	.word	0x20000068
 80062cc:	200008e4 	.word	0x200008e4
 80062d0:	200008d0 	.word	0x200008d0
 80062d4:	200008c8 	.word	0x200008c8

080062d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062d8:	b480      	push	{r7}
 80062da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80062dc:	4b04      	ldr	r3, [pc, #16]	; (80062f0 <vTaskSuspendAll+0x18>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3301      	adds	r3, #1
 80062e2:	4a03      	ldr	r2, [pc, #12]	; (80062f0 <vTaskSuspendAll+0x18>)
 80062e4:	6013      	str	r3, [r2, #0]
}
 80062e6:	bf00      	nop
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	200008ec 	.word	0x200008ec

080062f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062fe:	2300      	movs	r3, #0
 8006300:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006302:	4b41      	ldr	r3, [pc, #260]	; (8006408 <xTaskResumeAll+0x114>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <xTaskResumeAll+0x2c>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	603b      	str	r3, [r7, #0]
}
 800631c:	bf00      	nop
 800631e:	e7fe      	b.n	800631e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006320:	f000 ff00 	bl	8007124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006324:	4b38      	ldr	r3, [pc, #224]	; (8006408 <xTaskResumeAll+0x114>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3b01      	subs	r3, #1
 800632a:	4a37      	ldr	r2, [pc, #220]	; (8006408 <xTaskResumeAll+0x114>)
 800632c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800632e:	4b36      	ldr	r3, [pc, #216]	; (8006408 <xTaskResumeAll+0x114>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d161      	bne.n	80063fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006336:	4b35      	ldr	r3, [pc, #212]	; (800640c <xTaskResumeAll+0x118>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d05d      	beq.n	80063fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800633e:	e02e      	b.n	800639e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006340:	4b33      	ldr	r3, [pc, #204]	; (8006410 <xTaskResumeAll+0x11c>)
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3318      	adds	r3, #24
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff f8a9 	bl	80054a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3304      	adds	r3, #4
 8006356:	4618      	mov	r0, r3
 8006358:	f7ff f8a4 	bl	80054a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006360:	2201      	movs	r2, #1
 8006362:	409a      	lsls	r2, r3
 8006364:	4b2b      	ldr	r3, [pc, #172]	; (8006414 <xTaskResumeAll+0x120>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4313      	orrs	r3, r2
 800636a:	4a2a      	ldr	r2, [pc, #168]	; (8006414 <xTaskResumeAll+0x120>)
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006372:	4613      	mov	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4a27      	ldr	r2, [pc, #156]	; (8006418 <xTaskResumeAll+0x124>)
 800637c:	441a      	add	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3304      	adds	r3, #4
 8006382:	4619      	mov	r1, r3
 8006384:	4610      	mov	r0, r2
 8006386:	f7ff f830 	bl	80053ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638e:	4b23      	ldr	r3, [pc, #140]	; (800641c <xTaskResumeAll+0x128>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	429a      	cmp	r2, r3
 8006396:	d302      	bcc.n	800639e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006398:	4b21      	ldr	r3, [pc, #132]	; (8006420 <xTaskResumeAll+0x12c>)
 800639a:	2201      	movs	r2, #1
 800639c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800639e:	4b1c      	ldr	r3, [pc, #112]	; (8006410 <xTaskResumeAll+0x11c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1cc      	bne.n	8006340 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063ac:	f000 fb22 	bl	80069f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80063b0:	4b1c      	ldr	r3, [pc, #112]	; (8006424 <xTaskResumeAll+0x130>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d010      	beq.n	80063de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063bc:	f000 f836 	bl	800642c <xTaskIncrementTick>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80063c6:	4b16      	ldr	r3, [pc, #88]	; (8006420 <xTaskResumeAll+0x12c>)
 80063c8:	2201      	movs	r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1f1      	bne.n	80063bc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80063d8:	4b12      	ldr	r3, [pc, #72]	; (8006424 <xTaskResumeAll+0x130>)
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063de:	4b10      	ldr	r3, [pc, #64]	; (8006420 <xTaskResumeAll+0x12c>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d009      	beq.n	80063fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063e6:	2301      	movs	r3, #1
 80063e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063ea:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <xTaskResumeAll+0x134>)
 80063ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063fa:	f000 fec3 	bl	8007184 <vPortExitCritical>

	return xAlreadyYielded;
 80063fe:	68bb      	ldr	r3, [r7, #8]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	200008ec 	.word	0x200008ec
 800640c:	200008c4 	.word	0x200008c4
 8006410:	20000884 	.word	0x20000884
 8006414:	200008cc 	.word	0x200008cc
 8006418:	200007c8 	.word	0x200007c8
 800641c:	200007c4 	.word	0x200007c4
 8006420:	200008d8 	.word	0x200008d8
 8006424:	200008d4 	.word	0x200008d4
 8006428:	e000ed04 	.word	0xe000ed04

0800642c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006432:	2300      	movs	r3, #0
 8006434:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006436:	4b51      	ldr	r3, [pc, #324]	; (800657c <xTaskIncrementTick+0x150>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	f040 808d 	bne.w	800655a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006440:	4b4f      	ldr	r3, [pc, #316]	; (8006580 <xTaskIncrementTick+0x154>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3301      	adds	r3, #1
 8006446:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006448:	4a4d      	ldr	r2, [pc, #308]	; (8006580 <xTaskIncrementTick+0x154>)
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d120      	bne.n	8006496 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006454:	4b4b      	ldr	r3, [pc, #300]	; (8006584 <xTaskIncrementTick+0x158>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <xTaskIncrementTick+0x48>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	603b      	str	r3, [r7, #0]
}
 8006470:	bf00      	nop
 8006472:	e7fe      	b.n	8006472 <xTaskIncrementTick+0x46>
 8006474:	4b43      	ldr	r3, [pc, #268]	; (8006584 <xTaskIncrementTick+0x158>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	4b43      	ldr	r3, [pc, #268]	; (8006588 <xTaskIncrementTick+0x15c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a41      	ldr	r2, [pc, #260]	; (8006584 <xTaskIncrementTick+0x158>)
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	4a41      	ldr	r2, [pc, #260]	; (8006588 <xTaskIncrementTick+0x15c>)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	4b40      	ldr	r3, [pc, #256]	; (800658c <xTaskIncrementTick+0x160>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3301      	adds	r3, #1
 800648e:	4a3f      	ldr	r2, [pc, #252]	; (800658c <xTaskIncrementTick+0x160>)
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	f000 faaf 	bl	80069f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006496:	4b3e      	ldr	r3, [pc, #248]	; (8006590 <xTaskIncrementTick+0x164>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	429a      	cmp	r2, r3
 800649e:	d34d      	bcc.n	800653c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064a0:	4b38      	ldr	r3, [pc, #224]	; (8006584 <xTaskIncrementTick+0x158>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <xTaskIncrementTick+0x82>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <xTaskIncrementTick+0x84>
 80064ae:	2300      	movs	r3, #0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d004      	beq.n	80064be <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064b4:	4b36      	ldr	r3, [pc, #216]	; (8006590 <xTaskIncrementTick+0x164>)
 80064b6:	f04f 32ff 	mov.w	r2, #4294967295
 80064ba:	601a      	str	r2, [r3, #0]
					break;
 80064bc:	e03e      	b.n	800653c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064be:	4b31      	ldr	r3, [pc, #196]	; (8006584 <xTaskIncrementTick+0x158>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d203      	bcs.n	80064de <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064d6:	4a2e      	ldr	r2, [pc, #184]	; (8006590 <xTaskIncrementTick+0x164>)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6013      	str	r3, [r2, #0]
						break;
 80064dc:	e02e      	b.n	800653c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	3304      	adds	r3, #4
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fe ffde 	bl	80054a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d004      	beq.n	80064fa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	3318      	adds	r3, #24
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fe ffd5 	bl	80054a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	2201      	movs	r2, #1
 8006500:	409a      	lsls	r2, r3
 8006502:	4b24      	ldr	r3, [pc, #144]	; (8006594 <xTaskIncrementTick+0x168>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4313      	orrs	r3, r2
 8006508:	4a22      	ldr	r2, [pc, #136]	; (8006594 <xTaskIncrementTick+0x168>)
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4a1f      	ldr	r2, [pc, #124]	; (8006598 <xTaskIncrementTick+0x16c>)
 800651a:	441a      	add	r2, r3
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	3304      	adds	r3, #4
 8006520:	4619      	mov	r1, r3
 8006522:	4610      	mov	r0, r2
 8006524:	f7fe ff61 	bl	80053ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652c:	4b1b      	ldr	r3, [pc, #108]	; (800659c <xTaskIncrementTick+0x170>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006532:	429a      	cmp	r2, r3
 8006534:	d3b4      	bcc.n	80064a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006536:	2301      	movs	r3, #1
 8006538:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800653a:	e7b1      	b.n	80064a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800653c:	4b17      	ldr	r3, [pc, #92]	; (800659c <xTaskIncrementTick+0x170>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006542:	4915      	ldr	r1, [pc, #84]	; (8006598 <xTaskIncrementTick+0x16c>)
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	440b      	add	r3, r1
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d907      	bls.n	8006564 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006554:	2301      	movs	r3, #1
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	e004      	b.n	8006564 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800655a:	4b11      	ldr	r3, [pc, #68]	; (80065a0 <xTaskIncrementTick+0x174>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3301      	adds	r3, #1
 8006560:	4a0f      	ldr	r2, [pc, #60]	; (80065a0 <xTaskIncrementTick+0x174>)
 8006562:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006564:	4b0f      	ldr	r3, [pc, #60]	; (80065a4 <xTaskIncrementTick+0x178>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d001      	beq.n	8006570 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800656c:	2301      	movs	r3, #1
 800656e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006570:	697b      	ldr	r3, [r7, #20]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	200008ec 	.word	0x200008ec
 8006580:	200008c8 	.word	0x200008c8
 8006584:	2000087c 	.word	0x2000087c
 8006588:	20000880 	.word	0x20000880
 800658c:	200008dc 	.word	0x200008dc
 8006590:	200008e4 	.word	0x200008e4
 8006594:	200008cc 	.word	0x200008cc
 8006598:	200007c8 	.word	0x200007c8
 800659c:	200007c4 	.word	0x200007c4
 80065a0:	200008d4 	.word	0x200008d4
 80065a4:	200008d8 	.word	0x200008d8

080065a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065ae:	4b29      	ldr	r3, [pc, #164]	; (8006654 <vTaskSwitchContext+0xac>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065b6:	4b28      	ldr	r3, [pc, #160]	; (8006658 <vTaskSwitchContext+0xb0>)
 80065b8:	2201      	movs	r2, #1
 80065ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065bc:	e044      	b.n	8006648 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80065be:	4b26      	ldr	r3, [pc, #152]	; (8006658 <vTaskSwitchContext+0xb0>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80065c4:	4b25      	ldr	r3, [pc, #148]	; (800665c <vTaskSwitchContext+0xb4>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	fab3 f383 	clz	r3, r3
 80065d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80065d2:	7afb      	ldrb	r3, [r7, #11]
 80065d4:	f1c3 031f 	rsb	r3, r3, #31
 80065d8:	617b      	str	r3, [r7, #20]
 80065da:	4921      	ldr	r1, [pc, #132]	; (8006660 <vTaskSwitchContext+0xb8>)
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	440b      	add	r3, r1
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10a      	bne.n	8006604 <vTaskSwitchContext+0x5c>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	607b      	str	r3, [r7, #4]
}
 8006600:	bf00      	nop
 8006602:	e7fe      	b.n	8006602 <vTaskSwitchContext+0x5a>
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4a14      	ldr	r2, [pc, #80]	; (8006660 <vTaskSwitchContext+0xb8>)
 8006610:	4413      	add	r3, r2
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	605a      	str	r2, [r3, #4]
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	3308      	adds	r3, #8
 8006626:	429a      	cmp	r2, r3
 8006628:	d104      	bne.n	8006634 <vTaskSwitchContext+0x8c>
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	605a      	str	r2, [r3, #4]
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	4a0a      	ldr	r2, [pc, #40]	; (8006664 <vTaskSwitchContext+0xbc>)
 800663c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800663e:	4b09      	ldr	r3, [pc, #36]	; (8006664 <vTaskSwitchContext+0xbc>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	334c      	adds	r3, #76	; 0x4c
 8006644:	4a08      	ldr	r2, [pc, #32]	; (8006668 <vTaskSwitchContext+0xc0>)
 8006646:	6013      	str	r3, [r2, #0]
}
 8006648:	bf00      	nop
 800664a:	371c      	adds	r7, #28
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	200008ec 	.word	0x200008ec
 8006658:	200008d8 	.word	0x200008d8
 800665c:	200008cc 	.word	0x200008cc
 8006660:	200007c8 	.word	0x200007c8
 8006664:	200007c4 	.word	0x200007c4
 8006668:	20000068 	.word	0x20000068

0800666c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	60fb      	str	r3, [r7, #12]
}
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006692:	4b07      	ldr	r3, [pc, #28]	; (80066b0 <vTaskPlaceOnEventList+0x44>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3318      	adds	r3, #24
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7fe fec9 	bl	8005432 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066a0:	2101      	movs	r1, #1
 80066a2:	6838      	ldr	r0, [r7, #0]
 80066a4:	f000 fbaa 	bl	8006dfc <prvAddCurrentTaskToDelayedList>
}
 80066a8:	bf00      	nop
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	200007c4 	.word	0x200007c4

080066b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10a      	bne.n	80066e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	60fb      	str	r3, [r7, #12]
}
 80066dc:	bf00      	nop
 80066de:	e7fe      	b.n	80066de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	3318      	adds	r3, #24
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fe fedd 	bl	80054a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066ea:	4b1d      	ldr	r3, [pc, #116]	; (8006760 <xTaskRemoveFromEventList+0xac>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d11c      	bne.n	800672c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	3304      	adds	r3, #4
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fe fed4 	bl	80054a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006700:	2201      	movs	r2, #1
 8006702:	409a      	lsls	r2, r3
 8006704:	4b17      	ldr	r3, [pc, #92]	; (8006764 <xTaskRemoveFromEventList+0xb0>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4313      	orrs	r3, r2
 800670a:	4a16      	ldr	r2, [pc, #88]	; (8006764 <xTaskRemoveFromEventList+0xb0>)
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006712:	4613      	mov	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4a13      	ldr	r2, [pc, #76]	; (8006768 <xTaskRemoveFromEventList+0xb4>)
 800671c:	441a      	add	r2, r3
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	3304      	adds	r3, #4
 8006722:	4619      	mov	r1, r3
 8006724:	4610      	mov	r0, r2
 8006726:	f7fe fe60 	bl	80053ea <vListInsertEnd>
 800672a:	e005      	b.n	8006738 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	3318      	adds	r3, #24
 8006730:	4619      	mov	r1, r3
 8006732:	480e      	ldr	r0, [pc, #56]	; (800676c <xTaskRemoveFromEventList+0xb8>)
 8006734:	f7fe fe59 	bl	80053ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673c:	4b0c      	ldr	r3, [pc, #48]	; (8006770 <xTaskRemoveFromEventList+0xbc>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006742:	429a      	cmp	r2, r3
 8006744:	d905      	bls.n	8006752 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006746:	2301      	movs	r3, #1
 8006748:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800674a:	4b0a      	ldr	r3, [pc, #40]	; (8006774 <xTaskRemoveFromEventList+0xc0>)
 800674c:	2201      	movs	r2, #1
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	e001      	b.n	8006756 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006752:	2300      	movs	r3, #0
 8006754:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006756:	697b      	ldr	r3, [r7, #20]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	200008ec 	.word	0x200008ec
 8006764:	200008cc 	.word	0x200008cc
 8006768:	200007c8 	.word	0x200007c8
 800676c:	20000884 	.word	0x20000884
 8006770:	200007c4 	.word	0x200007c4
 8006774:	200008d8 	.word	0x200008d8

08006778 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006780:	4b06      	ldr	r3, [pc, #24]	; (800679c <vTaskInternalSetTimeOutState+0x24>)
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006788:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <vTaskInternalSetTimeOutState+0x28>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	605a      	str	r2, [r3, #4]
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	200008dc 	.word	0x200008dc
 80067a0:	200008c8 	.word	0x200008c8

080067a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	613b      	str	r3, [r7, #16]
}
 80067c6:	bf00      	nop
 80067c8:	e7fe      	b.n	80067c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10a      	bne.n	80067e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	60fb      	str	r3, [r7, #12]
}
 80067e2:	bf00      	nop
 80067e4:	e7fe      	b.n	80067e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80067e6:	f000 fc9d 	bl	8007124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067ea:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <xTaskCheckForTimeOut+0xbc>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006802:	d102      	bne.n	800680a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006804:	2300      	movs	r3, #0
 8006806:	61fb      	str	r3, [r7, #28]
 8006808:	e023      	b.n	8006852 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	4b15      	ldr	r3, [pc, #84]	; (8006864 <xTaskCheckForTimeOut+0xc0>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	429a      	cmp	r2, r3
 8006814:	d007      	beq.n	8006826 <xTaskCheckForTimeOut+0x82>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	429a      	cmp	r2, r3
 800681e:	d302      	bcc.n	8006826 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006820:	2301      	movs	r3, #1
 8006822:	61fb      	str	r3, [r7, #28]
 8006824:	e015      	b.n	8006852 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	429a      	cmp	r2, r3
 800682e:	d20b      	bcs.n	8006848 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	1ad2      	subs	r2, r2, r3
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff ff9b 	bl	8006778 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006842:	2300      	movs	r3, #0
 8006844:	61fb      	str	r3, [r7, #28]
 8006846:	e004      	b.n	8006852 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2200      	movs	r2, #0
 800684c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800684e:	2301      	movs	r3, #1
 8006850:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006852:	f000 fc97 	bl	8007184 <vPortExitCritical>

	return xReturn;
 8006856:	69fb      	ldr	r3, [r7, #28]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3720      	adds	r7, #32
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	200008c8 	.word	0x200008c8
 8006864:	200008dc 	.word	0x200008dc

08006868 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006868:	b480      	push	{r7}
 800686a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800686c:	4b03      	ldr	r3, [pc, #12]	; (800687c <vTaskMissedYield+0x14>)
 800686e:	2201      	movs	r2, #1
 8006870:	601a      	str	r2, [r3, #0]
}
 8006872:	bf00      	nop
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	200008d8 	.word	0x200008d8

08006880 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006888:	f000 f852 	bl	8006930 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800688c:	4b06      	ldr	r3, [pc, #24]	; (80068a8 <prvIdleTask+0x28>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d9f9      	bls.n	8006888 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006894:	4b05      	ldr	r3, [pc, #20]	; (80068ac <prvIdleTask+0x2c>)
 8006896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068a4:	e7f0      	b.n	8006888 <prvIdleTask+0x8>
 80068a6:	bf00      	nop
 80068a8:	200007c8 	.word	0x200007c8
 80068ac:	e000ed04 	.word	0xe000ed04

080068b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068b6:	2300      	movs	r3, #0
 80068b8:	607b      	str	r3, [r7, #4]
 80068ba:	e00c      	b.n	80068d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4a12      	ldr	r2, [pc, #72]	; (8006910 <prvInitialiseTaskLists+0x60>)
 80068c8:	4413      	add	r3, r2
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe fd60 	bl	8005390 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3301      	adds	r3, #1
 80068d4:	607b      	str	r3, [r7, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b06      	cmp	r3, #6
 80068da:	d9ef      	bls.n	80068bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068dc:	480d      	ldr	r0, [pc, #52]	; (8006914 <prvInitialiseTaskLists+0x64>)
 80068de:	f7fe fd57 	bl	8005390 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068e2:	480d      	ldr	r0, [pc, #52]	; (8006918 <prvInitialiseTaskLists+0x68>)
 80068e4:	f7fe fd54 	bl	8005390 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068e8:	480c      	ldr	r0, [pc, #48]	; (800691c <prvInitialiseTaskLists+0x6c>)
 80068ea:	f7fe fd51 	bl	8005390 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068ee:	480c      	ldr	r0, [pc, #48]	; (8006920 <prvInitialiseTaskLists+0x70>)
 80068f0:	f7fe fd4e 	bl	8005390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068f4:	480b      	ldr	r0, [pc, #44]	; (8006924 <prvInitialiseTaskLists+0x74>)
 80068f6:	f7fe fd4b 	bl	8005390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068fa:	4b0b      	ldr	r3, [pc, #44]	; (8006928 <prvInitialiseTaskLists+0x78>)
 80068fc:	4a05      	ldr	r2, [pc, #20]	; (8006914 <prvInitialiseTaskLists+0x64>)
 80068fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006900:	4b0a      	ldr	r3, [pc, #40]	; (800692c <prvInitialiseTaskLists+0x7c>)
 8006902:	4a05      	ldr	r2, [pc, #20]	; (8006918 <prvInitialiseTaskLists+0x68>)
 8006904:	601a      	str	r2, [r3, #0]
}
 8006906:	bf00      	nop
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	200007c8 	.word	0x200007c8
 8006914:	20000854 	.word	0x20000854
 8006918:	20000868 	.word	0x20000868
 800691c:	20000884 	.word	0x20000884
 8006920:	20000898 	.word	0x20000898
 8006924:	200008b0 	.word	0x200008b0
 8006928:	2000087c 	.word	0x2000087c
 800692c:	20000880 	.word	0x20000880

08006930 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006936:	e019      	b.n	800696c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006938:	f000 fbf4 	bl	8007124 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800693c:	4b10      	ldr	r3, [pc, #64]	; (8006980 <prvCheckTasksWaitingTermination+0x50>)
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	3304      	adds	r3, #4
 8006948:	4618      	mov	r0, r3
 800694a:	f7fe fdab 	bl	80054a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800694e:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <prvCheckTasksWaitingTermination+0x54>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3b01      	subs	r3, #1
 8006954:	4a0b      	ldr	r2, [pc, #44]	; (8006984 <prvCheckTasksWaitingTermination+0x54>)
 8006956:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006958:	4b0b      	ldr	r3, [pc, #44]	; (8006988 <prvCheckTasksWaitingTermination+0x58>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3b01      	subs	r3, #1
 800695e:	4a0a      	ldr	r2, [pc, #40]	; (8006988 <prvCheckTasksWaitingTermination+0x58>)
 8006960:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006962:	f000 fc0f 	bl	8007184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f810 	bl	800698c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800696c:	4b06      	ldr	r3, [pc, #24]	; (8006988 <prvCheckTasksWaitingTermination+0x58>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e1      	bne.n	8006938 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20000898 	.word	0x20000898
 8006984:	200008c4 	.word	0x200008c4
 8006988:	200008ac 	.word	0x200008ac

0800698c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	334c      	adds	r3, #76	; 0x4c
 8006998:	4618      	mov	r0, r3
 800699a:	f000 ff53 	bl	8007844 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d108      	bne.n	80069ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 fd9f 	bl	80074f0 <vPortFree>
				vPortFree( pxTCB );
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fd9c 	bl	80074f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069b8:	e018      	b.n	80069ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d103      	bne.n	80069cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fd93 	bl	80074f0 <vPortFree>
	}
 80069ca:	e00f      	b.n	80069ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d00a      	beq.n	80069ec <prvDeleteTCB+0x60>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	60fb      	str	r3, [r7, #12]
}
 80069e8:	bf00      	nop
 80069ea:	e7fe      	b.n	80069ea <prvDeleteTCB+0x5e>
	}
 80069ec:	bf00      	nop
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069fa:	4b0f      	ldr	r3, [pc, #60]	; (8006a38 <prvResetNextTaskUnblockTime+0x44>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <prvResetNextTaskUnblockTime+0x14>
 8006a04:	2301      	movs	r3, #1
 8006a06:	e000      	b.n	8006a0a <prvResetNextTaskUnblockTime+0x16>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d004      	beq.n	8006a18 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a0e:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <prvResetNextTaskUnblockTime+0x48>)
 8006a10:	f04f 32ff 	mov.w	r2, #4294967295
 8006a14:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a16:	e008      	b.n	8006a2a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a18:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <prvResetNextTaskUnblockTime+0x44>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	4a05      	ldr	r2, [pc, #20]	; (8006a3c <prvResetNextTaskUnblockTime+0x48>)
 8006a28:	6013      	str	r3, [r2, #0]
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	2000087c 	.word	0x2000087c
 8006a3c:	200008e4 	.word	0x200008e4

08006a40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a46:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <xTaskGetSchedulerState+0x34>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	607b      	str	r3, [r7, #4]
 8006a52:	e008      	b.n	8006a66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a54:	4b08      	ldr	r3, [pc, #32]	; (8006a78 <xTaskGetSchedulerState+0x38>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d102      	bne.n	8006a62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	607b      	str	r3, [r7, #4]
 8006a60:	e001      	b.n	8006a66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a62:	2300      	movs	r3, #0
 8006a64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a66:	687b      	ldr	r3, [r7, #4]
	}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	200008d0 	.word	0x200008d0
 8006a78:	200008ec 	.word	0x200008ec

08006a7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d06e      	beq.n	8006b70 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a96:	4b39      	ldr	r3, [pc, #228]	; (8006b7c <xTaskPriorityInherit+0x100>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d25e      	bcs.n	8006b5e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	db06      	blt.n	8006ab6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aa8:	4b34      	ldr	r3, [pc, #208]	; (8006b7c <xTaskPriorityInherit+0x100>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aae:	f1c3 0207 	rsb	r2, r3, #7
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	6959      	ldr	r1, [r3, #20]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006abe:	4613      	mov	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4a2e      	ldr	r2, [pc, #184]	; (8006b80 <xTaskPriorityInherit+0x104>)
 8006ac8:	4413      	add	r3, r2
 8006aca:	4299      	cmp	r1, r3
 8006acc:	d101      	bne.n	8006ad2 <xTaskPriorityInherit+0x56>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e000      	b.n	8006ad4 <xTaskPriorityInherit+0x58>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d03a      	beq.n	8006b4e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	3304      	adds	r3, #4
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7fe fce1 	bl	80054a4 <uxListRemove>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d115      	bne.n	8006b14 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aec:	4924      	ldr	r1, [pc, #144]	; (8006b80 <xTaskPriorityInherit+0x104>)
 8006aee:	4613      	mov	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	440b      	add	r3, r1
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10a      	bne.n	8006b14 <xTaskPriorityInherit+0x98>
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b02:	2201      	movs	r2, #1
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	43da      	mvns	r2, r3
 8006b0a:	4b1e      	ldr	r3, [pc, #120]	; (8006b84 <xTaskPriorityInherit+0x108>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	4a1c      	ldr	r2, [pc, #112]	; (8006b84 <xTaskPriorityInherit+0x108>)
 8006b12:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b14:	4b19      	ldr	r3, [pc, #100]	; (8006b7c <xTaskPriorityInherit+0x100>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b22:	2201      	movs	r2, #1
 8006b24:	409a      	lsls	r2, r3
 8006b26:	4b17      	ldr	r3, [pc, #92]	; (8006b84 <xTaskPriorityInherit+0x108>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	4a15      	ldr	r2, [pc, #84]	; (8006b84 <xTaskPriorityInherit+0x108>)
 8006b2e:	6013      	str	r3, [r2, #0]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b34:	4613      	mov	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4a10      	ldr	r2, [pc, #64]	; (8006b80 <xTaskPriorityInherit+0x104>)
 8006b3e:	441a      	add	r2, r3
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	3304      	adds	r3, #4
 8006b44:	4619      	mov	r1, r3
 8006b46:	4610      	mov	r0, r2
 8006b48:	f7fe fc4f 	bl	80053ea <vListInsertEnd>
 8006b4c:	e004      	b.n	8006b58 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b4e:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <xTaskPriorityInherit+0x100>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	e008      	b.n	8006b70 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b62:	4b06      	ldr	r3, [pc, #24]	; (8006b7c <xTaskPriorityInherit+0x100>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d201      	bcs.n	8006b70 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b70:	68fb      	ldr	r3, [r7, #12]
	}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	200007c4 	.word	0x200007c4
 8006b80:	200007c8 	.word	0x200007c8
 8006b84:	200008cc 	.word	0x200008cc

08006b88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d06e      	beq.n	8006c7c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b9e:	4b3a      	ldr	r3, [pc, #232]	; (8006c88 <xTaskPriorityDisinherit+0x100>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d00a      	beq.n	8006bbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	60fb      	str	r3, [r7, #12]
}
 8006bba:	bf00      	nop
 8006bbc:	e7fe      	b.n	8006bbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10a      	bne.n	8006bdc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	60bb      	str	r3, [r7, #8]
}
 8006bd8:	bf00      	nop
 8006bda:	e7fe      	b.n	8006bda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006be0:	1e5a      	subs	r2, r3, #1
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d044      	beq.n	8006c7c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d140      	bne.n	8006c7c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fe fc50 	bl	80054a4 <uxListRemove>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d115      	bne.n	8006c36 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0e:	491f      	ldr	r1, [pc, #124]	; (8006c8c <xTaskPriorityDisinherit+0x104>)
 8006c10:	4613      	mov	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	440b      	add	r3, r1
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10a      	bne.n	8006c36 <xTaskPriorityDisinherit+0xae>
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c24:	2201      	movs	r2, #1
 8006c26:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2a:	43da      	mvns	r2, r3
 8006c2c:	4b18      	ldr	r3, [pc, #96]	; (8006c90 <xTaskPriorityDisinherit+0x108>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4013      	ands	r3, r2
 8006c32:	4a17      	ldr	r2, [pc, #92]	; (8006c90 <xTaskPriorityDisinherit+0x108>)
 8006c34:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c42:	f1c3 0207 	rsb	r2, r3, #7
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4e:	2201      	movs	r2, #1
 8006c50:	409a      	lsls	r2, r3
 8006c52:	4b0f      	ldr	r3, [pc, #60]	; (8006c90 <xTaskPriorityDisinherit+0x108>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	4a0d      	ldr	r2, [pc, #52]	; (8006c90 <xTaskPriorityDisinherit+0x108>)
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c60:	4613      	mov	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4a08      	ldr	r2, [pc, #32]	; (8006c8c <xTaskPriorityDisinherit+0x104>)
 8006c6a:	441a      	add	r2, r3
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	3304      	adds	r3, #4
 8006c70:	4619      	mov	r1, r3
 8006c72:	4610      	mov	r0, r2
 8006c74:	f7fe fbb9 	bl	80053ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c7c:	697b      	ldr	r3, [r7, #20]
	}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3718      	adds	r7, #24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	200007c4 	.word	0x200007c4
 8006c8c:	200007c8 	.word	0x200007c8
 8006c90:	200008cc 	.word	0x200008cc

08006c94 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 8088 	beq.w	8006dbe <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	60fb      	str	r3, [r7, #12]
}
 8006cc8:	bf00      	nop
 8006cca:	e7fe      	b.n	8006cca <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d902      	bls.n	8006cdc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	61fb      	str	r3, [r7, #28]
 8006cda:	e002      	b.n	8006ce2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce6:	69fa      	ldr	r2, [r7, #28]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d068      	beq.n	8006dbe <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d163      	bne.n	8006dbe <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006cf6:	4b34      	ldr	r3, [pc, #208]	; (8006dc8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d10a      	bne.n	8006d16 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	60bb      	str	r3, [r7, #8]
}
 8006d12:	bf00      	nop
 8006d14:	e7fe      	b.n	8006d14 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	69fa      	ldr	r2, [r7, #28]
 8006d20:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	db04      	blt.n	8006d34 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	f1c3 0207 	rsb	r2, r3, #7
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	6959      	ldr	r1, [r3, #20]
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4a22      	ldr	r2, [pc, #136]	; (8006dcc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006d44:	4413      	add	r3, r2
 8006d46:	4299      	cmp	r1, r3
 8006d48:	d101      	bne.n	8006d4e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e000      	b.n	8006d50 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d034      	beq.n	8006dbe <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	3304      	adds	r3, #4
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fe fba3 	bl	80054a4 <uxListRemove>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d115      	bne.n	8006d90 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d68:	4918      	ldr	r1, [pc, #96]	; (8006dcc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	440b      	add	r3, r1
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10a      	bne.n	8006d90 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7e:	2201      	movs	r2, #1
 8006d80:	fa02 f303 	lsl.w	r3, r2, r3
 8006d84:	43da      	mvns	r2, r3
 8006d86:	4b12      	ldr	r3, [pc, #72]	; (8006dd0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	4a10      	ldr	r2, [pc, #64]	; (8006dd0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006d8e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	2201      	movs	r2, #1
 8006d96:	409a      	lsls	r2, r3
 8006d98:	4b0d      	ldr	r3, [pc, #52]	; (8006dd0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	4a0c      	ldr	r2, [pc, #48]	; (8006dd0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006da0:	6013      	str	r3, [r2, #0]
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da6:	4613      	mov	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4a07      	ldr	r2, [pc, #28]	; (8006dcc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006db0:	441a      	add	r2, r3
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	3304      	adds	r3, #4
 8006db6:	4619      	mov	r1, r3
 8006db8:	4610      	mov	r0, r2
 8006dba:	f7fe fb16 	bl	80053ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dbe:	bf00      	nop
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	200007c4 	.word	0x200007c4
 8006dcc:	200007c8 	.word	0x200007c8
 8006dd0:	200008cc 	.word	0x200008cc

08006dd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006dd4:	b480      	push	{r7}
 8006dd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006dd8:	4b07      	ldr	r3, [pc, #28]	; (8006df8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d004      	beq.n	8006dea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006de0:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006de6:	3201      	adds	r2, #1
 8006de8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006dea:	4b03      	ldr	r3, [pc, #12]	; (8006df8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006dec:	681b      	ldr	r3, [r3, #0]
	}
 8006dee:	4618      	mov	r0, r3
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	200007c4 	.word	0x200007c4

08006dfc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e06:	4b29      	ldr	r3, [pc, #164]	; (8006eac <prvAddCurrentTaskToDelayedList+0xb0>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e0c:	4b28      	ldr	r3, [pc, #160]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3304      	adds	r3, #4
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe fb46 	bl	80054a4 <uxListRemove>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10b      	bne.n	8006e36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006e1e:	4b24      	ldr	r3, [pc, #144]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	2201      	movs	r2, #1
 8006e26:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2a:	43da      	mvns	r2, r3
 8006e2c:	4b21      	ldr	r3, [pc, #132]	; (8006eb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4013      	ands	r3, r2
 8006e32:	4a20      	ldr	r2, [pc, #128]	; (8006eb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3c:	d10a      	bne.n	8006e54 <prvAddCurrentTaskToDelayedList+0x58>
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d007      	beq.n	8006e54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e44:	4b1a      	ldr	r3, [pc, #104]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	481a      	ldr	r0, [pc, #104]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e4e:	f7fe facc 	bl	80053ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e52:	e026      	b.n	8006ea2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4413      	add	r3, r2
 8006e5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e5c:	4b14      	ldr	r3, [pc, #80]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d209      	bcs.n	8006e80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e6c:	4b13      	ldr	r3, [pc, #76]	; (8006ebc <prvAddCurrentTaskToDelayedList+0xc0>)
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	4b0f      	ldr	r3, [pc, #60]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3304      	adds	r3, #4
 8006e76:	4619      	mov	r1, r3
 8006e78:	4610      	mov	r0, r2
 8006e7a:	f7fe fada 	bl	8005432 <vListInsert>
}
 8006e7e:	e010      	b.n	8006ea2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e80:	4b0f      	ldr	r3, [pc, #60]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	4b0a      	ldr	r3, [pc, #40]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	f7fe fad0 	bl	8005432 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e92:	4b0c      	ldr	r3, [pc, #48]	; (8006ec4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d202      	bcs.n	8006ea2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006e9c:	4a09      	ldr	r2, [pc, #36]	; (8006ec4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6013      	str	r3, [r2, #0]
}
 8006ea2:	bf00      	nop
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	200008c8 	.word	0x200008c8
 8006eb0:	200007c4 	.word	0x200007c4
 8006eb4:	200008cc 	.word	0x200008cc
 8006eb8:	200008b0 	.word	0x200008b0
 8006ebc:	20000880 	.word	0x20000880
 8006ec0:	2000087c 	.word	0x2000087c
 8006ec4:	200008e4 	.word	0x200008e4

08006ec8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3b04      	subs	r3, #4
 8006ed8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3b04      	subs	r3, #4
 8006ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f023 0201 	bic.w	r2, r3, #1
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3b04      	subs	r3, #4
 8006ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ef8:	4a0c      	ldr	r2, [pc, #48]	; (8006f2c <pxPortInitialiseStack+0x64>)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3b14      	subs	r3, #20
 8006f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3b04      	subs	r3, #4
 8006f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f06f 0202 	mvn.w	r2, #2
 8006f16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	3b20      	subs	r3, #32
 8006f1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	08006f31 	.word	0x08006f31

08006f30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f36:	2300      	movs	r3, #0
 8006f38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f3a:	4b12      	ldr	r3, [pc, #72]	; (8006f84 <prvTaskExitError+0x54>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f42:	d00a      	beq.n	8006f5a <prvTaskExitError+0x2a>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	60fb      	str	r3, [r7, #12]
}
 8006f56:	bf00      	nop
 8006f58:	e7fe      	b.n	8006f58 <prvTaskExitError+0x28>
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	60bb      	str	r3, [r7, #8]
}
 8006f6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f6e:	bf00      	nop
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d0fc      	beq.n	8006f70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f76:	bf00      	nop
 8006f78:	bf00      	nop
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	20000018 	.word	0x20000018
	...

08006f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f90:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <pxCurrentTCBConst2>)
 8006f92:	6819      	ldr	r1, [r3, #0]
 8006f94:	6808      	ldr	r0, [r1, #0]
 8006f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9a:	f380 8809 	msr	PSP, r0
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f04f 0000 	mov.w	r0, #0
 8006fa6:	f380 8811 	msr	BASEPRI, r0
 8006faa:	4770      	bx	lr
 8006fac:	f3af 8000 	nop.w

08006fb0 <pxCurrentTCBConst2>:
 8006fb0:	200007c4 	.word	0x200007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop

08006fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fb8:	4808      	ldr	r0, [pc, #32]	; (8006fdc <prvPortStartFirstTask+0x24>)
 8006fba:	6800      	ldr	r0, [r0, #0]
 8006fbc:	6800      	ldr	r0, [r0, #0]
 8006fbe:	f380 8808 	msr	MSP, r0
 8006fc2:	f04f 0000 	mov.w	r0, #0
 8006fc6:	f380 8814 	msr	CONTROL, r0
 8006fca:	b662      	cpsie	i
 8006fcc:	b661      	cpsie	f
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	df00      	svc	0
 8006fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fda:	bf00      	nop
 8006fdc:	e000ed08 	.word	0xe000ed08

08006fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fe6:	4b46      	ldr	r3, [pc, #280]	; (8007100 <xPortStartScheduler+0x120>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a46      	ldr	r2, [pc, #280]	; (8007104 <xPortStartScheduler+0x124>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d10a      	bne.n	8007006 <xPortStartScheduler+0x26>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	613b      	str	r3, [r7, #16]
}
 8007002:	bf00      	nop
 8007004:	e7fe      	b.n	8007004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007006:	4b3e      	ldr	r3, [pc, #248]	; (8007100 <xPortStartScheduler+0x120>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a3f      	ldr	r2, [pc, #252]	; (8007108 <xPortStartScheduler+0x128>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d10a      	bne.n	8007026 <xPortStartScheduler+0x46>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	60fb      	str	r3, [r7, #12]
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007026:	4b39      	ldr	r3, [pc, #228]	; (800710c <xPortStartScheduler+0x12c>)
 8007028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	22ff      	movs	r2, #255	; 0xff
 8007036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	b2db      	uxtb	r3, r3
 800703e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	b2db      	uxtb	r3, r3
 8007044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007048:	b2da      	uxtb	r2, r3
 800704a:	4b31      	ldr	r3, [pc, #196]	; (8007110 <xPortStartScheduler+0x130>)
 800704c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800704e:	4b31      	ldr	r3, [pc, #196]	; (8007114 <xPortStartScheduler+0x134>)
 8007050:	2207      	movs	r2, #7
 8007052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007054:	e009      	b.n	800706a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007056:	4b2f      	ldr	r3, [pc, #188]	; (8007114 <xPortStartScheduler+0x134>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3b01      	subs	r3, #1
 800705c:	4a2d      	ldr	r2, [pc, #180]	; (8007114 <xPortStartScheduler+0x134>)
 800705e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	b2db      	uxtb	r3, r3
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	b2db      	uxtb	r3, r3
 8007068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	b2db      	uxtb	r3, r3
 800706e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007072:	2b80      	cmp	r3, #128	; 0x80
 8007074:	d0ef      	beq.n	8007056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007076:	4b27      	ldr	r3, [pc, #156]	; (8007114 <xPortStartScheduler+0x134>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f1c3 0307 	rsb	r3, r3, #7
 800707e:	2b04      	cmp	r3, #4
 8007080:	d00a      	beq.n	8007098 <xPortStartScheduler+0xb8>
	__asm volatile
 8007082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007086:	f383 8811 	msr	BASEPRI, r3
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	60bb      	str	r3, [r7, #8]
}
 8007094:	bf00      	nop
 8007096:	e7fe      	b.n	8007096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007098:	4b1e      	ldr	r3, [pc, #120]	; (8007114 <xPortStartScheduler+0x134>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	021b      	lsls	r3, r3, #8
 800709e:	4a1d      	ldr	r2, [pc, #116]	; (8007114 <xPortStartScheduler+0x134>)
 80070a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070a2:	4b1c      	ldr	r3, [pc, #112]	; (8007114 <xPortStartScheduler+0x134>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070aa:	4a1a      	ldr	r2, [pc, #104]	; (8007114 <xPortStartScheduler+0x134>)
 80070ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070b6:	4b18      	ldr	r3, [pc, #96]	; (8007118 <xPortStartScheduler+0x138>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a17      	ldr	r2, [pc, #92]	; (8007118 <xPortStartScheduler+0x138>)
 80070bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070c2:	4b15      	ldr	r3, [pc, #84]	; (8007118 <xPortStartScheduler+0x138>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a14      	ldr	r2, [pc, #80]	; (8007118 <xPortStartScheduler+0x138>)
 80070c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070ce:	f000 f8dd 	bl	800728c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070d2:	4b12      	ldr	r3, [pc, #72]	; (800711c <xPortStartScheduler+0x13c>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070d8:	f000 f8fc 	bl	80072d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070dc:	4b10      	ldr	r3, [pc, #64]	; (8007120 <xPortStartScheduler+0x140>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a0f      	ldr	r2, [pc, #60]	; (8007120 <xPortStartScheduler+0x140>)
 80070e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070e8:	f7ff ff66 	bl	8006fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070ec:	f7ff fa5c 	bl	80065a8 <vTaskSwitchContext>
	prvTaskExitError();
 80070f0:	f7ff ff1e 	bl	8006f30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	e000ed00 	.word	0xe000ed00
 8007104:	410fc271 	.word	0x410fc271
 8007108:	410fc270 	.word	0x410fc270
 800710c:	e000e400 	.word	0xe000e400
 8007110:	200008f0 	.word	0x200008f0
 8007114:	200008f4 	.word	0x200008f4
 8007118:	e000ed20 	.word	0xe000ed20
 800711c:	20000018 	.word	0x20000018
 8007120:	e000ef34 	.word	0xe000ef34

08007124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	607b      	str	r3, [r7, #4]
}
 800713c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800713e:	4b0f      	ldr	r3, [pc, #60]	; (800717c <vPortEnterCritical+0x58>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3301      	adds	r3, #1
 8007144:	4a0d      	ldr	r2, [pc, #52]	; (800717c <vPortEnterCritical+0x58>)
 8007146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007148:	4b0c      	ldr	r3, [pc, #48]	; (800717c <vPortEnterCritical+0x58>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d10f      	bne.n	8007170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007150:	4b0b      	ldr	r3, [pc, #44]	; (8007180 <vPortEnterCritical+0x5c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <vPortEnterCritical+0x4c>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	603b      	str	r3, [r7, #0]
}
 800716c:	bf00      	nop
 800716e:	e7fe      	b.n	800716e <vPortEnterCritical+0x4a>
	}
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	20000018 	.word	0x20000018
 8007180:	e000ed04 	.word	0xe000ed04

08007184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800718a:	4b12      	ldr	r3, [pc, #72]	; (80071d4 <vPortExitCritical+0x50>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10a      	bne.n	80071a8 <vPortExitCritical+0x24>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	607b      	str	r3, [r7, #4]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071a8:	4b0a      	ldr	r3, [pc, #40]	; (80071d4 <vPortExitCritical+0x50>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <vPortExitCritical+0x50>)
 80071b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071b2:	4b08      	ldr	r3, [pc, #32]	; (80071d4 <vPortExitCritical+0x50>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d105      	bne.n	80071c6 <vPortExitCritical+0x42>
 80071ba:	2300      	movs	r3, #0
 80071bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	f383 8811 	msr	BASEPRI, r3
}
 80071c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	20000018 	.word	0x20000018
	...

080071e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071e0:	f3ef 8009 	mrs	r0, PSP
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	4b15      	ldr	r3, [pc, #84]	; (8007240 <pxCurrentTCBConst>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	f01e 0f10 	tst.w	lr, #16
 80071f0:	bf08      	it	eq
 80071f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fa:	6010      	str	r0, [r2, #0]
 80071fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007204:	f380 8811 	msr	BASEPRI, r0
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f7ff f9ca 	bl	80065a8 <vTaskSwitchContext>
 8007214:	f04f 0000 	mov.w	r0, #0
 8007218:	f380 8811 	msr	BASEPRI, r0
 800721c:	bc09      	pop	{r0, r3}
 800721e:	6819      	ldr	r1, [r3, #0]
 8007220:	6808      	ldr	r0, [r1, #0]
 8007222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007226:	f01e 0f10 	tst.w	lr, #16
 800722a:	bf08      	it	eq
 800722c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007230:	f380 8809 	msr	PSP, r0
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	f3af 8000 	nop.w

08007240 <pxCurrentTCBConst>:
 8007240:	200007c4 	.word	0x200007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop

08007248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	607b      	str	r3, [r7, #4]
}
 8007260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007262:	f7ff f8e3 	bl	800642c <xTaskIncrementTick>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800726c:	4b06      	ldr	r3, [pc, #24]	; (8007288 <SysTick_Handler+0x40>)
 800726e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	2300      	movs	r3, #0
 8007276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	f383 8811 	msr	BASEPRI, r3
}
 800727e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	e000ed04 	.word	0xe000ed04

0800728c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007290:	4b0b      	ldr	r3, [pc, #44]	; (80072c0 <vPortSetupTimerInterrupt+0x34>)
 8007292:	2200      	movs	r2, #0
 8007294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007296:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <vPortSetupTimerInterrupt+0x38>)
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800729c:	4b0a      	ldr	r3, [pc, #40]	; (80072c8 <vPortSetupTimerInterrupt+0x3c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a0a      	ldr	r2, [pc, #40]	; (80072cc <vPortSetupTimerInterrupt+0x40>)
 80072a2:	fba2 2303 	umull	r2, r3, r2, r3
 80072a6:	099b      	lsrs	r3, r3, #6
 80072a8:	4a09      	ldr	r2, [pc, #36]	; (80072d0 <vPortSetupTimerInterrupt+0x44>)
 80072aa:	3b01      	subs	r3, #1
 80072ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072ae:	4b04      	ldr	r3, [pc, #16]	; (80072c0 <vPortSetupTimerInterrupt+0x34>)
 80072b0:	2207      	movs	r2, #7
 80072b2:	601a      	str	r2, [r3, #0]
}
 80072b4:	bf00      	nop
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	e000e010 	.word	0xe000e010
 80072c4:	e000e018 	.word	0xe000e018
 80072c8:	2000000c 	.word	0x2000000c
 80072cc:	10624dd3 	.word	0x10624dd3
 80072d0:	e000e014 	.word	0xe000e014

080072d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072e4 <vPortEnableVFP+0x10>
 80072d8:	6801      	ldr	r1, [r0, #0]
 80072da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072de:	6001      	str	r1, [r0, #0]
 80072e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072e2:	bf00      	nop
 80072e4:	e000ed88 	.word	0xe000ed88

080072e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072ee:	f3ef 8305 	mrs	r3, IPSR
 80072f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b0f      	cmp	r3, #15
 80072f8:	d914      	bls.n	8007324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072fa:	4a17      	ldr	r2, [pc, #92]	; (8007358 <vPortValidateInterruptPriority+0x70>)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4413      	add	r3, r2
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007304:	4b15      	ldr	r3, [pc, #84]	; (800735c <vPortValidateInterruptPriority+0x74>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	7afa      	ldrb	r2, [r7, #11]
 800730a:	429a      	cmp	r2, r3
 800730c:	d20a      	bcs.n	8007324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	607b      	str	r3, [r7, #4]
}
 8007320:	bf00      	nop
 8007322:	e7fe      	b.n	8007322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007324:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <vPortValidateInterruptPriority+0x78>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800732c:	4b0d      	ldr	r3, [pc, #52]	; (8007364 <vPortValidateInterruptPriority+0x7c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	429a      	cmp	r2, r3
 8007332:	d90a      	bls.n	800734a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	603b      	str	r3, [r7, #0]
}
 8007346:	bf00      	nop
 8007348:	e7fe      	b.n	8007348 <vPortValidateInterruptPriority+0x60>
	}
 800734a:	bf00      	nop
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	e000e3f0 	.word	0xe000e3f0
 800735c:	200008f0 	.word	0x200008f0
 8007360:	e000ed0c 	.word	0xe000ed0c
 8007364:	200008f4 	.word	0x200008f4

08007368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08a      	sub	sp, #40	; 0x28
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007370:	2300      	movs	r3, #0
 8007372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007374:	f7fe ffb0 	bl	80062d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007378:	4b58      	ldr	r3, [pc, #352]	; (80074dc <pvPortMalloc+0x174>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007380:	f000 f910 	bl	80075a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007384:	4b56      	ldr	r3, [pc, #344]	; (80074e0 <pvPortMalloc+0x178>)
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4013      	ands	r3, r2
 800738c:	2b00      	cmp	r3, #0
 800738e:	f040 808e 	bne.w	80074ae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d01d      	beq.n	80073d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007398:	2208      	movs	r2, #8
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4413      	add	r3, r2
 800739e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d014      	beq.n	80073d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f023 0307 	bic.w	r3, r3, #7
 80073b0:	3308      	adds	r3, #8
 80073b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <pvPortMalloc+0x6c>
	__asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	617b      	str	r3, [r7, #20]
}
 80073d0:	bf00      	nop
 80073d2:	e7fe      	b.n	80073d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d069      	beq.n	80074ae <pvPortMalloc+0x146>
 80073da:	4b42      	ldr	r3, [pc, #264]	; (80074e4 <pvPortMalloc+0x17c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d864      	bhi.n	80074ae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073e4:	4b40      	ldr	r3, [pc, #256]	; (80074e8 <pvPortMalloc+0x180>)
 80073e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073e8:	4b3f      	ldr	r3, [pc, #252]	; (80074e8 <pvPortMalloc+0x180>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073ee:	e004      	b.n	80073fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	429a      	cmp	r2, r3
 8007402:	d903      	bls.n	800740c <pvPortMalloc+0xa4>
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1f1      	bne.n	80073f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800740c:	4b33      	ldr	r3, [pc, #204]	; (80074dc <pvPortMalloc+0x174>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007412:	429a      	cmp	r2, r3
 8007414:	d04b      	beq.n	80074ae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2208      	movs	r2, #8
 800741c:	4413      	add	r3, r2
 800741e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	1ad2      	subs	r2, r2, r3
 8007430:	2308      	movs	r3, #8
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	429a      	cmp	r2, r3
 8007436:	d91f      	bls.n	8007478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4413      	add	r3, r2
 800743e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	f003 0307 	and.w	r3, r3, #7
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <pvPortMalloc+0xf8>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	613b      	str	r3, [r7, #16]
}
 800745c:	bf00      	nop
 800745e:	e7fe      	b.n	800745e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	1ad2      	subs	r2, r2, r3
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007472:	69b8      	ldr	r0, [r7, #24]
 8007474:	f000 f8f8 	bl	8007668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007478:	4b1a      	ldr	r3, [pc, #104]	; (80074e4 <pvPortMalloc+0x17c>)
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	4a18      	ldr	r2, [pc, #96]	; (80074e4 <pvPortMalloc+0x17c>)
 8007484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007486:	4b17      	ldr	r3, [pc, #92]	; (80074e4 <pvPortMalloc+0x17c>)
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	4b18      	ldr	r3, [pc, #96]	; (80074ec <pvPortMalloc+0x184>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	429a      	cmp	r2, r3
 8007490:	d203      	bcs.n	800749a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007492:	4b14      	ldr	r3, [pc, #80]	; (80074e4 <pvPortMalloc+0x17c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a15      	ldr	r2, [pc, #84]	; (80074ec <pvPortMalloc+0x184>)
 8007498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	4b10      	ldr	r3, [pc, #64]	; (80074e0 <pvPortMalloc+0x178>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	431a      	orrs	r2, r3
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074ae:	f7fe ff21 	bl	80062f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <pvPortMalloc+0x16a>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	60fb      	str	r3, [r7, #12]
}
 80074ce:	bf00      	nop
 80074d0:	e7fe      	b.n	80074d0 <pvPortMalloc+0x168>
	return pvReturn;
 80074d2:	69fb      	ldr	r3, [r7, #28]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3728      	adds	r7, #40	; 0x28
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20001500 	.word	0x20001500
 80074e0:	2000150c 	.word	0x2000150c
 80074e4:	20001504 	.word	0x20001504
 80074e8:	200014f8 	.word	0x200014f8
 80074ec:	20001508 	.word	0x20001508

080074f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d048      	beq.n	8007594 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007502:	2308      	movs	r3, #8
 8007504:	425b      	negs	r3, r3
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4413      	add	r3, r2
 800750a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	4b21      	ldr	r3, [pc, #132]	; (800759c <vPortFree+0xac>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4013      	ands	r3, r2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10a      	bne.n	8007534 <vPortFree+0x44>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	60fb      	str	r3, [r7, #12]
}
 8007530:	bf00      	nop
 8007532:	e7fe      	b.n	8007532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00a      	beq.n	8007552 <vPortFree+0x62>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	60bb      	str	r3, [r7, #8]
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	4b11      	ldr	r3, [pc, #68]	; (800759c <vPortFree+0xac>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4013      	ands	r3, r2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d019      	beq.n	8007594 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d115      	bne.n	8007594 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	4b0b      	ldr	r3, [pc, #44]	; (800759c <vPortFree+0xac>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	43db      	mvns	r3, r3
 8007572:	401a      	ands	r2, r3
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007578:	f7fe feae 	bl	80062d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <vPortFree+0xb0>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4413      	add	r3, r2
 8007586:	4a06      	ldr	r2, [pc, #24]	; (80075a0 <vPortFree+0xb0>)
 8007588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800758a:	6938      	ldr	r0, [r7, #16]
 800758c:	f000 f86c 	bl	8007668 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007590:	f7fe feb0 	bl	80062f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007594:	bf00      	nop
 8007596:	3718      	adds	r7, #24
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	2000150c 	.word	0x2000150c
 80075a0:	20001504 	.word	0x20001504

080075a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80075ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075b0:	4b27      	ldr	r3, [pc, #156]	; (8007650 <prvHeapInit+0xac>)
 80075b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00c      	beq.n	80075d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3307      	adds	r3, #7
 80075c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0307 	bic.w	r3, r3, #7
 80075ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	4a1f      	ldr	r2, [pc, #124]	; (8007650 <prvHeapInit+0xac>)
 80075d4:	4413      	add	r3, r2
 80075d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075dc:	4a1d      	ldr	r2, [pc, #116]	; (8007654 <prvHeapInit+0xb0>)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075e2:	4b1c      	ldr	r3, [pc, #112]	; (8007654 <prvHeapInit+0xb0>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	4413      	add	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075f0:	2208      	movs	r2, #8
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1a9b      	subs	r3, r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 0307 	bic.w	r3, r3, #7
 80075fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4a15      	ldr	r2, [pc, #84]	; (8007658 <prvHeapInit+0xb4>)
 8007604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007606:	4b14      	ldr	r3, [pc, #80]	; (8007658 <prvHeapInit+0xb4>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2200      	movs	r2, #0
 800760c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800760e:	4b12      	ldr	r3, [pc, #72]	; (8007658 <prvHeapInit+0xb4>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	1ad2      	subs	r2, r2, r3
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007624:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <prvHeapInit+0xb4>)
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	4a0a      	ldr	r2, [pc, #40]	; (800765c <prvHeapInit+0xb8>)
 8007632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	4a09      	ldr	r2, [pc, #36]	; (8007660 <prvHeapInit+0xbc>)
 800763a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800763c:	4b09      	ldr	r3, [pc, #36]	; (8007664 <prvHeapInit+0xc0>)
 800763e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007642:	601a      	str	r2, [r3, #0]
}
 8007644:	bf00      	nop
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	200008f8 	.word	0x200008f8
 8007654:	200014f8 	.word	0x200014f8
 8007658:	20001500 	.word	0x20001500
 800765c:	20001508 	.word	0x20001508
 8007660:	20001504 	.word	0x20001504
 8007664:	2000150c 	.word	0x2000150c

08007668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007670:	4b28      	ldr	r3, [pc, #160]	; (8007714 <prvInsertBlockIntoFreeList+0xac>)
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	e002      	b.n	800767c <prvInsertBlockIntoFreeList+0x14>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	429a      	cmp	r2, r3
 8007684:	d8f7      	bhi.n	8007676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	4413      	add	r3, r2
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	429a      	cmp	r2, r3
 8007696:	d108      	bne.n	80076aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	441a      	add	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	441a      	add	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d118      	bne.n	80076f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	4b15      	ldr	r3, [pc, #84]	; (8007718 <prvInsertBlockIntoFreeList+0xb0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d00d      	beq.n	80076e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	441a      	add	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	e008      	b.n	80076f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076e6:	4b0c      	ldr	r3, [pc, #48]	; (8007718 <prvInsertBlockIntoFreeList+0xb0>)
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	e003      	b.n	80076f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d002      	beq.n	8007706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007706:	bf00      	nop
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	200014f8 	.word	0x200014f8
 8007718:	20001500 	.word	0x20001500

0800771c <__itoa>:
 800771c:	1e93      	subs	r3, r2, #2
 800771e:	2b22      	cmp	r3, #34	; 0x22
 8007720:	b510      	push	{r4, lr}
 8007722:	460c      	mov	r4, r1
 8007724:	d904      	bls.n	8007730 <__itoa+0x14>
 8007726:	2300      	movs	r3, #0
 8007728:	700b      	strb	r3, [r1, #0]
 800772a:	461c      	mov	r4, r3
 800772c:	4620      	mov	r0, r4
 800772e:	bd10      	pop	{r4, pc}
 8007730:	2a0a      	cmp	r2, #10
 8007732:	d109      	bne.n	8007748 <__itoa+0x2c>
 8007734:	2800      	cmp	r0, #0
 8007736:	da07      	bge.n	8007748 <__itoa+0x2c>
 8007738:	232d      	movs	r3, #45	; 0x2d
 800773a:	700b      	strb	r3, [r1, #0]
 800773c:	4240      	negs	r0, r0
 800773e:	2101      	movs	r1, #1
 8007740:	4421      	add	r1, r4
 8007742:	f000 f805 	bl	8007750 <__utoa>
 8007746:	e7f1      	b.n	800772c <__itoa+0x10>
 8007748:	2100      	movs	r1, #0
 800774a:	e7f9      	b.n	8007740 <__itoa+0x24>

0800774c <itoa>:
 800774c:	f7ff bfe6 	b.w	800771c <__itoa>

08007750 <__utoa>:
 8007750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007752:	4c1f      	ldr	r4, [pc, #124]	; (80077d0 <__utoa+0x80>)
 8007754:	b08b      	sub	sp, #44	; 0x2c
 8007756:	4605      	mov	r5, r0
 8007758:	460b      	mov	r3, r1
 800775a:	466e      	mov	r6, sp
 800775c:	f104 0c20 	add.w	ip, r4, #32
 8007760:	6820      	ldr	r0, [r4, #0]
 8007762:	6861      	ldr	r1, [r4, #4]
 8007764:	4637      	mov	r7, r6
 8007766:	c703      	stmia	r7!, {r0, r1}
 8007768:	3408      	adds	r4, #8
 800776a:	4564      	cmp	r4, ip
 800776c:	463e      	mov	r6, r7
 800776e:	d1f7      	bne.n	8007760 <__utoa+0x10>
 8007770:	7921      	ldrb	r1, [r4, #4]
 8007772:	7139      	strb	r1, [r7, #4]
 8007774:	1e91      	subs	r1, r2, #2
 8007776:	6820      	ldr	r0, [r4, #0]
 8007778:	6038      	str	r0, [r7, #0]
 800777a:	2922      	cmp	r1, #34	; 0x22
 800777c:	f04f 0100 	mov.w	r1, #0
 8007780:	d904      	bls.n	800778c <__utoa+0x3c>
 8007782:	7019      	strb	r1, [r3, #0]
 8007784:	460b      	mov	r3, r1
 8007786:	4618      	mov	r0, r3
 8007788:	b00b      	add	sp, #44	; 0x2c
 800778a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800778c:	1e58      	subs	r0, r3, #1
 800778e:	4684      	mov	ip, r0
 8007790:	fbb5 f7f2 	udiv	r7, r5, r2
 8007794:	fb02 5617 	mls	r6, r2, r7, r5
 8007798:	3628      	adds	r6, #40	; 0x28
 800779a:	446e      	add	r6, sp
 800779c:	460c      	mov	r4, r1
 800779e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80077a2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80077a6:	462e      	mov	r6, r5
 80077a8:	42b2      	cmp	r2, r6
 80077aa:	f101 0101 	add.w	r1, r1, #1
 80077ae:	463d      	mov	r5, r7
 80077b0:	d9ee      	bls.n	8007790 <__utoa+0x40>
 80077b2:	2200      	movs	r2, #0
 80077b4:	545a      	strb	r2, [r3, r1]
 80077b6:	1919      	adds	r1, r3, r4
 80077b8:	1aa5      	subs	r5, r4, r2
 80077ba:	42aa      	cmp	r2, r5
 80077bc:	dae3      	bge.n	8007786 <__utoa+0x36>
 80077be:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80077c2:	780e      	ldrb	r6, [r1, #0]
 80077c4:	7006      	strb	r6, [r0, #0]
 80077c6:	3201      	adds	r2, #1
 80077c8:	f801 5901 	strb.w	r5, [r1], #-1
 80077cc:	e7f4      	b.n	80077b8 <__utoa+0x68>
 80077ce:	bf00      	nop
 80077d0:	0800845c 	.word	0x0800845c

080077d4 <siprintf>:
 80077d4:	b40e      	push	{r1, r2, r3}
 80077d6:	b500      	push	{lr}
 80077d8:	b09c      	sub	sp, #112	; 0x70
 80077da:	ab1d      	add	r3, sp, #116	; 0x74
 80077dc:	9002      	str	r0, [sp, #8]
 80077de:	9006      	str	r0, [sp, #24]
 80077e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077e4:	4809      	ldr	r0, [pc, #36]	; (800780c <siprintf+0x38>)
 80077e6:	9107      	str	r1, [sp, #28]
 80077e8:	9104      	str	r1, [sp, #16]
 80077ea:	4909      	ldr	r1, [pc, #36]	; (8007810 <siprintf+0x3c>)
 80077ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80077f0:	9105      	str	r1, [sp, #20]
 80077f2:	6800      	ldr	r0, [r0, #0]
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	a902      	add	r1, sp, #8
 80077f8:	f000 fa06 	bl	8007c08 <_svfiprintf_r>
 80077fc:	9b02      	ldr	r3, [sp, #8]
 80077fe:	2200      	movs	r2, #0
 8007800:	701a      	strb	r2, [r3, #0]
 8007802:	b01c      	add	sp, #112	; 0x70
 8007804:	f85d eb04 	ldr.w	lr, [sp], #4
 8007808:	b003      	add	sp, #12
 800780a:	4770      	bx	lr
 800780c:	20000068 	.word	0x20000068
 8007810:	ffff0208 	.word	0xffff0208

08007814 <memset>:
 8007814:	4402      	add	r2, r0
 8007816:	4603      	mov	r3, r0
 8007818:	4293      	cmp	r3, r2
 800781a:	d100      	bne.n	800781e <memset+0xa>
 800781c:	4770      	bx	lr
 800781e:	f803 1b01 	strb.w	r1, [r3], #1
 8007822:	e7f9      	b.n	8007818 <memset+0x4>

08007824 <strcat>:
 8007824:	b510      	push	{r4, lr}
 8007826:	4602      	mov	r2, r0
 8007828:	7814      	ldrb	r4, [r2, #0]
 800782a:	4613      	mov	r3, r2
 800782c:	3201      	adds	r2, #1
 800782e:	2c00      	cmp	r4, #0
 8007830:	d1fa      	bne.n	8007828 <strcat+0x4>
 8007832:	3b01      	subs	r3, #1
 8007834:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007838:	f803 2f01 	strb.w	r2, [r3, #1]!
 800783c:	2a00      	cmp	r2, #0
 800783e:	d1f9      	bne.n	8007834 <strcat+0x10>
 8007840:	bd10      	pop	{r4, pc}
	...

08007844 <_reclaim_reent>:
 8007844:	4b29      	ldr	r3, [pc, #164]	; (80078ec <_reclaim_reent+0xa8>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4283      	cmp	r3, r0
 800784a:	b570      	push	{r4, r5, r6, lr}
 800784c:	4604      	mov	r4, r0
 800784e:	d04b      	beq.n	80078e8 <_reclaim_reent+0xa4>
 8007850:	69c3      	ldr	r3, [r0, #28]
 8007852:	b143      	cbz	r3, 8007866 <_reclaim_reent+0x22>
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d144      	bne.n	80078e4 <_reclaim_reent+0xa0>
 800785a:	69e3      	ldr	r3, [r4, #28]
 800785c:	6819      	ldr	r1, [r3, #0]
 800785e:	b111      	cbz	r1, 8007866 <_reclaim_reent+0x22>
 8007860:	4620      	mov	r0, r4
 8007862:	f000 f87f 	bl	8007964 <_free_r>
 8007866:	6961      	ldr	r1, [r4, #20]
 8007868:	b111      	cbz	r1, 8007870 <_reclaim_reent+0x2c>
 800786a:	4620      	mov	r0, r4
 800786c:	f000 f87a 	bl	8007964 <_free_r>
 8007870:	69e1      	ldr	r1, [r4, #28]
 8007872:	b111      	cbz	r1, 800787a <_reclaim_reent+0x36>
 8007874:	4620      	mov	r0, r4
 8007876:	f000 f875 	bl	8007964 <_free_r>
 800787a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800787c:	b111      	cbz	r1, 8007884 <_reclaim_reent+0x40>
 800787e:	4620      	mov	r0, r4
 8007880:	f000 f870 	bl	8007964 <_free_r>
 8007884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007886:	b111      	cbz	r1, 800788e <_reclaim_reent+0x4a>
 8007888:	4620      	mov	r0, r4
 800788a:	f000 f86b 	bl	8007964 <_free_r>
 800788e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007890:	b111      	cbz	r1, 8007898 <_reclaim_reent+0x54>
 8007892:	4620      	mov	r0, r4
 8007894:	f000 f866 	bl	8007964 <_free_r>
 8007898:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800789a:	b111      	cbz	r1, 80078a2 <_reclaim_reent+0x5e>
 800789c:	4620      	mov	r0, r4
 800789e:	f000 f861 	bl	8007964 <_free_r>
 80078a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80078a4:	b111      	cbz	r1, 80078ac <_reclaim_reent+0x68>
 80078a6:	4620      	mov	r0, r4
 80078a8:	f000 f85c 	bl	8007964 <_free_r>
 80078ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80078ae:	b111      	cbz	r1, 80078b6 <_reclaim_reent+0x72>
 80078b0:	4620      	mov	r0, r4
 80078b2:	f000 f857 	bl	8007964 <_free_r>
 80078b6:	6a23      	ldr	r3, [r4, #32]
 80078b8:	b1b3      	cbz	r3, 80078e8 <_reclaim_reent+0xa4>
 80078ba:	4620      	mov	r0, r4
 80078bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80078c0:	4718      	bx	r3
 80078c2:	5949      	ldr	r1, [r1, r5]
 80078c4:	b941      	cbnz	r1, 80078d8 <_reclaim_reent+0x94>
 80078c6:	3504      	adds	r5, #4
 80078c8:	69e3      	ldr	r3, [r4, #28]
 80078ca:	2d80      	cmp	r5, #128	; 0x80
 80078cc:	68d9      	ldr	r1, [r3, #12]
 80078ce:	d1f8      	bne.n	80078c2 <_reclaim_reent+0x7e>
 80078d0:	4620      	mov	r0, r4
 80078d2:	f000 f847 	bl	8007964 <_free_r>
 80078d6:	e7c0      	b.n	800785a <_reclaim_reent+0x16>
 80078d8:	680e      	ldr	r6, [r1, #0]
 80078da:	4620      	mov	r0, r4
 80078dc:	f000 f842 	bl	8007964 <_free_r>
 80078e0:	4631      	mov	r1, r6
 80078e2:	e7ef      	b.n	80078c4 <_reclaim_reent+0x80>
 80078e4:	2500      	movs	r5, #0
 80078e6:	e7ef      	b.n	80078c8 <_reclaim_reent+0x84>
 80078e8:	bd70      	pop	{r4, r5, r6, pc}
 80078ea:	bf00      	nop
 80078ec:	20000068 	.word	0x20000068

080078f0 <__errno>:
 80078f0:	4b01      	ldr	r3, [pc, #4]	; (80078f8 <__errno+0x8>)
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	20000068 	.word	0x20000068

080078fc <__libc_init_array>:
 80078fc:	b570      	push	{r4, r5, r6, lr}
 80078fe:	4d0d      	ldr	r5, [pc, #52]	; (8007934 <__libc_init_array+0x38>)
 8007900:	4c0d      	ldr	r4, [pc, #52]	; (8007938 <__libc_init_array+0x3c>)
 8007902:	1b64      	subs	r4, r4, r5
 8007904:	10a4      	asrs	r4, r4, #2
 8007906:	2600      	movs	r6, #0
 8007908:	42a6      	cmp	r6, r4
 800790a:	d109      	bne.n	8007920 <__libc_init_array+0x24>
 800790c:	4d0b      	ldr	r5, [pc, #44]	; (800793c <__libc_init_array+0x40>)
 800790e:	4c0c      	ldr	r4, [pc, #48]	; (8007940 <__libc_init_array+0x44>)
 8007910:	f000 fc6a 	bl	80081e8 <_init>
 8007914:	1b64      	subs	r4, r4, r5
 8007916:	10a4      	asrs	r4, r4, #2
 8007918:	2600      	movs	r6, #0
 800791a:	42a6      	cmp	r6, r4
 800791c:	d105      	bne.n	800792a <__libc_init_array+0x2e>
 800791e:	bd70      	pop	{r4, r5, r6, pc}
 8007920:	f855 3b04 	ldr.w	r3, [r5], #4
 8007924:	4798      	blx	r3
 8007926:	3601      	adds	r6, #1
 8007928:	e7ee      	b.n	8007908 <__libc_init_array+0xc>
 800792a:	f855 3b04 	ldr.w	r3, [r5], #4
 800792e:	4798      	blx	r3
 8007930:	3601      	adds	r6, #1
 8007932:	e7f2      	b.n	800791a <__libc_init_array+0x1e>
 8007934:	080084b4 	.word	0x080084b4
 8007938:	080084b4 	.word	0x080084b4
 800793c:	080084b4 	.word	0x080084b4
 8007940:	080084b8 	.word	0x080084b8

08007944 <__retarget_lock_acquire_recursive>:
 8007944:	4770      	bx	lr

08007946 <__retarget_lock_release_recursive>:
 8007946:	4770      	bx	lr

08007948 <memcpy>:
 8007948:	440a      	add	r2, r1
 800794a:	4291      	cmp	r1, r2
 800794c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007950:	d100      	bne.n	8007954 <memcpy+0xc>
 8007952:	4770      	bx	lr
 8007954:	b510      	push	{r4, lr}
 8007956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800795a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800795e:	4291      	cmp	r1, r2
 8007960:	d1f9      	bne.n	8007956 <memcpy+0xe>
 8007962:	bd10      	pop	{r4, pc}

08007964 <_free_r>:
 8007964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007966:	2900      	cmp	r1, #0
 8007968:	d044      	beq.n	80079f4 <_free_r+0x90>
 800796a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800796e:	9001      	str	r0, [sp, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	f1a1 0404 	sub.w	r4, r1, #4
 8007976:	bfb8      	it	lt
 8007978:	18e4      	addlt	r4, r4, r3
 800797a:	f000 f8df 	bl	8007b3c <__malloc_lock>
 800797e:	4a1e      	ldr	r2, [pc, #120]	; (80079f8 <_free_r+0x94>)
 8007980:	9801      	ldr	r0, [sp, #4]
 8007982:	6813      	ldr	r3, [r2, #0]
 8007984:	b933      	cbnz	r3, 8007994 <_free_r+0x30>
 8007986:	6063      	str	r3, [r4, #4]
 8007988:	6014      	str	r4, [r2, #0]
 800798a:	b003      	add	sp, #12
 800798c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007990:	f000 b8da 	b.w	8007b48 <__malloc_unlock>
 8007994:	42a3      	cmp	r3, r4
 8007996:	d908      	bls.n	80079aa <_free_r+0x46>
 8007998:	6825      	ldr	r5, [r4, #0]
 800799a:	1961      	adds	r1, r4, r5
 800799c:	428b      	cmp	r3, r1
 800799e:	bf01      	itttt	eq
 80079a0:	6819      	ldreq	r1, [r3, #0]
 80079a2:	685b      	ldreq	r3, [r3, #4]
 80079a4:	1949      	addeq	r1, r1, r5
 80079a6:	6021      	streq	r1, [r4, #0]
 80079a8:	e7ed      	b.n	8007986 <_free_r+0x22>
 80079aa:	461a      	mov	r2, r3
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	b10b      	cbz	r3, 80079b4 <_free_r+0x50>
 80079b0:	42a3      	cmp	r3, r4
 80079b2:	d9fa      	bls.n	80079aa <_free_r+0x46>
 80079b4:	6811      	ldr	r1, [r2, #0]
 80079b6:	1855      	adds	r5, r2, r1
 80079b8:	42a5      	cmp	r5, r4
 80079ba:	d10b      	bne.n	80079d4 <_free_r+0x70>
 80079bc:	6824      	ldr	r4, [r4, #0]
 80079be:	4421      	add	r1, r4
 80079c0:	1854      	adds	r4, r2, r1
 80079c2:	42a3      	cmp	r3, r4
 80079c4:	6011      	str	r1, [r2, #0]
 80079c6:	d1e0      	bne.n	800798a <_free_r+0x26>
 80079c8:	681c      	ldr	r4, [r3, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	6053      	str	r3, [r2, #4]
 80079ce:	440c      	add	r4, r1
 80079d0:	6014      	str	r4, [r2, #0]
 80079d2:	e7da      	b.n	800798a <_free_r+0x26>
 80079d4:	d902      	bls.n	80079dc <_free_r+0x78>
 80079d6:	230c      	movs	r3, #12
 80079d8:	6003      	str	r3, [r0, #0]
 80079da:	e7d6      	b.n	800798a <_free_r+0x26>
 80079dc:	6825      	ldr	r5, [r4, #0]
 80079de:	1961      	adds	r1, r4, r5
 80079e0:	428b      	cmp	r3, r1
 80079e2:	bf04      	itt	eq
 80079e4:	6819      	ldreq	r1, [r3, #0]
 80079e6:	685b      	ldreq	r3, [r3, #4]
 80079e8:	6063      	str	r3, [r4, #4]
 80079ea:	bf04      	itt	eq
 80079ec:	1949      	addeq	r1, r1, r5
 80079ee:	6021      	streq	r1, [r4, #0]
 80079f0:	6054      	str	r4, [r2, #4]
 80079f2:	e7ca      	b.n	800798a <_free_r+0x26>
 80079f4:	b003      	add	sp, #12
 80079f6:	bd30      	pop	{r4, r5, pc}
 80079f8:	20001650 	.word	0x20001650

080079fc <sbrk_aligned>:
 80079fc:	b570      	push	{r4, r5, r6, lr}
 80079fe:	4e0e      	ldr	r6, [pc, #56]	; (8007a38 <sbrk_aligned+0x3c>)
 8007a00:	460c      	mov	r4, r1
 8007a02:	6831      	ldr	r1, [r6, #0]
 8007a04:	4605      	mov	r5, r0
 8007a06:	b911      	cbnz	r1, 8007a0e <sbrk_aligned+0x12>
 8007a08:	f000 fba6 	bl	8008158 <_sbrk_r>
 8007a0c:	6030      	str	r0, [r6, #0]
 8007a0e:	4621      	mov	r1, r4
 8007a10:	4628      	mov	r0, r5
 8007a12:	f000 fba1 	bl	8008158 <_sbrk_r>
 8007a16:	1c43      	adds	r3, r0, #1
 8007a18:	d00a      	beq.n	8007a30 <sbrk_aligned+0x34>
 8007a1a:	1cc4      	adds	r4, r0, #3
 8007a1c:	f024 0403 	bic.w	r4, r4, #3
 8007a20:	42a0      	cmp	r0, r4
 8007a22:	d007      	beq.n	8007a34 <sbrk_aligned+0x38>
 8007a24:	1a21      	subs	r1, r4, r0
 8007a26:	4628      	mov	r0, r5
 8007a28:	f000 fb96 	bl	8008158 <_sbrk_r>
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	d101      	bne.n	8007a34 <sbrk_aligned+0x38>
 8007a30:	f04f 34ff 	mov.w	r4, #4294967295
 8007a34:	4620      	mov	r0, r4
 8007a36:	bd70      	pop	{r4, r5, r6, pc}
 8007a38:	20001654 	.word	0x20001654

08007a3c <_malloc_r>:
 8007a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a40:	1ccd      	adds	r5, r1, #3
 8007a42:	f025 0503 	bic.w	r5, r5, #3
 8007a46:	3508      	adds	r5, #8
 8007a48:	2d0c      	cmp	r5, #12
 8007a4a:	bf38      	it	cc
 8007a4c:	250c      	movcc	r5, #12
 8007a4e:	2d00      	cmp	r5, #0
 8007a50:	4607      	mov	r7, r0
 8007a52:	db01      	blt.n	8007a58 <_malloc_r+0x1c>
 8007a54:	42a9      	cmp	r1, r5
 8007a56:	d905      	bls.n	8007a64 <_malloc_r+0x28>
 8007a58:	230c      	movs	r3, #12
 8007a5a:	603b      	str	r3, [r7, #0]
 8007a5c:	2600      	movs	r6, #0
 8007a5e:	4630      	mov	r0, r6
 8007a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b38 <_malloc_r+0xfc>
 8007a68:	f000 f868 	bl	8007b3c <__malloc_lock>
 8007a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a70:	461c      	mov	r4, r3
 8007a72:	bb5c      	cbnz	r4, 8007acc <_malloc_r+0x90>
 8007a74:	4629      	mov	r1, r5
 8007a76:	4638      	mov	r0, r7
 8007a78:	f7ff ffc0 	bl	80079fc <sbrk_aligned>
 8007a7c:	1c43      	adds	r3, r0, #1
 8007a7e:	4604      	mov	r4, r0
 8007a80:	d155      	bne.n	8007b2e <_malloc_r+0xf2>
 8007a82:	f8d8 4000 	ldr.w	r4, [r8]
 8007a86:	4626      	mov	r6, r4
 8007a88:	2e00      	cmp	r6, #0
 8007a8a:	d145      	bne.n	8007b18 <_malloc_r+0xdc>
 8007a8c:	2c00      	cmp	r4, #0
 8007a8e:	d048      	beq.n	8007b22 <_malloc_r+0xe6>
 8007a90:	6823      	ldr	r3, [r4, #0]
 8007a92:	4631      	mov	r1, r6
 8007a94:	4638      	mov	r0, r7
 8007a96:	eb04 0903 	add.w	r9, r4, r3
 8007a9a:	f000 fb5d 	bl	8008158 <_sbrk_r>
 8007a9e:	4581      	cmp	r9, r0
 8007aa0:	d13f      	bne.n	8007b22 <_malloc_r+0xe6>
 8007aa2:	6821      	ldr	r1, [r4, #0]
 8007aa4:	1a6d      	subs	r5, r5, r1
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	f7ff ffa7 	bl	80079fc <sbrk_aligned>
 8007aae:	3001      	adds	r0, #1
 8007ab0:	d037      	beq.n	8007b22 <_malloc_r+0xe6>
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	442b      	add	r3, r5
 8007ab6:	6023      	str	r3, [r4, #0]
 8007ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d038      	beq.n	8007b32 <_malloc_r+0xf6>
 8007ac0:	685a      	ldr	r2, [r3, #4]
 8007ac2:	42a2      	cmp	r2, r4
 8007ac4:	d12b      	bne.n	8007b1e <_malloc_r+0xe2>
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	605a      	str	r2, [r3, #4]
 8007aca:	e00f      	b.n	8007aec <_malloc_r+0xb0>
 8007acc:	6822      	ldr	r2, [r4, #0]
 8007ace:	1b52      	subs	r2, r2, r5
 8007ad0:	d41f      	bmi.n	8007b12 <_malloc_r+0xd6>
 8007ad2:	2a0b      	cmp	r2, #11
 8007ad4:	d917      	bls.n	8007b06 <_malloc_r+0xca>
 8007ad6:	1961      	adds	r1, r4, r5
 8007ad8:	42a3      	cmp	r3, r4
 8007ada:	6025      	str	r5, [r4, #0]
 8007adc:	bf18      	it	ne
 8007ade:	6059      	strne	r1, [r3, #4]
 8007ae0:	6863      	ldr	r3, [r4, #4]
 8007ae2:	bf08      	it	eq
 8007ae4:	f8c8 1000 	streq.w	r1, [r8]
 8007ae8:	5162      	str	r2, [r4, r5]
 8007aea:	604b      	str	r3, [r1, #4]
 8007aec:	4638      	mov	r0, r7
 8007aee:	f104 060b 	add.w	r6, r4, #11
 8007af2:	f000 f829 	bl	8007b48 <__malloc_unlock>
 8007af6:	f026 0607 	bic.w	r6, r6, #7
 8007afa:	1d23      	adds	r3, r4, #4
 8007afc:	1af2      	subs	r2, r6, r3
 8007afe:	d0ae      	beq.n	8007a5e <_malloc_r+0x22>
 8007b00:	1b9b      	subs	r3, r3, r6
 8007b02:	50a3      	str	r3, [r4, r2]
 8007b04:	e7ab      	b.n	8007a5e <_malloc_r+0x22>
 8007b06:	42a3      	cmp	r3, r4
 8007b08:	6862      	ldr	r2, [r4, #4]
 8007b0a:	d1dd      	bne.n	8007ac8 <_malloc_r+0x8c>
 8007b0c:	f8c8 2000 	str.w	r2, [r8]
 8007b10:	e7ec      	b.n	8007aec <_malloc_r+0xb0>
 8007b12:	4623      	mov	r3, r4
 8007b14:	6864      	ldr	r4, [r4, #4]
 8007b16:	e7ac      	b.n	8007a72 <_malloc_r+0x36>
 8007b18:	4634      	mov	r4, r6
 8007b1a:	6876      	ldr	r6, [r6, #4]
 8007b1c:	e7b4      	b.n	8007a88 <_malloc_r+0x4c>
 8007b1e:	4613      	mov	r3, r2
 8007b20:	e7cc      	b.n	8007abc <_malloc_r+0x80>
 8007b22:	230c      	movs	r3, #12
 8007b24:	603b      	str	r3, [r7, #0]
 8007b26:	4638      	mov	r0, r7
 8007b28:	f000 f80e 	bl	8007b48 <__malloc_unlock>
 8007b2c:	e797      	b.n	8007a5e <_malloc_r+0x22>
 8007b2e:	6025      	str	r5, [r4, #0]
 8007b30:	e7dc      	b.n	8007aec <_malloc_r+0xb0>
 8007b32:	605b      	str	r3, [r3, #4]
 8007b34:	deff      	udf	#255	; 0xff
 8007b36:	bf00      	nop
 8007b38:	20001650 	.word	0x20001650

08007b3c <__malloc_lock>:
 8007b3c:	4801      	ldr	r0, [pc, #4]	; (8007b44 <__malloc_lock+0x8>)
 8007b3e:	f7ff bf01 	b.w	8007944 <__retarget_lock_acquire_recursive>
 8007b42:	bf00      	nop
 8007b44:	2000164c 	.word	0x2000164c

08007b48 <__malloc_unlock>:
 8007b48:	4801      	ldr	r0, [pc, #4]	; (8007b50 <__malloc_unlock+0x8>)
 8007b4a:	f7ff befc 	b.w	8007946 <__retarget_lock_release_recursive>
 8007b4e:	bf00      	nop
 8007b50:	2000164c 	.word	0x2000164c

08007b54 <__ssputs_r>:
 8007b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b58:	688e      	ldr	r6, [r1, #8]
 8007b5a:	461f      	mov	r7, r3
 8007b5c:	42be      	cmp	r6, r7
 8007b5e:	680b      	ldr	r3, [r1, #0]
 8007b60:	4682      	mov	sl, r0
 8007b62:	460c      	mov	r4, r1
 8007b64:	4690      	mov	r8, r2
 8007b66:	d82c      	bhi.n	8007bc2 <__ssputs_r+0x6e>
 8007b68:	898a      	ldrh	r2, [r1, #12]
 8007b6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b6e:	d026      	beq.n	8007bbe <__ssputs_r+0x6a>
 8007b70:	6965      	ldr	r5, [r4, #20]
 8007b72:	6909      	ldr	r1, [r1, #16]
 8007b74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b78:	eba3 0901 	sub.w	r9, r3, r1
 8007b7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b80:	1c7b      	adds	r3, r7, #1
 8007b82:	444b      	add	r3, r9
 8007b84:	106d      	asrs	r5, r5, #1
 8007b86:	429d      	cmp	r5, r3
 8007b88:	bf38      	it	cc
 8007b8a:	461d      	movcc	r5, r3
 8007b8c:	0553      	lsls	r3, r2, #21
 8007b8e:	d527      	bpl.n	8007be0 <__ssputs_r+0x8c>
 8007b90:	4629      	mov	r1, r5
 8007b92:	f7ff ff53 	bl	8007a3c <_malloc_r>
 8007b96:	4606      	mov	r6, r0
 8007b98:	b360      	cbz	r0, 8007bf4 <__ssputs_r+0xa0>
 8007b9a:	6921      	ldr	r1, [r4, #16]
 8007b9c:	464a      	mov	r2, r9
 8007b9e:	f7ff fed3 	bl	8007948 <memcpy>
 8007ba2:	89a3      	ldrh	r3, [r4, #12]
 8007ba4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bac:	81a3      	strh	r3, [r4, #12]
 8007bae:	6126      	str	r6, [r4, #16]
 8007bb0:	6165      	str	r5, [r4, #20]
 8007bb2:	444e      	add	r6, r9
 8007bb4:	eba5 0509 	sub.w	r5, r5, r9
 8007bb8:	6026      	str	r6, [r4, #0]
 8007bba:	60a5      	str	r5, [r4, #8]
 8007bbc:	463e      	mov	r6, r7
 8007bbe:	42be      	cmp	r6, r7
 8007bc0:	d900      	bls.n	8007bc4 <__ssputs_r+0x70>
 8007bc2:	463e      	mov	r6, r7
 8007bc4:	6820      	ldr	r0, [r4, #0]
 8007bc6:	4632      	mov	r2, r6
 8007bc8:	4641      	mov	r1, r8
 8007bca:	f000 faab 	bl	8008124 <memmove>
 8007bce:	68a3      	ldr	r3, [r4, #8]
 8007bd0:	1b9b      	subs	r3, r3, r6
 8007bd2:	60a3      	str	r3, [r4, #8]
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	4433      	add	r3, r6
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	2000      	movs	r0, #0
 8007bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be0:	462a      	mov	r2, r5
 8007be2:	f000 fac9 	bl	8008178 <_realloc_r>
 8007be6:	4606      	mov	r6, r0
 8007be8:	2800      	cmp	r0, #0
 8007bea:	d1e0      	bne.n	8007bae <__ssputs_r+0x5a>
 8007bec:	6921      	ldr	r1, [r4, #16]
 8007bee:	4650      	mov	r0, sl
 8007bf0:	f7ff feb8 	bl	8007964 <_free_r>
 8007bf4:	230c      	movs	r3, #12
 8007bf6:	f8ca 3000 	str.w	r3, [sl]
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c00:	81a3      	strh	r3, [r4, #12]
 8007c02:	f04f 30ff 	mov.w	r0, #4294967295
 8007c06:	e7e9      	b.n	8007bdc <__ssputs_r+0x88>

08007c08 <_svfiprintf_r>:
 8007c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0c:	4698      	mov	r8, r3
 8007c0e:	898b      	ldrh	r3, [r1, #12]
 8007c10:	061b      	lsls	r3, r3, #24
 8007c12:	b09d      	sub	sp, #116	; 0x74
 8007c14:	4607      	mov	r7, r0
 8007c16:	460d      	mov	r5, r1
 8007c18:	4614      	mov	r4, r2
 8007c1a:	d50e      	bpl.n	8007c3a <_svfiprintf_r+0x32>
 8007c1c:	690b      	ldr	r3, [r1, #16]
 8007c1e:	b963      	cbnz	r3, 8007c3a <_svfiprintf_r+0x32>
 8007c20:	2140      	movs	r1, #64	; 0x40
 8007c22:	f7ff ff0b 	bl	8007a3c <_malloc_r>
 8007c26:	6028      	str	r0, [r5, #0]
 8007c28:	6128      	str	r0, [r5, #16]
 8007c2a:	b920      	cbnz	r0, 8007c36 <_svfiprintf_r+0x2e>
 8007c2c:	230c      	movs	r3, #12
 8007c2e:	603b      	str	r3, [r7, #0]
 8007c30:	f04f 30ff 	mov.w	r0, #4294967295
 8007c34:	e0d0      	b.n	8007dd8 <_svfiprintf_r+0x1d0>
 8007c36:	2340      	movs	r3, #64	; 0x40
 8007c38:	616b      	str	r3, [r5, #20]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c3e:	2320      	movs	r3, #32
 8007c40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c44:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c48:	2330      	movs	r3, #48	; 0x30
 8007c4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007df0 <_svfiprintf_r+0x1e8>
 8007c4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c52:	f04f 0901 	mov.w	r9, #1
 8007c56:	4623      	mov	r3, r4
 8007c58:	469a      	mov	sl, r3
 8007c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c5e:	b10a      	cbz	r2, 8007c64 <_svfiprintf_r+0x5c>
 8007c60:	2a25      	cmp	r2, #37	; 0x25
 8007c62:	d1f9      	bne.n	8007c58 <_svfiprintf_r+0x50>
 8007c64:	ebba 0b04 	subs.w	fp, sl, r4
 8007c68:	d00b      	beq.n	8007c82 <_svfiprintf_r+0x7a>
 8007c6a:	465b      	mov	r3, fp
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	4629      	mov	r1, r5
 8007c70:	4638      	mov	r0, r7
 8007c72:	f7ff ff6f 	bl	8007b54 <__ssputs_r>
 8007c76:	3001      	adds	r0, #1
 8007c78:	f000 80a9 	beq.w	8007dce <_svfiprintf_r+0x1c6>
 8007c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c7e:	445a      	add	r2, fp
 8007c80:	9209      	str	r2, [sp, #36]	; 0x24
 8007c82:	f89a 3000 	ldrb.w	r3, [sl]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 80a1 	beq.w	8007dce <_svfiprintf_r+0x1c6>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c96:	f10a 0a01 	add.w	sl, sl, #1
 8007c9a:	9304      	str	r3, [sp, #16]
 8007c9c:	9307      	str	r3, [sp, #28]
 8007c9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ca2:	931a      	str	r3, [sp, #104]	; 0x68
 8007ca4:	4654      	mov	r4, sl
 8007ca6:	2205      	movs	r2, #5
 8007ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cac:	4850      	ldr	r0, [pc, #320]	; (8007df0 <_svfiprintf_r+0x1e8>)
 8007cae:	f7f8 fa97 	bl	80001e0 <memchr>
 8007cb2:	9a04      	ldr	r2, [sp, #16]
 8007cb4:	b9d8      	cbnz	r0, 8007cee <_svfiprintf_r+0xe6>
 8007cb6:	06d0      	lsls	r0, r2, #27
 8007cb8:	bf44      	itt	mi
 8007cba:	2320      	movmi	r3, #32
 8007cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cc0:	0711      	lsls	r1, r2, #28
 8007cc2:	bf44      	itt	mi
 8007cc4:	232b      	movmi	r3, #43	; 0x2b
 8007cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cca:	f89a 3000 	ldrb.w	r3, [sl]
 8007cce:	2b2a      	cmp	r3, #42	; 0x2a
 8007cd0:	d015      	beq.n	8007cfe <_svfiprintf_r+0xf6>
 8007cd2:	9a07      	ldr	r2, [sp, #28]
 8007cd4:	4654      	mov	r4, sl
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	f04f 0c0a 	mov.w	ip, #10
 8007cdc:	4621      	mov	r1, r4
 8007cde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ce2:	3b30      	subs	r3, #48	; 0x30
 8007ce4:	2b09      	cmp	r3, #9
 8007ce6:	d94d      	bls.n	8007d84 <_svfiprintf_r+0x17c>
 8007ce8:	b1b0      	cbz	r0, 8007d18 <_svfiprintf_r+0x110>
 8007cea:	9207      	str	r2, [sp, #28]
 8007cec:	e014      	b.n	8007d18 <_svfiprintf_r+0x110>
 8007cee:	eba0 0308 	sub.w	r3, r0, r8
 8007cf2:	fa09 f303 	lsl.w	r3, r9, r3
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	9304      	str	r3, [sp, #16]
 8007cfa:	46a2      	mov	sl, r4
 8007cfc:	e7d2      	b.n	8007ca4 <_svfiprintf_r+0x9c>
 8007cfe:	9b03      	ldr	r3, [sp, #12]
 8007d00:	1d19      	adds	r1, r3, #4
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	9103      	str	r1, [sp, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bfbb      	ittet	lt
 8007d0a:	425b      	neglt	r3, r3
 8007d0c:	f042 0202 	orrlt.w	r2, r2, #2
 8007d10:	9307      	strge	r3, [sp, #28]
 8007d12:	9307      	strlt	r3, [sp, #28]
 8007d14:	bfb8      	it	lt
 8007d16:	9204      	strlt	r2, [sp, #16]
 8007d18:	7823      	ldrb	r3, [r4, #0]
 8007d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8007d1c:	d10c      	bne.n	8007d38 <_svfiprintf_r+0x130>
 8007d1e:	7863      	ldrb	r3, [r4, #1]
 8007d20:	2b2a      	cmp	r3, #42	; 0x2a
 8007d22:	d134      	bne.n	8007d8e <_svfiprintf_r+0x186>
 8007d24:	9b03      	ldr	r3, [sp, #12]
 8007d26:	1d1a      	adds	r2, r3, #4
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	9203      	str	r2, [sp, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	bfb8      	it	lt
 8007d30:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d34:	3402      	adds	r4, #2
 8007d36:	9305      	str	r3, [sp, #20]
 8007d38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007e00 <_svfiprintf_r+0x1f8>
 8007d3c:	7821      	ldrb	r1, [r4, #0]
 8007d3e:	2203      	movs	r2, #3
 8007d40:	4650      	mov	r0, sl
 8007d42:	f7f8 fa4d 	bl	80001e0 <memchr>
 8007d46:	b138      	cbz	r0, 8007d58 <_svfiprintf_r+0x150>
 8007d48:	9b04      	ldr	r3, [sp, #16]
 8007d4a:	eba0 000a 	sub.w	r0, r0, sl
 8007d4e:	2240      	movs	r2, #64	; 0x40
 8007d50:	4082      	lsls	r2, r0
 8007d52:	4313      	orrs	r3, r2
 8007d54:	3401      	adds	r4, #1
 8007d56:	9304      	str	r3, [sp, #16]
 8007d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d5c:	4825      	ldr	r0, [pc, #148]	; (8007df4 <_svfiprintf_r+0x1ec>)
 8007d5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d62:	2206      	movs	r2, #6
 8007d64:	f7f8 fa3c 	bl	80001e0 <memchr>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d038      	beq.n	8007dde <_svfiprintf_r+0x1d6>
 8007d6c:	4b22      	ldr	r3, [pc, #136]	; (8007df8 <_svfiprintf_r+0x1f0>)
 8007d6e:	bb1b      	cbnz	r3, 8007db8 <_svfiprintf_r+0x1b0>
 8007d70:	9b03      	ldr	r3, [sp, #12]
 8007d72:	3307      	adds	r3, #7
 8007d74:	f023 0307 	bic.w	r3, r3, #7
 8007d78:	3308      	adds	r3, #8
 8007d7a:	9303      	str	r3, [sp, #12]
 8007d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d7e:	4433      	add	r3, r6
 8007d80:	9309      	str	r3, [sp, #36]	; 0x24
 8007d82:	e768      	b.n	8007c56 <_svfiprintf_r+0x4e>
 8007d84:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d88:	460c      	mov	r4, r1
 8007d8a:	2001      	movs	r0, #1
 8007d8c:	e7a6      	b.n	8007cdc <_svfiprintf_r+0xd4>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	3401      	adds	r4, #1
 8007d92:	9305      	str	r3, [sp, #20]
 8007d94:	4619      	mov	r1, r3
 8007d96:	f04f 0c0a 	mov.w	ip, #10
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007da0:	3a30      	subs	r2, #48	; 0x30
 8007da2:	2a09      	cmp	r2, #9
 8007da4:	d903      	bls.n	8007dae <_svfiprintf_r+0x1a6>
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0c6      	beq.n	8007d38 <_svfiprintf_r+0x130>
 8007daa:	9105      	str	r1, [sp, #20]
 8007dac:	e7c4      	b.n	8007d38 <_svfiprintf_r+0x130>
 8007dae:	fb0c 2101 	mla	r1, ip, r1, r2
 8007db2:	4604      	mov	r4, r0
 8007db4:	2301      	movs	r3, #1
 8007db6:	e7f0      	b.n	8007d9a <_svfiprintf_r+0x192>
 8007db8:	ab03      	add	r3, sp, #12
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	462a      	mov	r2, r5
 8007dbe:	4b0f      	ldr	r3, [pc, #60]	; (8007dfc <_svfiprintf_r+0x1f4>)
 8007dc0:	a904      	add	r1, sp, #16
 8007dc2:	4638      	mov	r0, r7
 8007dc4:	f3af 8000 	nop.w
 8007dc8:	1c42      	adds	r2, r0, #1
 8007dca:	4606      	mov	r6, r0
 8007dcc:	d1d6      	bne.n	8007d7c <_svfiprintf_r+0x174>
 8007dce:	89ab      	ldrh	r3, [r5, #12]
 8007dd0:	065b      	lsls	r3, r3, #25
 8007dd2:	f53f af2d 	bmi.w	8007c30 <_svfiprintf_r+0x28>
 8007dd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dd8:	b01d      	add	sp, #116	; 0x74
 8007dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dde:	ab03      	add	r3, sp, #12
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	462a      	mov	r2, r5
 8007de4:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <_svfiprintf_r+0x1f4>)
 8007de6:	a904      	add	r1, sp, #16
 8007de8:	4638      	mov	r0, r7
 8007dea:	f000 f879 	bl	8007ee0 <_printf_i>
 8007dee:	e7eb      	b.n	8007dc8 <_svfiprintf_r+0x1c0>
 8007df0:	08008481 	.word	0x08008481
 8007df4:	0800848b 	.word	0x0800848b
 8007df8:	00000000 	.word	0x00000000
 8007dfc:	08007b55 	.word	0x08007b55
 8007e00:	08008487 	.word	0x08008487

08007e04 <_printf_common>:
 8007e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e08:	4616      	mov	r6, r2
 8007e0a:	4699      	mov	r9, r3
 8007e0c:	688a      	ldr	r2, [r1, #8]
 8007e0e:	690b      	ldr	r3, [r1, #16]
 8007e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e14:	4293      	cmp	r3, r2
 8007e16:	bfb8      	it	lt
 8007e18:	4613      	movlt	r3, r2
 8007e1a:	6033      	str	r3, [r6, #0]
 8007e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e20:	4607      	mov	r7, r0
 8007e22:	460c      	mov	r4, r1
 8007e24:	b10a      	cbz	r2, 8007e2a <_printf_common+0x26>
 8007e26:	3301      	adds	r3, #1
 8007e28:	6033      	str	r3, [r6, #0]
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	0699      	lsls	r1, r3, #26
 8007e2e:	bf42      	ittt	mi
 8007e30:	6833      	ldrmi	r3, [r6, #0]
 8007e32:	3302      	addmi	r3, #2
 8007e34:	6033      	strmi	r3, [r6, #0]
 8007e36:	6825      	ldr	r5, [r4, #0]
 8007e38:	f015 0506 	ands.w	r5, r5, #6
 8007e3c:	d106      	bne.n	8007e4c <_printf_common+0x48>
 8007e3e:	f104 0a19 	add.w	sl, r4, #25
 8007e42:	68e3      	ldr	r3, [r4, #12]
 8007e44:	6832      	ldr	r2, [r6, #0]
 8007e46:	1a9b      	subs	r3, r3, r2
 8007e48:	42ab      	cmp	r3, r5
 8007e4a:	dc26      	bgt.n	8007e9a <_printf_common+0x96>
 8007e4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e50:	1e13      	subs	r3, r2, #0
 8007e52:	6822      	ldr	r2, [r4, #0]
 8007e54:	bf18      	it	ne
 8007e56:	2301      	movne	r3, #1
 8007e58:	0692      	lsls	r2, r2, #26
 8007e5a:	d42b      	bmi.n	8007eb4 <_printf_common+0xb0>
 8007e5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e60:	4649      	mov	r1, r9
 8007e62:	4638      	mov	r0, r7
 8007e64:	47c0      	blx	r8
 8007e66:	3001      	adds	r0, #1
 8007e68:	d01e      	beq.n	8007ea8 <_printf_common+0xa4>
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	6922      	ldr	r2, [r4, #16]
 8007e6e:	f003 0306 	and.w	r3, r3, #6
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	bf02      	ittt	eq
 8007e76:	68e5      	ldreq	r5, [r4, #12]
 8007e78:	6833      	ldreq	r3, [r6, #0]
 8007e7a:	1aed      	subeq	r5, r5, r3
 8007e7c:	68a3      	ldr	r3, [r4, #8]
 8007e7e:	bf0c      	ite	eq
 8007e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e84:	2500      	movne	r5, #0
 8007e86:	4293      	cmp	r3, r2
 8007e88:	bfc4      	itt	gt
 8007e8a:	1a9b      	subgt	r3, r3, r2
 8007e8c:	18ed      	addgt	r5, r5, r3
 8007e8e:	2600      	movs	r6, #0
 8007e90:	341a      	adds	r4, #26
 8007e92:	42b5      	cmp	r5, r6
 8007e94:	d11a      	bne.n	8007ecc <_printf_common+0xc8>
 8007e96:	2000      	movs	r0, #0
 8007e98:	e008      	b.n	8007eac <_printf_common+0xa8>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	4652      	mov	r2, sl
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	47c0      	blx	r8
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d103      	bne.n	8007eb0 <_printf_common+0xac>
 8007ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb0:	3501      	adds	r5, #1
 8007eb2:	e7c6      	b.n	8007e42 <_printf_common+0x3e>
 8007eb4:	18e1      	adds	r1, r4, r3
 8007eb6:	1c5a      	adds	r2, r3, #1
 8007eb8:	2030      	movs	r0, #48	; 0x30
 8007eba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ebe:	4422      	add	r2, r4
 8007ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ec8:	3302      	adds	r3, #2
 8007eca:	e7c7      	b.n	8007e5c <_printf_common+0x58>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	4622      	mov	r2, r4
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	47c0      	blx	r8
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	d0e6      	beq.n	8007ea8 <_printf_common+0xa4>
 8007eda:	3601      	adds	r6, #1
 8007edc:	e7d9      	b.n	8007e92 <_printf_common+0x8e>
	...

08007ee0 <_printf_i>:
 8007ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee4:	7e0f      	ldrb	r7, [r1, #24]
 8007ee6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ee8:	2f78      	cmp	r7, #120	; 0x78
 8007eea:	4691      	mov	r9, r2
 8007eec:	4680      	mov	r8, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	469a      	mov	sl, r3
 8007ef2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ef6:	d807      	bhi.n	8007f08 <_printf_i+0x28>
 8007ef8:	2f62      	cmp	r7, #98	; 0x62
 8007efa:	d80a      	bhi.n	8007f12 <_printf_i+0x32>
 8007efc:	2f00      	cmp	r7, #0
 8007efe:	f000 80d4 	beq.w	80080aa <_printf_i+0x1ca>
 8007f02:	2f58      	cmp	r7, #88	; 0x58
 8007f04:	f000 80c0 	beq.w	8008088 <_printf_i+0x1a8>
 8007f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f10:	e03a      	b.n	8007f88 <_printf_i+0xa8>
 8007f12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f16:	2b15      	cmp	r3, #21
 8007f18:	d8f6      	bhi.n	8007f08 <_printf_i+0x28>
 8007f1a:	a101      	add	r1, pc, #4	; (adr r1, 8007f20 <_printf_i+0x40>)
 8007f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f20:	08007f79 	.word	0x08007f79
 8007f24:	08007f8d 	.word	0x08007f8d
 8007f28:	08007f09 	.word	0x08007f09
 8007f2c:	08007f09 	.word	0x08007f09
 8007f30:	08007f09 	.word	0x08007f09
 8007f34:	08007f09 	.word	0x08007f09
 8007f38:	08007f8d 	.word	0x08007f8d
 8007f3c:	08007f09 	.word	0x08007f09
 8007f40:	08007f09 	.word	0x08007f09
 8007f44:	08007f09 	.word	0x08007f09
 8007f48:	08007f09 	.word	0x08007f09
 8007f4c:	08008091 	.word	0x08008091
 8007f50:	08007fb9 	.word	0x08007fb9
 8007f54:	0800804b 	.word	0x0800804b
 8007f58:	08007f09 	.word	0x08007f09
 8007f5c:	08007f09 	.word	0x08007f09
 8007f60:	080080b3 	.word	0x080080b3
 8007f64:	08007f09 	.word	0x08007f09
 8007f68:	08007fb9 	.word	0x08007fb9
 8007f6c:	08007f09 	.word	0x08007f09
 8007f70:	08007f09 	.word	0x08007f09
 8007f74:	08008053 	.word	0x08008053
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	1d1a      	adds	r2, r3, #4
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	602a      	str	r2, [r5, #0]
 8007f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e09f      	b.n	80080cc <_printf_i+0x1ec>
 8007f8c:	6820      	ldr	r0, [r4, #0]
 8007f8e:	682b      	ldr	r3, [r5, #0]
 8007f90:	0607      	lsls	r7, r0, #24
 8007f92:	f103 0104 	add.w	r1, r3, #4
 8007f96:	6029      	str	r1, [r5, #0]
 8007f98:	d501      	bpl.n	8007f9e <_printf_i+0xbe>
 8007f9a:	681e      	ldr	r6, [r3, #0]
 8007f9c:	e003      	b.n	8007fa6 <_printf_i+0xc6>
 8007f9e:	0646      	lsls	r6, r0, #25
 8007fa0:	d5fb      	bpl.n	8007f9a <_printf_i+0xba>
 8007fa2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007fa6:	2e00      	cmp	r6, #0
 8007fa8:	da03      	bge.n	8007fb2 <_printf_i+0xd2>
 8007faa:	232d      	movs	r3, #45	; 0x2d
 8007fac:	4276      	negs	r6, r6
 8007fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fb2:	485a      	ldr	r0, [pc, #360]	; (800811c <_printf_i+0x23c>)
 8007fb4:	230a      	movs	r3, #10
 8007fb6:	e012      	b.n	8007fde <_printf_i+0xfe>
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	6820      	ldr	r0, [r4, #0]
 8007fbc:	1d19      	adds	r1, r3, #4
 8007fbe:	6029      	str	r1, [r5, #0]
 8007fc0:	0605      	lsls	r5, r0, #24
 8007fc2:	d501      	bpl.n	8007fc8 <_printf_i+0xe8>
 8007fc4:	681e      	ldr	r6, [r3, #0]
 8007fc6:	e002      	b.n	8007fce <_printf_i+0xee>
 8007fc8:	0641      	lsls	r1, r0, #25
 8007fca:	d5fb      	bpl.n	8007fc4 <_printf_i+0xe4>
 8007fcc:	881e      	ldrh	r6, [r3, #0]
 8007fce:	4853      	ldr	r0, [pc, #332]	; (800811c <_printf_i+0x23c>)
 8007fd0:	2f6f      	cmp	r7, #111	; 0x6f
 8007fd2:	bf0c      	ite	eq
 8007fd4:	2308      	moveq	r3, #8
 8007fd6:	230a      	movne	r3, #10
 8007fd8:	2100      	movs	r1, #0
 8007fda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fde:	6865      	ldr	r5, [r4, #4]
 8007fe0:	60a5      	str	r5, [r4, #8]
 8007fe2:	2d00      	cmp	r5, #0
 8007fe4:	bfa2      	ittt	ge
 8007fe6:	6821      	ldrge	r1, [r4, #0]
 8007fe8:	f021 0104 	bicge.w	r1, r1, #4
 8007fec:	6021      	strge	r1, [r4, #0]
 8007fee:	b90e      	cbnz	r6, 8007ff4 <_printf_i+0x114>
 8007ff0:	2d00      	cmp	r5, #0
 8007ff2:	d04b      	beq.n	800808c <_printf_i+0x1ac>
 8007ff4:	4615      	mov	r5, r2
 8007ff6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ffa:	fb03 6711 	mls	r7, r3, r1, r6
 8007ffe:	5dc7      	ldrb	r7, [r0, r7]
 8008000:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008004:	4637      	mov	r7, r6
 8008006:	42bb      	cmp	r3, r7
 8008008:	460e      	mov	r6, r1
 800800a:	d9f4      	bls.n	8007ff6 <_printf_i+0x116>
 800800c:	2b08      	cmp	r3, #8
 800800e:	d10b      	bne.n	8008028 <_printf_i+0x148>
 8008010:	6823      	ldr	r3, [r4, #0]
 8008012:	07de      	lsls	r6, r3, #31
 8008014:	d508      	bpl.n	8008028 <_printf_i+0x148>
 8008016:	6923      	ldr	r3, [r4, #16]
 8008018:	6861      	ldr	r1, [r4, #4]
 800801a:	4299      	cmp	r1, r3
 800801c:	bfde      	ittt	le
 800801e:	2330      	movle	r3, #48	; 0x30
 8008020:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008024:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008028:	1b52      	subs	r2, r2, r5
 800802a:	6122      	str	r2, [r4, #16]
 800802c:	f8cd a000 	str.w	sl, [sp]
 8008030:	464b      	mov	r3, r9
 8008032:	aa03      	add	r2, sp, #12
 8008034:	4621      	mov	r1, r4
 8008036:	4640      	mov	r0, r8
 8008038:	f7ff fee4 	bl	8007e04 <_printf_common>
 800803c:	3001      	adds	r0, #1
 800803e:	d14a      	bne.n	80080d6 <_printf_i+0x1f6>
 8008040:	f04f 30ff 	mov.w	r0, #4294967295
 8008044:	b004      	add	sp, #16
 8008046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	f043 0320 	orr.w	r3, r3, #32
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	4833      	ldr	r0, [pc, #204]	; (8008120 <_printf_i+0x240>)
 8008054:	2778      	movs	r7, #120	; 0x78
 8008056:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	6829      	ldr	r1, [r5, #0]
 800805e:	061f      	lsls	r7, r3, #24
 8008060:	f851 6b04 	ldr.w	r6, [r1], #4
 8008064:	d402      	bmi.n	800806c <_printf_i+0x18c>
 8008066:	065f      	lsls	r7, r3, #25
 8008068:	bf48      	it	mi
 800806a:	b2b6      	uxthmi	r6, r6
 800806c:	07df      	lsls	r7, r3, #31
 800806e:	bf48      	it	mi
 8008070:	f043 0320 	orrmi.w	r3, r3, #32
 8008074:	6029      	str	r1, [r5, #0]
 8008076:	bf48      	it	mi
 8008078:	6023      	strmi	r3, [r4, #0]
 800807a:	b91e      	cbnz	r6, 8008084 <_printf_i+0x1a4>
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	f023 0320 	bic.w	r3, r3, #32
 8008082:	6023      	str	r3, [r4, #0]
 8008084:	2310      	movs	r3, #16
 8008086:	e7a7      	b.n	8007fd8 <_printf_i+0xf8>
 8008088:	4824      	ldr	r0, [pc, #144]	; (800811c <_printf_i+0x23c>)
 800808a:	e7e4      	b.n	8008056 <_printf_i+0x176>
 800808c:	4615      	mov	r5, r2
 800808e:	e7bd      	b.n	800800c <_printf_i+0x12c>
 8008090:	682b      	ldr	r3, [r5, #0]
 8008092:	6826      	ldr	r6, [r4, #0]
 8008094:	6961      	ldr	r1, [r4, #20]
 8008096:	1d18      	adds	r0, r3, #4
 8008098:	6028      	str	r0, [r5, #0]
 800809a:	0635      	lsls	r5, r6, #24
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	d501      	bpl.n	80080a4 <_printf_i+0x1c4>
 80080a0:	6019      	str	r1, [r3, #0]
 80080a2:	e002      	b.n	80080aa <_printf_i+0x1ca>
 80080a4:	0670      	lsls	r0, r6, #25
 80080a6:	d5fb      	bpl.n	80080a0 <_printf_i+0x1c0>
 80080a8:	8019      	strh	r1, [r3, #0]
 80080aa:	2300      	movs	r3, #0
 80080ac:	6123      	str	r3, [r4, #16]
 80080ae:	4615      	mov	r5, r2
 80080b0:	e7bc      	b.n	800802c <_printf_i+0x14c>
 80080b2:	682b      	ldr	r3, [r5, #0]
 80080b4:	1d1a      	adds	r2, r3, #4
 80080b6:	602a      	str	r2, [r5, #0]
 80080b8:	681d      	ldr	r5, [r3, #0]
 80080ba:	6862      	ldr	r2, [r4, #4]
 80080bc:	2100      	movs	r1, #0
 80080be:	4628      	mov	r0, r5
 80080c0:	f7f8 f88e 	bl	80001e0 <memchr>
 80080c4:	b108      	cbz	r0, 80080ca <_printf_i+0x1ea>
 80080c6:	1b40      	subs	r0, r0, r5
 80080c8:	6060      	str	r0, [r4, #4]
 80080ca:	6863      	ldr	r3, [r4, #4]
 80080cc:	6123      	str	r3, [r4, #16]
 80080ce:	2300      	movs	r3, #0
 80080d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080d4:	e7aa      	b.n	800802c <_printf_i+0x14c>
 80080d6:	6923      	ldr	r3, [r4, #16]
 80080d8:	462a      	mov	r2, r5
 80080da:	4649      	mov	r1, r9
 80080dc:	4640      	mov	r0, r8
 80080de:	47d0      	blx	sl
 80080e0:	3001      	adds	r0, #1
 80080e2:	d0ad      	beq.n	8008040 <_printf_i+0x160>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	079b      	lsls	r3, r3, #30
 80080e8:	d413      	bmi.n	8008112 <_printf_i+0x232>
 80080ea:	68e0      	ldr	r0, [r4, #12]
 80080ec:	9b03      	ldr	r3, [sp, #12]
 80080ee:	4298      	cmp	r0, r3
 80080f0:	bfb8      	it	lt
 80080f2:	4618      	movlt	r0, r3
 80080f4:	e7a6      	b.n	8008044 <_printf_i+0x164>
 80080f6:	2301      	movs	r3, #1
 80080f8:	4632      	mov	r2, r6
 80080fa:	4649      	mov	r1, r9
 80080fc:	4640      	mov	r0, r8
 80080fe:	47d0      	blx	sl
 8008100:	3001      	adds	r0, #1
 8008102:	d09d      	beq.n	8008040 <_printf_i+0x160>
 8008104:	3501      	adds	r5, #1
 8008106:	68e3      	ldr	r3, [r4, #12]
 8008108:	9903      	ldr	r1, [sp, #12]
 800810a:	1a5b      	subs	r3, r3, r1
 800810c:	42ab      	cmp	r3, r5
 800810e:	dcf2      	bgt.n	80080f6 <_printf_i+0x216>
 8008110:	e7eb      	b.n	80080ea <_printf_i+0x20a>
 8008112:	2500      	movs	r5, #0
 8008114:	f104 0619 	add.w	r6, r4, #25
 8008118:	e7f5      	b.n	8008106 <_printf_i+0x226>
 800811a:	bf00      	nop
 800811c:	08008492 	.word	0x08008492
 8008120:	080084a3 	.word	0x080084a3

08008124 <memmove>:
 8008124:	4288      	cmp	r0, r1
 8008126:	b510      	push	{r4, lr}
 8008128:	eb01 0402 	add.w	r4, r1, r2
 800812c:	d902      	bls.n	8008134 <memmove+0x10>
 800812e:	4284      	cmp	r4, r0
 8008130:	4623      	mov	r3, r4
 8008132:	d807      	bhi.n	8008144 <memmove+0x20>
 8008134:	1e43      	subs	r3, r0, #1
 8008136:	42a1      	cmp	r1, r4
 8008138:	d008      	beq.n	800814c <memmove+0x28>
 800813a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800813e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008142:	e7f8      	b.n	8008136 <memmove+0x12>
 8008144:	4402      	add	r2, r0
 8008146:	4601      	mov	r1, r0
 8008148:	428a      	cmp	r2, r1
 800814a:	d100      	bne.n	800814e <memmove+0x2a>
 800814c:	bd10      	pop	{r4, pc}
 800814e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008156:	e7f7      	b.n	8008148 <memmove+0x24>

08008158 <_sbrk_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4d06      	ldr	r5, [pc, #24]	; (8008174 <_sbrk_r+0x1c>)
 800815c:	2300      	movs	r3, #0
 800815e:	4604      	mov	r4, r0
 8008160:	4608      	mov	r0, r1
 8008162:	602b      	str	r3, [r5, #0]
 8008164:	f7f9 f8d8 	bl	8001318 <_sbrk>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d102      	bne.n	8008172 <_sbrk_r+0x1a>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	b103      	cbz	r3, 8008172 <_sbrk_r+0x1a>
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	20001648 	.word	0x20001648

08008178 <_realloc_r>:
 8008178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800817c:	4680      	mov	r8, r0
 800817e:	4614      	mov	r4, r2
 8008180:	460e      	mov	r6, r1
 8008182:	b921      	cbnz	r1, 800818e <_realloc_r+0x16>
 8008184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008188:	4611      	mov	r1, r2
 800818a:	f7ff bc57 	b.w	8007a3c <_malloc_r>
 800818e:	b92a      	cbnz	r2, 800819c <_realloc_r+0x24>
 8008190:	f7ff fbe8 	bl	8007964 <_free_r>
 8008194:	4625      	mov	r5, r4
 8008196:	4628      	mov	r0, r5
 8008198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800819c:	f000 f81b 	bl	80081d6 <_malloc_usable_size_r>
 80081a0:	4284      	cmp	r4, r0
 80081a2:	4607      	mov	r7, r0
 80081a4:	d802      	bhi.n	80081ac <_realloc_r+0x34>
 80081a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081aa:	d812      	bhi.n	80081d2 <_realloc_r+0x5a>
 80081ac:	4621      	mov	r1, r4
 80081ae:	4640      	mov	r0, r8
 80081b0:	f7ff fc44 	bl	8007a3c <_malloc_r>
 80081b4:	4605      	mov	r5, r0
 80081b6:	2800      	cmp	r0, #0
 80081b8:	d0ed      	beq.n	8008196 <_realloc_r+0x1e>
 80081ba:	42bc      	cmp	r4, r7
 80081bc:	4622      	mov	r2, r4
 80081be:	4631      	mov	r1, r6
 80081c0:	bf28      	it	cs
 80081c2:	463a      	movcs	r2, r7
 80081c4:	f7ff fbc0 	bl	8007948 <memcpy>
 80081c8:	4631      	mov	r1, r6
 80081ca:	4640      	mov	r0, r8
 80081cc:	f7ff fbca 	bl	8007964 <_free_r>
 80081d0:	e7e1      	b.n	8008196 <_realloc_r+0x1e>
 80081d2:	4635      	mov	r5, r6
 80081d4:	e7df      	b.n	8008196 <_realloc_r+0x1e>

080081d6 <_malloc_usable_size_r>:
 80081d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081da:	1f18      	subs	r0, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	bfbc      	itt	lt
 80081e0:	580b      	ldrlt	r3, [r1, r0]
 80081e2:	18c0      	addlt	r0, r0, r3
 80081e4:	4770      	bx	lr
	...

080081e8 <_init>:
 80081e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ea:	bf00      	nop
 80081ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ee:	bc08      	pop	{r3}
 80081f0:	469e      	mov	lr, r3
 80081f2:	4770      	bx	lr

080081f4 <_fini>:
 80081f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f6:	bf00      	nop
 80081f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081fa:	bc08      	pop	{r3}
 80081fc:	469e      	mov	lr, r3
 80081fe:	4770      	bx	lr
